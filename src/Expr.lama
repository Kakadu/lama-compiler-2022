-- Expression evaluator

import List;
import Collection;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

var m =
 foldl (fun (m, [op, fop]) {addMap (m, op, fop)},
        emptyMap (compare),        
        {["+" , infix + ],
         ["-" , infix - ],
         ["*" , infix * ],
         ["/" , infix / ],
         ["%" , infix % ],
         ["==", infix ==],
         ["!=", infix !=],
         ["<" , infix < ],
         ["<=", infix <=],
         [">" , infix > ],
         [">=", infix >=],
         ["&&", infix &&],
         ["!!", infix !!]}
        );

fun evalOp (op, x, y) {
  case findMap (m, op) of Some (f) -> f (x, y) esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var   (x)        -> st (x)
  | Const (n)        -> n
  | Binop (op, x, y) -> evalOp (op, evalExpr (st, x), evalExpr (st, y))
  esac
}

