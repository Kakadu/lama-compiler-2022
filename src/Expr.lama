-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun getMatch (e, brs) {
  fun cmpArr (e, pat) {
    if length (e) != length (pat) then false else foldl (cmp, true, zip (arrayList (e), arrayList (pat))) fi
  }

  fun cmp (acc, [e, pat]) {
    if acc 
    then
      case pat of
        Wildcard -> true
      | Named (_, pat) -> cmp (acc, [e, pat])
      | Const (patN) ->
          case e of
            patN -> true
          | _    -> false
          esac
      | Array (patArr) ->
          case e of
            arr@#array -> cmpArr (arr, listArray (patArr))
          | _          -> false
          esac
      | Sexp (patTag, patArr) ->
          case e of
            Sexp (tag, arr) -> (compare (patTag, tag) == 0) && cmpArr (arr, listArray (patArr))
          | _               -> false
          esac
      esac
    else false
    fi
  }

  case brs of [pat, rhs] : brs -> if cmp (true, [e, pat]) then rhs else getMatch (e, brs) fi esac
}

fun evalWhile (c, cond, body) {
  case eval (c, cond) of 
    [c, Var (v)] -> if v then case eval (c, body) of [c, _] -> evalWhile (c, cond, body) esac else c fi
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (nameExp, varExp) ->
      case evalList (c, {nameExp, varExp}) of
        [[s, w], {Ref (name), Var (v)}]       -> [[s <- [name, Var (v)], w], Var (v)]
      | [c, {ArrayRef (arrName, i), Var (v)}] -> arrName[i] := v; [c, Var (v)]
      esac
  | Seq (fst, snd) -> case evalList(c, {fst, snd}) of [c, {_, v}] -> [c, v] esac
  | Skip -> [c, Void]
  | If (condExp, thExp, elExp) -> 
      case eval (c, condExp) of [c, Var (cond)] -> eval(c, if cond then thExp else elExp fi) esac
  | While (cond, body) -> [evalWhile (c, cond, body), Void]
  | DoWhile (body, cond) -> case eval (c, body) of [c, _] -> [evalWhile (c, cond, body), Void] esac
  | Var (name) -> [c, case lookup (s, name) of Var (v) -> Var (v) esac] 
  | Ref (name) -> [c, Ref (name)]
  | Const (v) -> [c, Var (v)]
  | Binop (op, lExp, rExp) -> 
      case evalList(c, {lExp, rExp}) of [c, {Var (l), Var (r)}] -> [c, Var (evalOp (op, l, r))] esac
  | Ignore (e) -> case eval (c, e) of [c, _] -> [c, Void] esac
  | Scope (defs, e) ->
      fun addDefs (s, defs) {
        foldl (
          fun (s, d) {
            case d of
              Var (defs)              -> addNames (s, defs)
            | Val (defs)              -> addNames (s, defs)
            | Fun (name, args, body)  -> addFunction (s, name, args, body)
            esac
          }, 
          s, 
          defs
        )
      }
      case eval ([addDefs (enterScope (s), defs), w], e) of [[s, w], v] -> [[leaveScope (s), w], v] esac
  | Call (fname, args) ->
      case lookup (s, fname) of
        Fun (_, External)     -> eval (c, Builtin (fname, args))
      | Fun (argNames, body)  ->
          case evalList (c, args) of [[s, w], args] ->
            fun copyArgs (s, args) { foldl (fun (s, [argName, arg]) { addName (s, argName, arg) }, s, args) }
            case eval ([copyArgs (enterScope (enterFunction (s)), zip (argNames, args)), w], body) of
              [[sFun, w], Var (v)] -> [[leaveFunction (s, getGlobal (sFun)), w], Var (v)]
            esac
          esac
      esac
  | Builtin (name, args) ->
      case evalList (c, args) of [[s, w], l] ->
        case evalBuiltin (name, map (fun(Var (x)) {x}, l), w) of [v, w] -> [[s, w], Var (v)] esac
      esac
  | Array (arr) -> case evalList (c, arr) of [c, vals] -> [c, Var (listArray (map (fun (Var (x)) {x}, vals)))] esac
  | Elem (e, i) ->
      case evalList(c, {e, i}) of
        [c, {Var(Sexp (_, arr)), Var (i)}] -> [c, Var (arr[i])]
      | [c, {Var (arr), Var (i)}] -> [c, Var (arr[i])]
      esac
  | ElemRef (e, i) ->
      case evalList(c, {e, i}) of
        [c, {Var (Sexp (_, arr)), Var (i)}] -> [c, ArrayRef (arr, i)]
      | [c, {Var (arr), Var (i)}] -> [c, ArrayRef (arr, i)]
      esac
  | String (s) -> [c, Var (s)]
  | Set (ident, e) -> case eval (c, e) of [[s, w], Var (v)] -> [[s <- [ident, Var (v)], w], Var (v)] esac
  | Sexp (name, l) -> case eval (c, Array (l)) of [c, Var (arr)] -> [c, Var (Sexp (name, arr))] esac
  | Case (scr, brs) -> case eval (c, scr) of [c, Var (scr)] -> eval (c, getMatch (scr, brs)) esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
