-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDef(state, def) {
  case def of
    Var (ns) -> state.addNames(ns)
  | Fun (n, a, b) -> state.addFunction(n, a, b)
  esac
}

fun addDefs(state, defs) {
  foldl (addDef, state, defs)
}

fun addArgs(state, names, values) {
  foldl (fun(s, [n, v]) {
    addName(s, n, v)
  }, state, zip(names, values))
}

public fun getData(arr) {
  case arr of
    Sexp (_, arr) -> arr
  | _ -> arr
  esac
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (a, b) ->
      case eval (c, a) of [c, x] ->
        case eval (c, b) of [c@[s, w], v] ->
          case x of
            R (x) -> [[s <- [x, v], w], v]
          | ElemRef (x, i) -> x[i] := v; [c, v]
          esac
        esac
      esac
  | Seq (a, b) ->
      case eval (c, a) of [c, _] ->
        eval (c, b)
      esac
  | Skip -> [c, E]
  | If (cond, a, b) ->
      case eval (c, cond) of [c, v] ->
        eval (c, if v then a else b fi)
      esac
  | While (cond, a) ->
      case eval (c, cond) of [c, v] ->
        eval(c, if v then Seq (a, expr) else Skip fi)
      esac
  | DoWhile (x, cond) -> eval (c, Seq (x, While (cond, x)))
  | Var (x) -> [c, lookup(s, x)]
  | Ref (x) -> [c, R (x)]
  | Const (n) -> [c, n]
  | Binop (op, a, b) ->
      case eval (c, a) of [c, aval] ->
        case eval (c, b) of [c, bval] ->
          [c, evalOp (op, aval, bval)]
        esac
      esac
  | Ignore (a) ->
      case eval(c, a) of [c, _] ->
        [c, E]
      esac
  | Scope (d, a) ->
      case addDefs(enterScope(s), d) of s ->
        case eval([s, w], a) of [[s, w], v] ->
          [[leaveScope(s), w], v]
        esac
      esac
  | Call (f, as) ->
      case lookup(s, f) of Fun(xs, b) ->
        case evalList (c, as) of
          [[sf, w], vs] -> case b of
            External -> case evalBuiltin(f, vs, w) of [v, w] ->
                          [[s, w], v]
                        esac
          | _ ->  case enterFunction(sf) of sf ->
                    case addArgs(sf, xs, vs) of sf ->
                      case eval([sf, w], b) of [[sf, w], v] ->
                        [[leaveFunction(s, getGlobal(sf)), w], v]
                      esac
                    esac
                  esac
          esac
        esac
      esac
  | String (s) -> [c, s]
  | Array (as) ->
    case evalList(c, as) of [c, vs] ->
      [c, listArray (vs)]
    esac
  | Sexp (name, as) ->
    case eval(c, Array (as)) of [c, as] ->
      [c, Sexp (name, as)]
    esac
  | ElemRef (a, i) ->
    case eval(c, a) of [c, a] ->
      case eval(c, i) of [c, i] ->
        [c, ElemRef (getData(a), i)]
      esac
    esac
  | Elem (a, i) ->
    case eval(c, a) of [c, a] ->
      case eval(c, i) of [c, i] ->
        [c, getData(a)[i]]
      esac
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
