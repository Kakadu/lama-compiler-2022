-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun getVals(xs) {
  map(fun (x) {
    case x of
      Val(xx) -> xx
    esac
  }, xs)
}

fun eval (c@[s, w], expr) {
    case expr of
     Assn (x, v) -> case eval (c, x) of
      [cn, Ref (xx)] -> case eval (cn, v) of
	      [[sn, wn], Val (vv)] -> [[sn <- [xx, vv], wn], Val (vv)]
	      esac
      | [cn, ElemRef (xx, ii)] -> case eval (cn, v) of
	        [[sn, wn], Val (vv)] -> xx[ii] := vv;
	          [[sn, wn], Val (vv)]
	        esac
      esac
    | Var (v) -> [c, Val(s.lookup(v))]
    | Const (x) -> [c, Val(x)]
    | Binop (op, x, y) -> 
        case eval(c, x) of
          [c, Val(a)] -> 
            case eval(c, y) of
              [c, Val(b)] -> [c, Val(evalOp(op, a, b))]
            esac
        esac
    | Ref (x) -> [c, Ref(x)]
    | Seq (x, y) -> 
      case eval(c, x) of
        [c, _] -> eval(c, y)
      esac
    | Skip -> [c, Void]
    | Ignore (x) -> 
        case eval(c, x) of
          [c, v] -> [c, Void]
        esac
    | Read (x) -> 
        case eval(c, x) of
          [[s, w], Ref(x)] ->
            case readWorld(w) of
              [v, nW] -> [[s <- [x, v], nW], Void]
            esac
        esac
    | Write (e) -> 
        case eval(c, e) of
          [[s, w], Val(v)] -> [[s, writeWorld(v, w)], Void]
        esac
    | If (cond, a, b) -> 
      case eval(c, cond) of
        [c, Val(v)] -> 
          if v
          then
            eval(c, a)
          else
            eval(c, b)
          fi
      esac
    | While (cond, b) -> 
      case eval(c, cond) of
        [c, Val(0)] -> [c, Void]
        | [c, _] -> 
            case eval(c, b) of
              [c, _] -> eval(c, expr)
            esac
      esac
    | DoWhile (b, cond) -> 
      case eval(c, b) of
        [c, _] -> 
          case eval(c, cond) of
            [c, Val(0)] -> [c, Void]
            | [c, _] -> eval(c, expr)
          esac
      esac
    | Scope (d, e) -> 
      fun addScope(st, defs) {
        case defs of
          {} -> st |
          d : rest -> 
            case d of
              Var (x) -> addScope (addNames (st, x), rest) |
              Fun (n, p, b) -> addScope (addFunction (st, n, p, b), rest)
            esac
        esac
      }
      var newS = addScope(enterScope (s), d);
      case eval([newS, w], e) of
        [[s, w], v] -> [[leaveScope (s), w], v]
      esac
    | Call (f, params) ->
      case evalList(c, params) of
        [[st, w], pVals] -> 
          case st.lookup(f) of
            Fun (pNames, b) ->
            fun addParams(s, vals, names) {
              case [vals, names] of
               [Val(v): vals, n : names] -> addParams(addName(s, n, v), vals, names) |
               _ -> s
               esac
            }

            case b of
              External -> case evalBuiltin(f, getVals(pVals), w) of
                  [v, w] -> [[s, w], Val(v)]
                esac
              | _ ->  
                var nS = addParams(enterFunction(st), pVals, pNames);
                case eval([nS, w], b) of
                  [[nS, w], res] -> [[leaveFunction(st, getGlobal(nS)), w], res]
                esac
            esac
          esac
      esac
    | String (x) -> [c, Val (x)]
    | Set (x, v) -> eval(c, Assn (Ref (x), v))
    | Elem (x, i) -> case eval (c, x) of 
      [c, Val (xx)] -> case eval (c, i) of 
        [c, Val (ii)] -> case xx of
          Sexp (_, xx) -> [c, Val(xx[ii])]	
          | xx -> [c, Val(xx[ii])]   
          esac
	      esac
      esac
    | ElemRef (x, i) -> case eval (c, x) of 
      [c, Val (xx)] -> case eval (c, i) of 
        [c, Val (ii)] -> [c, ElemRef (xx, ii)]
	      esac
      esac
    | Array (xs) -> case evalList (c, xs) of 
       [c, xxs] -> [c, Val (listArray (getVals (xxs)))]
      esac
    | Sexp (name, xs) -> case evalList (c, xs) of
      [c, xxs] -> [c, Val (Sexp (name, listArray (getVals (xxs))))]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}