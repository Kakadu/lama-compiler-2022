-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[state, world], expr) {
  case expr of
    Const (n) -> [c, n]
  | Var (x) ->
      checkVar (state, x);
      case lookup (state, x) of
        Var (v) -> [c, v]
      esac
  | Ref (x) -> checkVar (state, x); [c, Ref (x)]
  | Binop (op, l, r) ->
      case evalList (c, {l, r}) of
        [new_config, {x, y}] ->
          [new_config, evalOp (op, x, y)]
      esac
  | Skip -> [c, Void]
  | Assn (expr1, expr2) ->
      case evalList (c, {expr1, expr2}) of
        [[new_state, new_world], {Ref (x), v}] ->
          [[new_state <- [x, Var (v)], new_world], v]
      esac
  | Read (x) ->
      checkVar (state, x);
      case readWorld (world) of
        [value, new_world] ->
          [[state <- [x, Var (value)], new_world], Void]
      esac
  | Write (expr) ->
      case eval (c, expr) of
        [[new_state, new_world], v] ->
          [[new_state, writeWorld (v, new_world)], Void]
      esac
  | Seq (expr1, expr2) ->
      case evalList (c, {expr1, expr2}) of
        [new_config, {_, expr2_res}] ->
          [new_config, expr2_res]
      esac
  | If (cond_expr, true_expr, false_expr) ->
      case eval (c, cond_expr) of
        [new_config, cond_val] ->
          eval (new_config, if cond_val then true_expr else false_expr fi)
      esac
  | While (cond_expr, body_expr) ->
      case eval (c, cond_expr) of
        [new_config, cond_val] ->
          if cond_val then
            case eval (new_config, body_expr) of
              [newest_config, _] -> eval (newest_config, While (cond_expr, body_expr))
            esac
          else
            [new_config, Void]
          fi
      esac
  | DoWhile (body_expr, cond_expr) ->
      case eval (c, body_expr) of
        [new_config, _] -> eval (new_config, While (cond_expr, body_expr))
      esac
  | Ignore (expr) ->
      case eval (c, expr) of
        [new_config, _] -> [new_config, Void]
      esac
  | Scope (defs, expr) -> evalScope (c, defs, expr)
  | Call (name, args) ->
      checkFun (state, name);
      case lookup (state, name) of
        Fun (arg_names, body) ->
          case evalList (c, args) of
            [[new_state, new_world], arg_values] ->
              case addArgumentValuesToScope (enterFunction (state), arg_names, arg_values) of
                newest_state ->
                  case eval ([newest_state, new_world], body) of
                    [[newest_state, newest_world], value] ->
                      [[leaveFunction (new_state, getGlobal (newest_state)), newest_world], value]
                  esac
              esac
          esac
      esac
  esac
}

fun addArgumentValuesToScope (state, args, values) {
  case [args, values] of
    [arg:args, value:values] -> addArgumentValuesToScope (addName (state, arg, Var (value)), args, values)
  | [{}, {}] -> state
  esac
}

fun evalScope (c@[state, world], definitions, expr) {
  var new_config = eval ([foldl (
      fun (new_state, definition) {
        case definition of
          Fun (name, args, body) -> addFunction (new_state, name, args, body)
          | Var (vars) -> addNames (new_state, vars)
        esac
      },
      enterScope(state), definitions), world], expr
  );
  var new_state = new_config[0][0];
  var new_world = new_config[0][1];
  var value = new_config[1];
  [[leaveScope (new_state), new_world], value]
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}