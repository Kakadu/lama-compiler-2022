-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinop(op, exp1, exp2) {
  case op of
    "+"    -> exp1 + exp2
    | "-"  -> exp1 - exp2
    | "*"  -> exp1 * exp2
    | "/"  -> exp1 / exp2
    | "%"  -> exp1 % exp2
    | "<"  -> exp1 < exp2
    | ">"  -> exp1 > exp2
    | "<=" -> exp1 <= exp2
    | ">=" -> exp1 >= exp2
    | "==" -> exp1 == exp2
    | "!=" -> exp1 != exp2
  esac
}

public fun evalExpr(st, expr) {
  case expr of
    Var(s)                     -> st(s)
    | Const(i)                 -> i
    | Binop (op, expr1, expr2) -> evalBinop(op, evalExpr(st, expr1), evalExpr(st, expr2))
  esac
}
