-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  fun unval (Val (v)) { v }
  case expr of
    Assn (ElemRef (e, i), r) ->
      case evalList(c, { e, i, r }) of [c, { Val (v), Val (i), Val (r) }] ->
        v[i] := r; [c, Val (r)]
      esac
  | Assn (e1, e2) ->
      case evalList (c, { e1, e2 }) of
        [[s, w], { Ref (x), y }] -> lookupVal (s, x); [[s <- [x, y], w], y]
      esac
  | Seq (e1, e2) ->
      case evalList (c, { e1, e2 }) of
        [c, { l, r }] -> [c, r]
      esac
  | Skip -> [c, Void]
  | If (cond, e1, e2) ->
      case eval (c, cond) of
        [c, Val (v)] -> eval (c, if v then e1 else e2 fi)
      esac
  | While (cond, e) ->
      case eval (c, cond) of
        [c, Val (v)] ->
          if v then
            case eval (c, e) of [c, _] -> eval (c, expr) esac
          else
            [c, Void]
          fi
      esac
  | DoWhile (e, cond) ->
      case eval (c, e) of
        [c, _] -> eval (c, While (cond, e))
      esac
  | Var (x) ->
      case lookupVal (s, x) of
        x -> [c, x]
      esac
  | Ref (x) -> lookupVal (s, x); [c, Ref (x)]
  | Const (n) -> [c, Val (n)]
  | Binop (str_op, e1, e2) ->
      case evalList (c, { e1, e2 }) of
        [c, { Val (x), Val (y) }] -> [c, Val (evalOp (str_op, x, y))]
      esac
  | Ignore (e) -> case eval (c, e) of [c, v] -> [c, Void] esac
  | Scope (defs, e) ->
      var new_e = eval ([foldl (fun (s, def) {
        case def of
          Var (names) -> addNames (s, names)
        | Fun (name, args, body) -> addFunction (s, name, args, body)
        esac
      }, s.enterScope, defs), w], e);
      case new_e of
        [[s, w], v] -> [[leaveScope (s), w], v]
      esac
   | Call (f, args) ->
      case lookupFun (s, f) of
        Fun (_, External) -> eval (c, Builtin (f, args))
      | Fun (params, body) ->
          case evalList (c, args) of
            [c, args] ->
              var e = eval ([foldl (fun (s, [name, Val (v)]) { addName (s, name, Val (v)) },
                                    enterScope (enterFunction (s)), zip (params, args)),
                             w], body);
              case e of
                [[new_s, w], v] -> [[leaveFunction (s, getGlobal (new_s)), w], v]
              esac
          esac
      esac
    | Builtin (f, val_args) ->
      case evalList (c, val_args) of
        [[s, w], val_args] ->
          case evalBuiltin (f, map (unval, val_args), w) of
            [v, w] -> [[s, w], Val (v)]
          esac
      esac
    | Array (e) -> case evalList (c, e) of [c, vals] -> [c, Val (listArray (map (unval, vals)))] esac
    | Elem (e, i) ->
        case evalList (c, { e, i }) of
          [c, { Val (e), Val (i) }]-> [c, Val (e[i])]
        esac
    | String (s) -> [c, Val (s)]
    | Set (i, e) -> case eval (c, e) of [[s, w], Val (v)] -> [[s <- [i, Val (v)], w], Val (v)] esac
    | Sexp (_, arg) -> eval (c, Array (arg))
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
