-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

public fun evalBinOp(op, expr1, expr2) {
  case op of
    "+"    -> expr1 + expr2
    | "-"  -> expr1 - expr2
    | "*"  -> expr1 * expr2
    | "/"  -> expr1 / expr2
    | "%"  -> expr1 % expr2
    | "<"  -> expr1 < expr2
    | ">"  -> expr1 > expr2
    | "<=" -> expr1 <= expr2
    | ">=" -> expr1 >= expr2
    | "==" -> expr1 == expr2
    | "!=" -> expr1 != expr2
    | "&&" -> expr1 && expr2
    | "!!" -> expr1 !! expr2
    | _    -> failure("Unsupported operation!")
  esac
}

fun eval(c@[s, w], expr) {
  case expr of
    Assn (expr1, expr2)        -> case evalList(c, { expr1, expr2 }) of [[s, w], { Ref (x), v }] -> [[s <- [x, v], w], v] esac
    | Seq (stmt1, stmt2)       -> eval(eval(c, stmt1).fst, stmt2)
    | Skip               -> [c, Void]
    | Read (x)           -> case readWorld(w) of [v, nwrld] -> [[s <- [x, v], nwrld], Void] esac
    | Write (x)          -> case eval(c, x) of [[s, w], v] -> [[s, writeWorld(v, w)], Void] esac
    | While (expr, body)    -> case eval(c, expr) of [c, cond] ->
      if cond
        then case eval(c, body) of [c, Void] -> eval(c, While(expr, body)) esac
        else [c, Void]
      fi
    esac
    | DoWhile (body, expr)  -> case eval(c, body) of [c, Void] -> eval(c, While(expr, body)) esac
    | If (expr, stmt1, stmt2)     -> case eval(c, expr) of [c, cond] -> eval(c, if cond then stmt1 else stmt2 fi) esac
    | Binop (op, expr1, expr2) -> case evalList(c, { expr1, expr2 }) of [c, { l, r }] -> [c, evalOp(op, l, r)] esac
    | Var (x)            -> [c, s(x)]
    | Ref (x)            -> [c, Ref(x)]
    | Const (x)          -> [c, x]
    | Ignore (x)         -> case eval(c, x) of [c, _] -> [c, Void] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
