-- Expression evaluator

import List;
import State;


-- Evaluate binop. Takes binop string representation and operands.
fun evalBinop(binop, l, r) {
  case binop of
    "+" -> l + r
  | "-" -> l - r
  | "*" -> l * r
  | "/" -> l / r
  | "%" -> l % r
  | "<" -> l < r
  | ">" -> l > r
  | "<=" -> l <= r
  | ">=" -> l >= r
  | "==" -> l == r
  | "!=" -> l != r
  | "&&" -> l && r
  | "!!" -> l !! r
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (v) -> st(v)
  | Const (num) -> num
  | Binop (binop, e1, e2) -> evalBinop(binop, evalExpr(st, e1), evalExpr(st, e2))
  esac
}
