-- Expression evaluator

import List;
import State;

-- Evaluates a string binop,
-- returns binop
public fun evalBinop(binop) {
  case binop of
    "+" -> infix +
  | "-" -> infix -
  | "*" -> infix *
  | "/" -> infix /
  | "%" -> infix %
  | "<" -> infix <
  | ">" -> infix >
  | "<=" -> infix <=
  | ">=" -> infix >=
  | "==" -> infix ==
  | "!=" -> infix !=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of 
    Const (n) -> n
  | Var (x) -> st(x)
  | Binop (binop, expr1, expr2) -> evalBinop(binop) (evalExpr (st, expr1), evalExpr(st, expr2))
  esac
}
