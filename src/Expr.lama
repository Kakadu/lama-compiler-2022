-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> st (s)
  | Const (i) -> i
  | Binop (s, l_expr, r_expr) -> perform_binop (s, evalExpr (st, l_expr), evalExpr (st, r_expr))
  esac
}

fun perform_binop (op, left, right) {
  case op of
    "+"  -> left + right
  | "-"  -> left - right
  | "*"  -> left * right
  | "/"  -> left / right
  | "%"  -> left % right
  | "<"  -> left < right
  | ">"  -> left > right
  | "<=" -> left <= right
  | "="  -> left = right
  | "!=" -> left != right
  | "&&" -> left && right
  | "!!" -> left !! right
  esac
}