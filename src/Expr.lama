-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (state, expr) {
  case expr of
      Var (x) -> state(x)
    | Const (n) -> n
    | Binop (operation, leftExpr, rightExpr) 
        -> evalBinOperations(operation, evalExpr(state, leftExpr), evalExpr(state, rightExpr))  
  esac
}

public fun evalBinOperations (operation, leftExpr, rightExpr) {
  case operation of
      "+"  -> leftExpr + rightExpr
    | "-"  -> leftExpr - rightExpr
    | "*"  -> leftExpr * rightExpr
    | "/"  -> leftExpr / rightExpr
    | "%"  -> leftExpr % rightExpr
    | "<"  -> leftExpr < rightExpr
    | ">"  -> leftExpr > rightExpr
    | "==" -> leftExpr == rightExpr
    | "<=" -> leftExpr <= rightExpr
    | ">=" -> leftExpr >= rightExpr
    | "!=" -> leftExpr != rightExpr
    | "!!" -> leftExpr !! rightExpr
    | "&&" -> leftExpr && rightExpr
  esac
}
