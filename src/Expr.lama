-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some (f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(fun ([c, vals], e) {
    case eval(c, e) of
      [c, v] -> [c, v:vals]
    esac
  },
    [c, { }],
    exprs) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

fun eval(c@[s, w], expr) {
  case expr of
      Read (x)          ->
        case readWorld(w) of [v, w] ->
          [[s <- [x, v], w], None]
        esac
    | Write (a)         ->
      case eval(c, a) of [c, L (v)] ->
        case writeWorld(v, w) of w ->
          [[s, w], None]
        esac
      esac
    | Assn (a, b)       ->
      case eval(c, a) of [c, R (x)] ->
        case eval(c, b) of [c@[s, w], v@L (vi)] ->
          [[s <- [x, vi], w], v]
        esac
      esac
    | Seq (a, b)        ->
      case eval(c, a) of [c, _] ->
        eval(c, b)
      esac
    | Skip              -> [c, None]
    | If (cond, a, b)   ->
      case eval(c, cond) of [c, L (v)] ->
        eval(c, if v then a else b fi)
      esac
    | While (cond, a)   ->
      case eval(c, cond) of [c, L (v)] ->
        eval(c, if v then Seq(a, expr) else Skip fi)
      esac
    | DoWhile (x, cond) -> eval(c, Seq(x, While(cond, x)))
    | Var (x)           -> [c, L(s(x))]
    | Ref (x)           -> [c, R(x)]
    | Const (n)         -> [c, L(n)]
    | Binop (op, a, b)  ->
      case eval(c, a) of [c, L (a_val)] ->
        case eval(c, b) of [c, L (b_val)] ->
          [c, L(evalOp(op, a_val, b_val))]
        esac
      esac
    | Ignore (a)        ->
      case eval(c, a) of [c, _] ->
        [c, None]
      esac
    | _                 -> failure("Unexpected instruction in evalExpr")
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([emptyState, createWorld(input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
