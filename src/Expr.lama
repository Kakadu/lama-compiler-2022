-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun binopEvaluator(binop) {
  case binop of
    "+" -> fun (x, y) { x + y }
    | "-" -> fun (x, y) { x - y }
    | "*" -> fun (x, y) { x * y }
    | "/" -> fun (x, y) { x / y }
    | "%" -> fun (x, y) { x % y }
    | "<" -> fun (x, y) { x < y }
    | "<=" -> fun (x, y) { x <= y }
    | "==" -> fun (x, y) { x == y }
    | "!=" -> fun (x, y) { x != y }
    | ">=" -> fun (x, y) { x >= y }
    | ">" -> fun (x, y) { x > y }
    | "&&" -> fun (x, y) { x && y }
    | "!!" -> fun (x, y) { x !! y }
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (name) -> st(name)
  | Const (i) -> i
  | Binop (op, left, right) -> binopEvaluator(op)(evalExpr(st, left), evalExpr(st, right))
  esac
}
