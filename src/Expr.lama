-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn    (l_expr, r_expr)           ->
      case evalList (c, {l_expr, r_expr}) of
        [[s, w], {Ref (x), Val (v)}] -> [[s <- [x, Var (v)], w], Val (v)]
      esac
  | Seq     (l_expr, r_expr)           ->
      case evalList (c, {l_expr, r_expr}) of
        [c, {_, v}] -> [c, v]
      esac
  | Skip                               -> [c, Void]
  | Read    (name_of_var)              ->
      checkVar (s, name_of_var);
      case readWorld (w) of
        [n, w] -> [[s <- [name_of_var, Var (n)], w], Void]
      esac
  | Write   (expr)                     ->
      case eval (c, expr) of
        [[s, w], Val (n)] -> [[s, writeWorld (n, w)], Void]
      esac
  | If      (expr, if_expr, else_expr) ->
      case eval (c, expr) of
        [c, Val (n)] -> if n then eval (c, if_expr) else eval (c, else_expr) fi
      esac
  | While   (cond_expr, loop_expr)     ->
      case eval (c, cond_expr) of
        [c, Val (n)] -> if n then eval (eval (c, loop_expr)[0], expr) else [c, Void] fi
      esac
  | DoWhile (loop_expr, cond_expr)     -> eval (eval (c, loop_expr)[0], While (cond_expr, loop_expr))
  | Var     (name_of_var)              ->
      checkVar (s, name_of_var);
      case lookup (s, name_of_var) of
        Var (x) -> [c, Val (x)]
      esac
  | Ref     (name_of_var)              ->
      checkVar (s, name_of_var);
      [c, Ref (name_of_var)]
  | Const   (n)                        -> [c, Val (n)]
  | Binop   (op, l_expr, r_expr)       ->
      case evalList (c, {l_expr, r_expr}) of
        [c, {Val (l), Val (r)}] -> [c, Val (evalOp (op, l, r))]
      esac
  | Ignore  (expr)                     ->
      case eval (c, expr) of
        [c, _] -> [c, Void]
      esac
  | Scope   (defs, expr)               ->
      var new_s = foldl (fun (s, d) {
                           case d of
                             Var (names) -> addNames (s, names)
                           | Fun (name, args, body) -> addFunction (s, name, args, body)
                           esac
                         },
                         enterScope (s),
                         defs);

      case eval ([new_s, w], expr) of
        [[s, w], v] -> [[leaveScope (s), w], v]
      esac
  | Call (name_of_func, args) ->
      checkFun (s, name_of_func);
      case lookup (s, name_of_func) of
        Fun (names_of_args, body) ->
          case evalList (c, args) of
            [c, values_of_args] ->
              var new_s = foldl (fun (s, [name, arg]) {
                                   case arg of
                                     Val (v) -> addName (s, name, Var (v))
                                   esac
                                 },
                                 enterFunction (s),
                                 zip (names_of_args, values_of_args));

          case eval ([new_s, w], body) of
            [[new_s, w], v] -> [[leaveFunction (s, getGlobal (new_s)), w], v]
          esac
        esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
