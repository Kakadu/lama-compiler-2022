-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
  Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
    case eval (c, e) of
    [c, v] -> [c, v : vals]
    esac
  },
    [c, {}],
    exprs) of
  [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (l, r)      ->
      case evalList (c, {l, r}) of
      [[s, w], {Ref (x), v}] ->
        s.checkVar (x);
        [[s <- [x, Var (v)], w], v]
      esac
  | Seq (s1, s2)     ->
    case evalList (c, {s1, s2}) of
    [c, {_, v}] -> [c, v]
    esac
  | Skip             -> [c, 0]
  | Read (x)         ->
    s.checkVar (x);
    case readWorld (w) of
    [v, w] -> [[s <- [x, Var (v)], w], 0]
    esac
  | Write (e)        ->
    case eval (c, e) of
    [[s, w], v] -> [[s, writeWorld (v, w)], 0]
    esac
  | If (e, s1, s2)   ->
    case eval (c, e) of
    [c, cond] -> eval (c, if cond then s1 else s2 fi)
    esac
  | While (e, s)     ->
    case eval (c, e)of
    [c, cond] -> if cond then case eval (c, s) of [c, 0] -> eval (c, expr) esac else [c, 0] fi
    esac
  | DoWhile (s, e)   ->
    case eval (c, s) of
    [c, 0] -> eval (c, While (e, s))
    esac
  | Var (x)          -> s.checkVar (x); [c, case s.lookup (x) of Var(v) -> v esac]
  | Ref (x)          -> s.checkVar (x); [c, Ref (x)]
  | Const (n)        -> [c, n]
  | Binop (op, l, r) ->
    case evalList (c, {l, r}) of
    [c, {l, r}] -> [c, evalOp (op, l, r)]
    esac
  | Ignore (e)       ->
    case eval (c, e) of
    [c, _] -> [c, 0]
    esac
  | Scope (defs, e)  ->
    case eval ([foldl (fun (s, def) {case def of
      Var (names)              -> s.addNames (names)
    | Fun (name, params, body) -> s.addFunction (name, params, body)
    esac
    }, s.enterScope, defs), w], e) of
    [[s, w], v] -> [[s.leaveScope, w], v]
    esac
  | Call (f, args)   ->
    s.checkFun (f);
    case s.lookup (f) of
    Fun (params, body) ->
      if args.size != params.size then
        error (sprintf ("expected %d arguments for function ""%s"", but found %d", params.size, f, args.size), getLoc (f))
      fi;
      case evalList (c, args) of
      [[s, w], args] ->
        case eval ([foldl (fun (s, [param, arg]) {s.addName (param, Var (arg))}, s.enterFunction, zip (params, args)), w], body) of
        [[s2, w], v] -> [[s.leaveFunction (s2.getGlobal), w], v]
        esac
      esac
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
  [c, _] -> c.snd.getOutput
  esac
}
