-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDefinitions (state, defs) {
  foldl (fun (s, def) {
    case def of 
      Fun (name, args, body) -> addFunction(s, name, args, body)
    | Var (name) -> addName (s, name, Var (0))
    esac
  }, state, defs)
}

fun arrayAndSexp(a) {
  case a of
    a@#array -> a
  | a@#str -> a
  | Sexp(_, a) -> a
  esac
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (
    fun ([c, vals], e) {
      case eval (c, e) of
        [c, v] -> [c, v : vals]
      esac
    },
    [c, {}],
    exprs
  ) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Const (const) -> [c, const]
  | Var (name) -> 
    [c, case lookupVal (st, name, None) of Val (v) -> v esac]
  | Ref (x) -> [c, Ref (x)]
  | Scope (vars, e) -> 
    case eval ([addDefinitions (enterScope (st), vars), w], e) of
      [[st, w], v] -> [[leaveScope (st), w], v] 
    esac
  | Ignore (e) -> 
    case eval (c, e) of
      [c, _] -> [c, None] 
    esac
  | Binop (op, l, r) -> 
    case evalList (c, {l, r}) of
      [c, {v1, v2}] -> [c, evalOp (op, v1, v2)]
    esac
  | Skip -> [c, None]
  | Assn (l, r) -> 
    case evalList (c, {l, r}) of 
      [c, {ElemRef(arr, i), v}] -> [c, arr[i] := v]
    | [[st, w], {Ref (x), v}] -> [[st <- [x, Val (v)], w], v]
    esac
  | Seq (s1, s2) -> 
    case evalList (c, {s1, s2}) of
      [c, {_, v}] -> [c, v]
    esac
  | While (cond, body) -> 
    case eval (c, cond) of
      [c, 0] -> [c, None]
    | [c, _] -> 
      case eval (c, body) of
        [c, _] -> eval (c, expr)
      esac
    esac
  | DoWhile (body, cond) ->
    case eval (c, body) of
      [c, _] -> eval (c, While (cond, body))
    esac
  | If (cond, thenBody, elseBody) ->
    case eval (c, cond) of
      [c, 0] -> eval (c, elseBody)
    | [c, _] -> eval (c, thenBody)
    esac
  | Call (name, exprs) -> 
    var oldSt = st;
    case lookup (st, name, None) of
      Fun (args, External) -> eval (c, Builtin (name, exprs))
    | Fun (args, body) ->
        case foldl(
          fun (st, [n, v]) {
            st <- [n, Val (v)]
          },
          addNames (enterFunction(st), args),
          zip (args, evalList(c, exprs)[1])
        ) of
          st -> 
          case eval ([st, w], body) of
            [[st, w], v] -> [[leaveFunction (oldSt, getGlobal (st)), w], v]
          esac 
        esac
    esac
  | Set (x, e) -> 
    case eval (c, e) of
      [[st, w], v] -> [[st <- [x, Val (v)], w], v]
    esac
  | String (string) -> [c, string]
  | Array (es) ->
    case evalList (c, es) of
      [c, vs] -> [c, listArray (vs)]
    esac
  | Elem (e, i) ->
    case evalList (c, {e, i}) of
      [c, {v, i}] -> 
        [c, 
          (case arrayAndSexp(v) of
            v -> v
          esac)[i]
        ]
    esac
  | ElemRef (e, i) ->
    case evalList (c, {e, i}) of
      [c, {v, i}] -> 
        [c, ElemRef (
          case arrayAndSexp(v) of
            v -> v
          esac, i)
        ]
    esac
  | Builtin (name, args) -> 
    case evalList(c, args) of
      [[st, w], vs] -> 
      case evalBuiltin (name, vs, w) of
        [v, w] -> [[st, w], v]
      esac
    esac
  | Sexp(x, es) ->
    case evalList (c, es) of
      [c, vs] -> [c, Sexp (x, listArray (vs))]
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
