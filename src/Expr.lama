-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some (f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal(state, name) {
  case state.lookup(name) of
    x@Val (_) -> x
    | _       -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun(state, name) {
  case state.lookup(name) of
    x@Fun (_, _) -> x
    | _          -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames(state, names) {
  foldl(fun (s, name) { s.addName(name, Val(0)) }, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction(state, name, args, body) {
  state.addName(name, Fun(args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(fun ([c, vals], e) {
    case eval(c, e) of
      [c, v] -> [c, v:vals]
    esac
  },
    [c, { }],
    exprs) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

fun addDefinitions(state, defs) {
  case defs of
    d : defsTail ->
      case d of
        Fun (name, args, body) -> addDefinitions(addFunction(state, name, args, body), defsTail)
        | Var (ns)             -> addDefinitions(addNames(state, ns), defsTail)
      esac
    | _          -> state
  esac
}

fun eval(c@[s, w], expr) {
  case expr of
    Read(x)                -> case readWorld(w) of [v, ww] -> [[s <- [x, v], ww], None] esac
    | Const (z)            -> [c, z]
    | Var (x)              -> [c, s.lookup(x)]
    | Write(x)             -> case eval(c, x) of [c1@[s1, w1], v1] -> [[s1, writeWorld(v1, w1)], None] esac
    | Binop (op, x1, x2)   -> case evalList(c, { x1, x2 }) of [cc, { xx, yy }] -> [cc, evalOp(op, xx, yy)] esac
    | Ref (x)              -> [c, Ref(x)]
    | Assn(to, v)          -> case evalList(c, { to, v }) of
      [cc@[s1, w1], { ElemRef(x, i), y }] -> [cc, x[i] := y]
      | [cc@[s1, w1], { Ref(x), y }]      -> [[s1 <- [x, y], w1], y]
    esac
    | Array   (es)         -> fun ([c, r]) { [c, listArray(r)] }(evalList(c, es))
    | String  (s)          -> [c, s]
    | Elem    (a, i)       ->
      fun ([c, a : i : { }]) {
        case a of
          Sexp (_, a) -> [c, a[i]]
          | _         -> [c, a[i]]
        esac
      }(evalList(c, { a, i }))
    | ElemRef (a, i)       ->
      fun ([c, a : i : { }]) {
        case a of
          Sexp (_, a) -> [c, ElemRef(a, i)]
          | _         -> [c, ElemRef(a, i)]
        esac
      }(evalList(c, { a, i }))
    | Sexp (name, es)      -> fun ([c, r]) { [c, Sexp(name, listArray(r))] }(evalList(c, es))
    | Set (s, e)           -> eval(c, Assn(Ref(s), e))
    | Ignore(e)            -> [fst(eval(c, e)), None]
    | Skip                 -> [c, None]
    | If (cnd, s1, s2)     -> case eval(c, cnd) of [c1, 0] -> eval(c1, s2) | [c1, _] -> eval(c1, s1) esac
    | Seq(x, y)            -> case evalList(c, { x, y }) of [c1, { x1, y1 }] -> [c1, y1] esac
    | While (cnd, s1)      -> case eval(c, cnd) of [cc, 0] -> [cc, None] | [c1, _] -> eval(eval(c1, s1).fst, expr) esac
    | DoWhile(s1, cnd)     -> case eval(c, s1) of
      [c1, _] -> case eval(c1, cnd) of
        [c2, 0]   -> [c2, None]
        | [c2, _] -> [eval(c2, expr).fst, None]
      esac
    esac
    | Scope (defs, e)      ->
      var scopeWithDefs = addDefinitions(enterScope(s), defs);
      case eval([scopeWithDefs, w], e) of [c@[s, w], v] -> [[leaveScope(s), w], v] esac
    | Call    (name, args) -> case s.lookup(name) of Fun(fargs, fbody) ->
      case evalList(c, args) of [cc@[ss, ww], vals] ->
        case fbody of
          External -> fun ([ret, ww2]) { [[ss, ww2], ret] }(evalBuiltin(name, vals, ww))
          | _      -> case addNames(enterFunction(ss), fargs) of ss2 ->
            case eval([foldl(fun (s, [n, v]){ s <- [n, v] }, ss2, zip(fargs, vals)), ww], fbody) of [cc3@[ss3, ww3], vv3] ->
              [[leaveFunction(ss, ss3.getGlobal), ww3], vv3]
            esac
          esac
        esac
      esac
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([emptyState().enterScope.addName("read", Fun({ }, External))
    .addName("write", Fun({ "a" }, External))
    .addName("length", Fun({ "a" }, External)), createWorld(input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
