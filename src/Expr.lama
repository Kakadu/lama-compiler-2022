-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun unwrapVal (Val (x))
  {x}

fun listsEq (l1, l2) {
  fun eq (l) {
    case l of
      {} -> true
    | [a, b] : l ->
        if matches (a, b)
        then eq (l)
        else false
        fi
    esac
  }

  if size (l1) != size (l2)
  then false
  else eq (zip (l1, l2))
  fi
}

fun matches (scr, p) {
  case p of
    Wildcard -> true
  | Named (_, p) -> matches (scr, p)
  | Const (n) -> case scr of n -> true | _ -> false esac
  | Array (arr) ->
      case scr of
        scr@#array -> listsEq (arrayList (scr), arr)
      | _ -> false
      esac
  | Sexp (name, args) ->
      case scr of
        Sexp (scrName, scrArgs) ->
          if compare (name, scrName) != 0
          then false
          else listsEq (arrayList (scrArgs), args)
          fi
      | _ -> false
      esac
  esac
}

fun matchingBranch (scr, brs) {
  case brs of
    {} -> error ("Match failure, scr = %s\n", scr.string)
  | [p, br] : brs ->
      if (matches (scr, p))
      then br
      else matchingBranch (scr, brs)
      fi
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn (e1, e2) ->
      case evalList (c, {e1, e2}) of
        [[st, w], {Ref (key), Val (v)}] -> [[st <- [key, Var (v)], w], Val (v)]
      | [c, {ARef (arr, idx), Val (v)}] -> arr[idx] := v; [c, Val (v)]
      esac
  | Seq (e1, e2) ->
      case evalList (c, {e1, e2}) of [c, {_, x}] ->
        [c, x]
      esac
  | Skip ->
      [c, Void]
  | If (e, s1, s2) ->
      case eval (c, e) of [c, Val (v)] ->
        eval (c, if v then s1 else s2 fi)
      esac
  | While (e, s) ->
      case eval (c, e) of [c, Val (v)] ->
        if v
        then case eval (c, s) of [c, _] -> eval (c, While (e, s)) esac
        else [c, Void]
        fi
      esac
  | DoWhile (s, e) ->
      case eval (c, s) of [c, _] ->
        eval (c, While (e, s))
      esac
  | Var (x) ->
      case lookup (st, x) of Var (v) ->
        [c, Val (v)]
      esac
  | Ref (x) ->
      [c, Ref (x)]
  | Const (n) ->
      [c, Val (n)]
  | Binop (op, e1, e2) ->
      case evalList (c, {e1, e2}) of [c, {Val (v1), Val (v2)}] ->
        [c, Val (evalOp (op, v1, v2))]
      esac
  | Ignore (e) ->
      case eval (c, e) of [c, _] ->
        [c, Void]
      esac
  | Scope (ds, e) ->
      var newState = foldl (fun (st, d) {
                              case d of
                                Var (names) -> addNames (st, names)
                              | Val (names) -> addNames (st, names)
                              | Fun (name, args, body) -> addFunction (st, name, args, body)
                              esac
                            },
                            enterScope (st),
                            ds);

      case eval ([newState, w], e) of [[st, w], ret] ->
        [[leaveScope (st), w], ret]
      esac
  | Call (f, exprs) ->
      case lookup (st, f) of
        Fun (_, External) -> eval (c, Builtin (f, exprs))
      | Fun (argNames, body) ->
          case evalList (c, exprs) of [c, argVals] ->
            var newState = foldl (fun (st, [argName, argVal]) {
                                    case argVal of Val (v) ->
                                      addName (st, argName, Var (v))
                                    esac
                                  },
                                  enterFunction (st),
                                  zip (argNames, argVals));

            case eval ([newState, w], body) of [[newState, w], ret] ->
              [[leaveFunction (st, getGlobal (newState)), w], ret]
            esac
          esac
      esac
    | Builtin (name, exprs) ->
        case evalList(c, exprs) of [[st, w], vals] ->
          var args = map (unwrapVal, vals);
          case evalBuiltin (name, args, w) of [v, w] ->
            [[st, w], Val (v)]
          esac
        esac
    | Set (s, e) ->
        eval (c, Assn (Ref (s), e))
    | String (s) ->
        [c, Val (s)]
    | Array (exprs) ->
        case evalList (c, exprs) of [c, vals] ->
          var arr = listArray(map (unwrapVal, vals));
          [c, Val (arr)]
        esac
    | Sexp (name, exprs) ->
        case eval (c, Array (exprs)) of [c, Val (arr)] ->
          [c, Val (Sexp (name, arr))]
        esac
    | Elem (e, idx) ->
        case evalList (c, {e, idx}) of
          [c, {Val (Sexp (_, arr)), Val (idx)}] -> [c, Val (arr[idx])]
        | [c, {Val (arr), Val (idx)}] -> [c, Val (arr[idx])]
        esac
    | ElemRef (e, idx) ->
        case evalList (c, {e, idx}) of
          [c, {Val (Sexp (_, arr)), Val (idx)}] -> [c, ARef (arr, idx)]
        | [c, {Val (arr), Val (idx)}] -> [c, ARef (arr, idx)]
        esac
    | Case (scr, brs) ->
        case eval (c, scr) of [c, Val (scr)] ->
          eval (c, matchingBranch (scr, brs))
        esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
