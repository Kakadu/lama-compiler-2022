-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval(c@[s, world], expr) {
  case expr of
    Assn (l, r)        -> case evalList(c, { l, r }) of
      [[s, w], { LValue (x), z }] -> [[s <- [x, Var(z)], w], z]
    esac
    | Seq (e1, e2)     -> case evalList(c, { e1, e2 }) of
      [c, { 0, z }] -> [c, z]
    esac
    | Skip             -> [c, 0]
    | Read (x)         -> checkVar(s, x); case readWorld(world) of
      [z, w] -> [[s <- [x, Var(z)], w], 0]
    esac
    | Write (e)        -> case
      eval(c, e) of [[s, w], z] -> [[s, writeWorld(z, w)], 0]
    esac
    | If (e1, e2, e3)  -> case eval(c, e1) of
      [c, 0]   -> eval(c, e3)
      | [c, _] -> eval(c, e2)
    esac
    | While (e1, e2)   -> case eval(c, e1) of
      [c, 0]   -> [c, 0]
      | [c, _] -> case eval(c, e2) of
        [c, 0] -> eval(c, expr)
      esac
    esac
    | DoWhile (e1, e2) -> case eval(c, e1) of
      [c, 0] -> case eval(c, e2) of
        [c, 0]   -> [c, 0]
        | [c, _] -> eval(c, expr)
      esac
    esac
    | Var (x)          -> checkVar(s, x); [c, case lookup(s, x) of Var (z) -> z esac]
    | Ref (x)          -> checkVar(s, x); [c, LValue(x)]
    | Const (n)        -> [c, n]
    | Binop (op, l, r) -> case evalList(c, { l, r }) of
      [c, { l, r }] -> [c, evalOp(op, l, r)]
    esac
    | Ignore (e)       -> case eval(c, e) of
      [c, _] -> [c, 0]
    esac
    | Call (f, as)     ->
      checkFun(s, f);
      case lookup(s, f) of
        Fun(ns, b) ->
          if size(ns) != size(as) then
            error(sprintf("unexpected number of arguments for function %s", f), getLoc(f))
          fi;
          case evalList(c, as) of
            [[s, w], vs] ->
              case eval([
                foldl(fun (s, [n, v]) { addName(s, n, Var(v)) }, enterFunction(s), zip(ns, vs)),
                w
              ], b) of
                [[s_modified, w], v] -> [[s.leaveFunction(getGlobal(s_modified)), w], v]
              esac
          esac
      esac
    | Scope (ds, e)    ->
      case eval([
        foldl(fun (s, d) { case d of
          Var (ns) -> addNames(s, ns)
          | Fun (n, as, b) -> addFunction(s, n, as, b)
        esac }, enterScope(s), ds),
        world
      ], e) of
        [[s, w], v] -> [[leaveScope(s), w], v]
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}