-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value

public fun evalBinop(op, expr1, expr2) {
  case op of 
    "+"    -> expr1 + expr2
    | "-"  -> expr1 - expr2
    | "*"  -> expr1 * expr2
    | "/"  -> expr1 / expr2
    | "%"  -> expr1 % expr2
    | "<"  -> expr1 < expr2
    | ">"  -> expr1 > expr2
    | "<=" -> expr1 <= expr2
    | ">=" -> expr1 >= expr2
    | "==" -> expr1 == expr2
    | "!=" -> expr1 != expr2
    | _    -> failure("Unsupported operation!")
  esac
}


-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (state, expr) {
  case expr of 
    Var(x)                    -> state(x)
    | Const(x)                -> x
    | Binop(op, expr1, expr2) -> evalBinop(op, evalExpr(state, expr1), evalExpr(state, expr2))
  esac
}
