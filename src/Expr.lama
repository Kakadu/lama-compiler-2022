-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
--  failure ("evalExpr not implemented\n")

  case expr of
    Var (v)           -> st(v)
  | Const (c)         -> c
  | Binop (b, e1, e2) ->
      case b of
        "+"  -> evalExpr(st, e1) +  evalExpr(st, e2)
      | "-"  -> evalExpr(st, e1) -  evalExpr(st, e2)
      | "*"  -> evalExpr(st, e1) *  evalExpr(st, e2)
      | "/"  -> evalExpr(st, e1) /  evalExpr(st, e2)
      | "%"  -> evalExpr(st, e1) %  evalExpr(st, e2)
      | "<"  -> evalExpr(st, e1) <  evalExpr(st, e2)
      | ">"  -> evalExpr(st, e1) >  evalExpr(st, e2)
      | "<=" -> evalExpr(st, e1) <= evalExpr(st, e2)
      | ">=" -> evalExpr(st, e1) >= evalExpr(st, e2)
      | "==" -> evalExpr(st, e1) == evalExpr(st, e2)
      | "!=" -> evalExpr(st, e1) != evalExpr(st, e2)
      | "&&" -> evalExpr(st, e1) && evalExpr(st, e2)
      | "!!" -> evalExpr(st, e1) !! evalExpr(st, e2)
      esac
  esac
}
