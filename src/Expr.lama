-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

public fun evalBinop (op,c1,c2){
  case op of 
      "+" -> c1 + c2
    | "-" -> c1 - c2
    | "*" -> c1 * c2
    | "/" -> c1 / c2
    | "%" -> c1 % c2
    | "==" -> c1 == c2
    | "!=" -> c1 != c2
    | "<" -> c1 < c2
    | "<=" -> c1 <= c2
    | ">" -> c1 > c2
    | ">=" -> c1 >= c2
    | "&&" -> c1 && c2
    | "!!" -> c1 !! c2
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
      Assn (e1, e2) -> case evalList (c, {e1, e2}) of
                          [[s, w], {Ref (x), v}] -> [[s <- [x, v], w], v]
                       esac
    | Seq (s1, s2) -> eval (eval (c, s1).fst, s2)
    | Skip -> [c, Void]
    | Read (x) ->
             case readWorld (w) of 
              [v, nwrld] -> [[s <- [x, v], nwrld], Void] 
             esac
    | Write (e) -> case eval (c, e) of
                        [[s, w], v] -> [[s, writeWorld (v, w)], Void]
                   esac
    | While (e, body) -> case eval (c, e) of
                        [c, cond] -> if cond then 
                                                case eval (c, body) of 
                                                  [c, Void] -> eval (c, While (e, body)) 
                                                esac 
                                              else [c, Void] 
                                     fi
                     esac
    | DoWhile (body, e) -> case eval (c, body) of
                            [c, Void] -> eval (c, While (e, body))
                          esac
    | If (e, s1, s2) -> case eval (c, e) of
                          [c, cond] -> eval (c, if cond then s1 else s2 fi)
                        esac
    | Binop (op, e1, e2) -> case evalList (c, {e1, e2}) of
                              [c, {l, r}] -> [c, evalOp (op, l, r)]
                            esac
    | Var (x) -> [c, s (x)]
    | Ref (x) -> [c, Ref (x)]
    | Const (n) -> [c, n]
    | Ignore (e) -> case eval (c, e) of
                      [c, _] -> [c, Void]
                    esac
    | _ -> failure ("this eval: {%s} is not yet implemented\n", expr.string)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
