-- Expression evaluator

import List;
import State;

-- The evaluator of binary operations: takes a binary operation as string,
-- returns binary operation

public fun evalBinop (binop) {
  case binop of
    "+"  -> infix +
  | "-"  -> infix -
  | "*"  -> infix *
  | "/"  -> infix /
  | "%"  -> infix %
  | "<"  -> infix <
  | ">"  -> infix >
  | "<=" -> infix <=
  | ">=" -> infix >=
  | "==" -> infix ==
  | "!=" -> infix !=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Const (n)                 -> n
  | Var (x)                   -> st (x)
  | Binop (binop, lexp, rexp) -> evalBinop (binop) (evalExpr (st, lexp), evalExpr (st, rexp))
  esac
}
