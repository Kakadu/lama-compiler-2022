-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Const (const) -> [c, const]
  | Var (v) -> [c, st(v)]
  | Ref (x) -> [c, Ref (x)]
  | Ignore (e) -> 
    case eval (c, e) of
      [c, _] -> [c, None] 
    esac
  | Binop (op, l, r) -> 
    case evalList (c, {l, r}) of
      [c, {v1, v2}] -> [c, evalOp (op, v1, v2)]
    esac
  | Skip -> [c, None]
  | Assn (l, r) -> 
    case evalList (c, {l, r}) of 
      [[st, w], {Ref (x), v}] -> [[st <- [x, v], w], v]
    esac
  | Read (s) -> 
    case readWorld (w) of 
      [n, nw] -> [[st <- [s, n], nw], None]
    esac
  | Write (e) -> 
    case eval (c, e) of 
      [[st, w], v] -> [[st, writeWorld (v, w)], None]
    esac 
  | Seq (s1, s2) -> 
    case evalList (c, {s1, s2}) of
      [c, {_, v}] -> [c, v]
    esac
  | While (cond, body) -> 
    case eval (c, cond) of
      [c, 0] -> [c, None]
    | [c, _] -> 
      case eval (c, body) of
        [c, _] -> eval (c, expr)
      esac
    esac
  | DoWhile (body, cond) ->
    case eval (c, body) of
      [c, _] -> eval (c, While (cond, body))
    esac
  | If (cond, thenBody, elseBody) ->
    case eval (c, cond) of
      [c, 0] -> eval (c, elseBody)
    | [c, _] -> eval (c, thenBody)
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
