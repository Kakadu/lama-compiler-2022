-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun extractVals(vs) {
  case vs of
    {} -> {}
  | Val(v) : vs -> v : extractVals(vs)
  esac
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (ElemRef(e, i), r) ->
      case evalList(c, {e, i, r}) of [c, {Val(e), Val(i), Val(r)}] ->
        e[i] := r; [c, Val(r)]
      esac
  | Assn (l, r) ->
      case eval (c, l) of [c, Ref(variable)] ->
        case eval (c, r) of [[s, w], Val(value)] ->
          [[s <- [variable, Var(value)], w], Val(value)]
        esac
      esac
  | Seq (l, r) ->
      case eval (c, l) of [c, _] ->
        case eval (c, r) of [c, retval] ->
          [c, retval]
        esac
      esac
  | Skip -> [c, Void]
  | Read (x) -> case readWorld(w) of [v, w] -> [[s <- [x, Var(v)], w], Void] esac
  | Write (e) -> case eval (c, e) of [c@[s, w], Val(value)] -> [[s, writeWorld(value, w)], Void] esac
  | If (cond, t, f) ->
      case eval (c, cond) of [c, Val(value)] ->
        if value then
          eval (c, t)
        else
          eval (c, f)
        fi
      esac
  | While (cond, body) ->
      while case eval (c, cond) of [conf@[s, w], Val(value)] -> c := conf; value esac do
        case eval (c, body) of [conf, _] -> c := conf esac
      od; [c, Void]
  | DoWhile (body, cond) ->
      case eval (c, body) of [conf, _] -> c := conf esac;
      while case eval (c, cond) of [conf@[s, w], Val(value)] -> c := conf; value esac do
        case eval (c, body) of [conf, _] -> c := conf esac
      od; [c, Void]
  | Var (x) -> [c, Val(case lookup(s, x) of Var(v) -> v esac)]
  | Ref (x) -> [c, Ref(x)]
  | Const (n) -> [c, Val(n)]
  | Binop (op, l, r) ->
      case eval (c, l) of [c, Val(lv)] ->
        case eval (c, r) of [c, Val(rv)] ->
          [c, Val(evalOp(op, lv, rv))]
        esac
      esac
  | Ignore (e) -> case eval (c, e) of [c, _] -> [c, Void] esac
  | Scope (defs, e) ->
      fun addFunDefs(s, fdefs) {
        fun addFunDef(s, Fun(f, args, body)) {
          addFunction(s, f, args, body)
        }

        foldl(addFunDef, s, fdefs)
      }

      case defs of Var(vdefs) : fdefs ->
        case eval([addFunDefs(addNames(enterScope(s), vdefs), fdefs), w], e) of [[s, w], v] ->
          [[leaveScope(s), w], v]
        esac
      esac
  | Call (f, args) ->
      fun setArg(s, [name, Val(v)]) {
        addName(s, name, Var(v))
      }


      case evalList(c, args) of [[s, w], args] ->
          case lookup(s, f) of
            Fun(_, External) ->
              case evalBuiltin(f, extractVals(args), w) of [v, w] ->
                [[s, w], Val(v)]
              esac
          | Fun(argNames, body) ->
              case eval([foldl(setArg, enterScope(enterFunction(s)), zip(argNames, args)), w], body) of
                [[fs, w], Val(retval)] -> [[leaveFunction(s, getGlobal(fs)), w], Val(retval)]
              esac
          esac
      esac
  | Array (x) ->
      case evalList(c, x) of [c, vals] -> [c, Val(listArray(extractVals(vals)))] esac

  | String (s) -> [c, Val(s)]
  | Elem (e, i) ->
      case evalList(c, {e, i}) of [c, {Val(e), Val(i)}]-> [c, Val(e[i])] esac
  | Sexp (_, args) -> eval(c, Array(args))
  | Set (x, e) -> case eval(c, e) of [[s, w], Val(v)] -> [[s <- [x, Var(v)], w], Val(v)] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
