-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinop (op, ex1, ex2) {
  case op of
    "+" -> ex1 + ex2
  | "-" -> ex1 - ex2
  | "*" -> ex1 * ex2
  | "/" -> ex1 / ex2
  | "%" -> ex1 % ex2
  | "<"  -> ex1 < ex2
  | ">"  -> ex1 > ex2
  | "<=" -> ex1 <= ex2
  | ">=" -> ex1 >= ex2
  | "==" -> ex1 == ex2
  | "!=" -> ex1 != ex2
  | "&&" -> ex1 && ex2
  | "!!" -> ex1 !! ex2
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Const (c) -> c
  | Var (value) -> st(value)
  | Binop (op, ex1, ex2) -> (
      var res1, res2;
      res1 := evalExpr(st, ex1);
      res2 := evalExpr(st, ex2);
      evalBinop(op, res1, res2)
    )
  esac
}
