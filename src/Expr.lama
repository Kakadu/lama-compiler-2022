-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinop(binop, lop, rop) {
  case binop of
    "+" -> lop + rop
  | "-" -> lop - rop
  | "*" -> lop * rop
  | "/" -> lop / rop
  | "%" -> lop % rop
  | "<" -> lop < rop
  | ">" -> lop > rop
  | "<=" -> lop <= rop
  | ">=" -> lop >= rop
  | "==" -> lop == rop
  | "!=" -> lop != rop
  | "&&" -> lop && rop
  | "!!" -> lop !! rop
  esac
}
public fun evalExpr (st, expr) {
  case expr of
   Var (v) -> st(v)
  | Const (num) -> num
  | Binop (binop, exp1, exp2) -> evalBinop(binop, evalExpr(st, exp1), evalExpr(st, exp2))
  esac
}