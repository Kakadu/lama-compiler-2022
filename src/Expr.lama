-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDef(state, def) {
  case def of
    Var (ns) -> state.addNames(ns)
  | Fun (n, a, b) -> state.addFunction(n, a, b)
  esac
}

fun addDefs(state, defs) {
  foldl (addDef, state, defs)
}

fun addArgs(state, names, values) {
  foldl (fun(s, [n, v]) {
    case v of
      L (v) -> s.addName(n, v)
    esac
  }, state, zip(names, values))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (a, b) ->
      case eval (c, a) of [c, R (x)] ->
        case eval (c, b) of [c@[s, w], v@L (vi)] ->
          [[s <- [x, vi], w], v]
        esac
      esac
  | Seq (a, b) ->
      case eval (c, a) of [c, _] ->
        eval (c, b)
      esac
  | Skip -> [c, E]
  | Read (x) ->
      case readWorld (w) of [v, w] ->
        [[s <- [x, v], w], E]
      esac
  | Write (a) ->
      case eval (c, a) of [c, L (v)] ->
        case writeWorld (v, w) of w ->
          [[s, w], E]
        esac
      esac
  | If (cond, a, b) ->
      case eval (c, cond) of [c, L (v)] ->
        eval (c, if v then a else b fi)
      esac
  | While (cond, a) ->
      case eval (c, cond) of [c, L (v)] ->
        eval(c, if v then Seq (a, expr) else Skip fi)
      esac
  | DoWhile (x, cond) -> eval (c, Seq (x, While (cond, x)))
  | Var (x) -> [c, L (s.lookup(x))]
  | Ref (x) -> [c, R (x)]
  | Const (n) -> [c, L (n)]
  | Binop (op, a, b) ->
      case eval (c, a) of [c, L (aval)] ->
        case eval (c, b) of [c, L (bval)] ->
          [c, L (evalOp (op, aval, bval))]
        esac
      esac
  | Ignore (a) ->
      case eval(c, a) of [c, _] ->
        [c, E]
      esac
  | Scope (d, a) ->
      case addDefs(enterScope(s), d) of s ->
        case eval([s, w], a) of [[s, w], v] ->
          [[leaveScope(s), w], v]
        esac
      esac
  | Call (f, as) -> s.lookupFun(f);
      case s.lookup(f) of Fun(xs, b) ->
        case evalList (c, as) of [[sf, w], vs] ->
          case sf.enterFunction of sf ->
            case sf.addArgs(xs, vs) of sf ->
              case eval([sf, w], b) of [[sf, w], v] ->
                [[s.leaveFunction (sf.getGlobal), w], v]
              esac
            esac
          esac
        esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
