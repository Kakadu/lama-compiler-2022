-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (l, r) ->
      case eval (c, l) of [c, Ref(variable)] ->
        case eval (c, r) of [[s, w], Val(value)] ->
          [[s <- [variable, value], w], Val(value)]
        esac
      esac
  | Seq (l, r) ->
      case eval (c, l) of [c, _] ->
        case eval (c, r) of [c, retval] ->
          [c, retval]
        esac
      esac
  | Skip -> [c, Void]
  | Read (x) -> case readWorld(w) of [v, w] -> [[s <- [x, v], w], Void] esac
  | Write (e) -> case eval (c, e) of [c@[s, w], Val(value)] -> [[s, writeWorld(value, w)], Void] esac
  | If (cond, t, f) ->
      case eval (c, cond) of [c, Val(value)] ->
        if value then
          eval (c, t)
        else
          eval (c, f)
        fi
      esac
  | While (cond, body) ->
      while case eval (c, cond) of [conf@[s, w], Val(value)] -> c := conf; value esac do
        case eval (c, body) of [conf, _] -> c := conf esac
      od; [c, Void]
  | DoWhile (body, cond) ->
      case eval (c, body) of [conf, _] -> c := conf esac;
      while case eval (c, cond) of [conf@[s, w], Val(value)] -> c := conf; value esac do
        case eval (c, body) of [conf, _] -> c := conf esac
      od; [c, Void]
  | Var (x) -> [c, Val(s(x))]
  | Ref (x) -> [c, Ref(x)]
  | Const (n) -> [c, Val(n)]
  | Binop (op, l, r) ->
      case eval (c, l) of [c, Val(lv)] ->
        case eval (c, r) of [c, Val(rv)] ->
          [c, Val(evalOp(op, lv, rv))]
        esac
      esac
  | Ignore (e) -> case eval (c, e) of [c, _] -> [c, Void] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
