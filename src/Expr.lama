-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval(c@[s, w], expr) {
  case expr of
      Assn (l, r)            ->
      case eval(c, l) of [c, Ref(x)] ->
          case eval(c, r) of [[s, w], v] ->
              [[s <- [x, v], w], v]
          esac
      esac
    | Seq (l, r)             ->
      case eval(c, l) of [c, _] -> 
        eval(c, r)
      esac
    | Skip                           -> [c, Void]
    | Read (x)                       ->
      case readWorld(w) of [v, w] ->
          [[s <- [x, v], w], Void]
      esac
    | Write (x)                   ->
      case eval(c, x) of [c@[s, w], v] ->
        case writeWorld(v, w) of w1 ->
          [[s, w1], Void]
        esac
      esac
    | If (cond, trueExpr, falseExpr) ->
      case eval(c, cond) of
        [c1, false] -> eval(c1, falseExpr)
        | [c1, _]   -> eval(c1, trueExpr)
      esac
    | While (cond, body)             ->
      evalWhile(c, cond, body)
    | DoWhile (body, cond)           -> (
      case eval(c, body) of
        [c1, Void] -> evalWhile(c1, cond, body)
      esac
    )
    | Var (x)                        -> [c, s.lookup(x)]
    | Ref (x)                        -> [c, Ref(x)]
    | Const (n)                      -> [c, n]
    | Binop (op, a, b)               -> (
      var l = eval(c, a);
      var r = eval(l.fst, b);
      [r.fst, evalOp(op, l.snd, r.snd)]
    )
    | Ignore (e)                     -> [eval(c, e).fst, Void]
    | Scope (defs, expr)             -> (
      fun addDefinition(st, def) {
        case def of
          Fun (name, args, body) -> addFunction(st, name, args, body)
          | Var (names)          -> addNames(st, names)
        esac
      }
      var st1 = foldl(addDefinition, enterScope(s), defs);
      case eval([st1, w], expr) of
        [c@[st, w], res] ->
          [
            [leaveScope(st), w],
            res
          ]
      esac
    )
    | Call (name, exprlist)          ->
      case evalList(c, exprlist) of
        [c@[st, w], argValues] ->
          case st.lookup(name) of
            Fun (argNames, body) -> (
              fun addArgs(state, names, values) {
                case [names, values] of
                  [name : names, v : values] -> addArgs(addName(state, name, v), names, values)
                  | _                        -> state
                esac
              }
              var newSt = addArgs(enterFunction(st), argNames, argValues);
              case eval([newSt, w], body) of
                [[newerSt, w], res] -> [[leaveFunction(st, getGlobal(newerSt)), w], res]
              esac
            )
          esac
      esac
  esac
}

fun evalWhile(c, cond, body) {
  case eval(c, cond) of
    [c1, false] -> [c, Void]
    | [c1, _]   ->
      case eval(c1, body) of
        [c2, Void] -> evalWhile(c2, cond, body)
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output

public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}