-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr(st, expr) {
  case expr of
      Var (x)                     -> st(x)
    | Const (n)                   -> n
    | Binop(op, exprLhs, exprRhs) -> matchBinop(op, evalExpr(st, exprLhs), evalExpr(st, exprRhs))

  esac
}

public fun matchBinop(op, exprLhs, exprRhs) {
  case op of
      "+"  -> exprLhs + exprRhs
    | "-"  -> exprLhs - exprRhs
    | "*"  -> exprLhs * exprRhs
    | "/"  -> exprLhs / exprRhs
    | "%"  -> exprLhs % exprRhs
    | "<"  -> exprLhs < exprRhs
    | "<=" -> exprLhs <= exprRhs
    | ">"  -> exprLhs > exprRhs
    | ">=" -> exprLhs >= exprRhs
    | "==" -> exprLhs == exprRhs
    | "!=" -> exprLhs != exprRhs
  esac
}
