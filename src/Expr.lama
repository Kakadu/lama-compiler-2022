-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

fun evalBinop(op, x, y) {
  case op of
      "+"   -> x + y
    | "-"   -> x - y
    | "*"   -> x * y
    | "/"   -> x / y
    | "%"   -> x % y
    | "<"   -> x < y
    | "<="  -> x <= y
    | ">"   -> x > y
    | ">="  -> x >= y
    | "=="  -> x == y
    | "!="  -> x != y
    | _     -> failure ("Unexpected binary operator <%s>\n", op.string)
  esac
}

public fun evalExpr (st, expr) {
  case expr of
      Var (x) -> st(x)
    | Const (x) -> x
    | Binop (op, e1, e2) -> evalBinop(op, evalExpr(st, e1), evalExpr(st, e2))
    | _ -> failure ("Unexpected expression <%s>\n", expr.string)
  esac
}