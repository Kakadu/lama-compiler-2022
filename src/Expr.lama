-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalWhile(c, cond, body) {
  case eval(c, cond) of [c, Var(v)] ->
    if v then
      case eval(c, body) of [c, _] -> evalWhile(c, cond, body) esac
    else
      c
    fi
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (e1, e2) ->
      case evalList(c, {e1, e2}) of [[s, w], {Ref(x), Var(v)}] -> [[s <- [x, Var(v)], w], Var(v)] esac
  | Seq (e1, e2) ->
      case evalList(c, {e1, e2}) of [c, {_, v}] -> [c, v] esac
  | Skip -> [c, Void]
  | Read (x) -> case w.readWorld of [v, w] -> [[s <- [x, Var(v)], w], Void] esac
  | Write (e) -> case eval(c, e) of [[s, w], Var(v)] -> [[s, writeWorld(v, w)], Void] esac
  | If (e1, e2, e3) ->
      case eval(c, e1) of [c, Var(cond)] -> if cond then eval(c, e2) else eval(c, e3) fi esac
  | While (cond, body) -> [evalWhile(c, cond, body), Void]
  | DoWhile (body, cond) -> case eval(c, body) of [c, _] -> [evalWhile(c, cond, body), Void] esac
  | Var (x) -> [c, case lookup(s, x) of Var(v) -> Var(v) esac]
  | Ref (x) -> [c, Ref(x)]
  | Const (n) -> [c, Var(n)]
  | Binop (op, l, r) ->
      case evalList(c, {l, r}) of [c, {Var(l), Var(r)}] -> [c, Var(evalOp(op, l, r))] esac
  | Ignore (e) -> case eval(c, e) of [c, _] -> [c, Void] esac
  | Scope (ds, e) ->
      fun addDefs(s, ds) {
        foldl(
          fun(s, d) {
            case d of
              Var (ds) -> addNames(s, ds)
            | Fun (name, args, body) -> addFunction(s, name, args, body)
            esac
          }, s, ds)
      }

      case eval([addDefs(enterScope(s), ds), w], e) of [[s, w], v] -> [[leaveScope(s), w], v] esac

  | Call (fname, args) ->
      case evalList(c, args) of [[s, w], args] ->
        case lookup(s, fname) of Fun (argNames, body) ->
          fun copyArg(s, [argName, arg]) {
            addName(s, argName, arg)
          }

          case eval([foldl(copyArg, enterScope(enterFunction(s)), zip(argNames, args)), w], body) of
            [[sFun, w], Var(v)] -> [[leaveFunction(s, getGlobal(sFun)), w], Var(v)]
          esac
        esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
