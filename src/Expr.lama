-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
case expr of
  Var (v) -> st (v)
  | Const (c) -> c
  | Binop (operator, e1, e2) -> evalBinop(operator, evalExpr(st, e1), evalExpr(st, e2))
esac
}

public fun evalBinop (op,c1,c2){
  case op of 
      "+" -> c1 + c2
    | "-" -> c1 - c2
    | "*" -> c1 * c2
    | "/" -> c1 / c2
    | "%" -> c1 % c2
    | "==" -> c1 == c2
    | "!=" -> c1 != c2
    | "<" -> c1 < c2
    | "<=" -> c1 <= c2
    | ">" -> c1 > c2
    | ">=" -> c1 >= c2
    | "&&" -> c1 && c2
    | "!!" -> c1 !! c2
  esac
}
