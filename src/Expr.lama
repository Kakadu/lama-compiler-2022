-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[st, w], expr) {
  case expr of
    Assn (e1, e2) ->
      case evalList (c, {e1, e2}) of [[st, w], {Ref (key), Val (v)}] ->
        checkVar (st, key);
        [[st <- [key, Var (v)], w], Val (v)]
      esac
  | Seq (e1, e2) ->
      case evalList (c, {e1, e2}) of [c, {_, x}] ->
        [c, x]
      esac
  | Skip ->
      [c, Void]
  | Read (key) ->
      checkVar (st, key);
      case readWorld (w) of [v, w] ->
        [[st <- [key, Var (v)], w], Void]
      esac
  | Write (e) ->
      case eval (c, e) of [c, Val (v)] ->
        [[st, writeWorld (v, w)], Void]
      esac
  | If (e, s1, s2) ->
      case eval (c, e) of [c, Val (v)] ->
        eval (c, if v then s1 else s2 fi)
      esac
  | While (e, s) ->
      case eval (c, e) of [c, Val (v)] ->
        if v
        then case eval (c, s) of [c, _] -> eval (c, While (e, s)) esac
        else [c, Void]
        fi
      esac
  | DoWhile (s, e) ->
      case eval (c, s) of [c, _] ->
        eval (c, While (e, s))
      esac
  | Var (x) ->
      case lookup (st, x) of Var (v) ->
        [c, Val (v)]
      esac
  | Ref (x) ->
      [c, Ref (x)]
  | Const (n) ->
      [c, Val (n)]
  | Binop (op, e1, e2) ->
      case evalList (c, {e1, e2}) of [c, {Val (v1), Val (v2)}] ->
        [c, Val (evalOp (op, v1, v2))]
      esac
  | Ignore (e) ->
      case eval (c, e) of [c, _] ->
        [c, Void]
      esac
  | Scope (ds, e) ->
      var newState = foldl (
        fun (st, d) {
          case d of
            Var (names) -> addNames (st, names)
          | Fun (name, args, body) -> addFunction (st, name, args, body)
          esac
        },
        enterScope (st),
        ds
      );
      case eval ([newState, w], e) of [[st, w], ret] ->
        [[leaveScope (st), w], ret]
      esac
  | Call (f, exprs) ->
      checkFun (st, f);
      case lookup (st, f) of Fun (argNames, body) ->
        case evalList (c, exprs) of [c, argVals] ->
          var newState = foldl (
            fun (st, [argName, argVal]) {
              case argVal of Val (v) ->
                addName (st, argName, Var (v))
              esac
            },
            enterFunction (st),
            zip (argNames, argVals)
          );
          case eval ([newState, w], body) of [[newState, w], ret] ->
            [[leaveFunction (st, getGlobal (newState)), w], ret]
          esac
        esac
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}