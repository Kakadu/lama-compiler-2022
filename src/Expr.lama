-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn    (x, e)                ->  case evalList (c, {x, e}) of 
                                        [[st, w], { Ref (x), v }] -> [[st <- [x, Var (v)], w], v] 
                                      esac
  | Seq     (stmt1, stmt2)        ->  eval (eval (c, stmt1).fst, stmt2)
  | Skip                          ->  [c, 0]
  | Read    (x)                   ->  checkVar (st, x);
                                      case readWorld (w) of 
                                        [x1, w] -> [[st <- [x, Var (x1)], w], 0]
                                      esac
  | Write   (e)                   ->  case eval (c, e) of
                                        [[st, w], v] -> [[st, writeWorld (v, w)], 0]
                                      esac
  | If      (cond, stmt1, stmt2)  ->  case eval (c, cond) of
                                        [c, 0] -> eval (c, stmt2)
                                      | [c, _] -> eval (c, stmt1)
                                      esac
  | While   (cond, body)          ->  case eval (c, cond) of
                                        x@[c, 0] -> x
                                      | [c, _]   -> eval (eval (c, body).fst, expr) 
                                      esac
  | DoWhile (body, cond)          ->  case eval (c, body) of [c, _] ->  case eval (c, cond) of
                                                                          [c, 0] -> [c, 0]
                                                                        | [c, _] -> eval (c, expr)
                                                                        esac
                                      esac
  | Var     (x)                   ->  checkVar (st, x); [c, case lookup (st, x) of Var (x) -> x esac]
  | Ref     (x)                   ->  checkVar (st, x); [c, Ref (x)]
  | Const   (n)                   ->  [c, n]
  | Binop   (op, l, r)            ->  case evalList (c, {l, r}) of [c, {x, y}] -> [c, evalOp (op, x, y)] esac
  | Ignore  (e)                   ->  case eval (c, e) of [c, _] -> [c, 0] esac
  | Scope   (ds, e)               ->  var st1;
                                      s :=  foldl (
                                              fun (st, def) {
                                                case def of 
                                                  Var (ds)               -> addNames (st, ds)
                                                | Fun (name, args, body) -> addFunction (st, name, args, body)
                                                esac
                                              }, 
                                              st.enterScope, 
                                              ds
                                            );
                                      case eval ([st1, w], e) of
                                        [[st, w], vs] -> [[st.leaveScope, w], vs]
                                      esac
  | Call    (f, args)             ->  checkFun (st, f);
                                      case st.lookup (f) of
                                        Fun (fargs, body) ->
                                          if fargs.size != args.size
                                          then error (sprintf ("Mismatch in number of parameters in function ""%s"" call", f), getLoc (f))
                                          fi;
                                          case evalList (c, args) of
                                            [[st, w], vals] ->
                                              var st1;
                                              st1 :=  foldl (fun (st, [name, v]) { st.addName (name, Var (v)) },
                                                             enterFunction (st), zip (fargs, vals));
                                              case eval ([st1, w], body) of
                                                [[st1, w], v] -> [[st.leaveFunction (getGlobal (st1)), w], v]
                                              esac
                                          esac
                                      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}