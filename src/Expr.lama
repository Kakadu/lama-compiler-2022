-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
      Assn (l, r)            ->
      case eval (c, l) of 
        [c, ElemRef (x, i)] -> 
          case eval (c, r) of [_, v] ->
            [c, x[i] := v]
          esac
      | [c, Ref (x)] ->
          case eval (c, r) of [[s, w], v] ->
              [[s <- [x, v], w], v]
          esac
      esac
    | Seq (l, r)             ->
      case eval(c, l) of [c, _] -> 
        eval(c, r)
      esac
    | Skip                           -> [c, None]
    | Read (x)                       ->
      case readWorld(w) of [v, w] ->
          [[s <- [x, v], w], None]
      esac
    | Write (x)                   ->
      case eval(c, x) of [c@[s, w], v] ->
        case writeWorld(v, w) of w1 ->
          [[s, w1], None]
        esac
      esac
    | If (cond, trueExpr, falseExpr) ->
      case eval(c, cond) of
        [c1, false] -> eval(c1, falseExpr)
        | [c1, _]   -> eval(c1, trueExpr)
      esac
    | While (cond, body)             ->
      evalWhile(c, cond, body)
    | DoWhile (body, cond)           -> (
      case eval(c, body) of
        [c1, None] -> evalWhile(c1, cond, body)
      esac
    )
    | Var (x)                        -> [c, s.lookup(x)]
    | Ref (x)                        -> [c, Ref(x)]
    | Const (n)                      -> [c, n]
    | Binop (op, a, b)               -> (
      var l = eval(c, a);
      var r = eval(l.fst, b);
      [r.fst, evalOp(op, l.snd, r.snd)]
    )
    | Ignore (e)                     -> [eval(c, e).fst, None]
    | Scope (defs, expr)             -> (
      fun addDefinition(st, def) {
        case def of
          Fun (name, args, body) -> addFunction(st, name, args, body)
          | Var (names)          -> addNames(st, names)
        esac
      }
      var st1 = foldl(addDefinition, enterScope(s), defs);
      case eval([st1, w], expr) of
        [c@[st, w], res] ->
          [
            [leaveScope(st), w],
            res
          ]
      esac
    )
    | Call    (name, args) -> case s.lookup (name) of Fun (fargs, fbody) ->
        case evalList (c, args) of [cc@[ss, ww], vals] ->
          case fbody of
            External -> fun ([ret, ww2]) { [[ss, ww2], ret] }(evalBuiltin(name, vals, ww))
            | _      -> case addNames(enterFunction(ss), fargs) of ss2 ->
              case eval([foldl(fun (s, [n, v]){ s <- [n, v] }, ss2, zip(fargs, vals)), ww], fbody) of [cc3@[ss3, ww3], vv3] ->
                [[leaveFunction(ss, ss3.getGlobal), ww3], vv3]
              esac
            esac
          esac
        esac
      esac
    | Array   (a) -> fun ([c, r]) { [c, listArray (r)] } (evalList (c, a))
    | String  (s) -> [c, s]
    | Elem    (e, i) ->
        fun ([c, e : i : { }]) {
          case e of 
            Sexp (_, e) -> [c, e[i]]
          | _           -> [c, e[i]]
          esac
        } (evalList (c, {e, i}))
    | ElemRef (e, i)  ->
        fun ([c, e : i : { }]) {
          case e of 
              Sexp (_, e) -> [c, ElemRef (e, i)]
            | _           -> [c, ElemRef (e, i)]
          esac
        } (evalList (c, { e, i }))
    | Sexp (name, es) -> fun ([c, r]) { [c, Sexp (name, listArray (r))] } (evalList (c, es))
    | Set (s, e)      -> eval (c, Assn (Ref (s), e))
  esac
}

fun evalWhile(c, cond, body) {
  case eval(c, cond) of
    [c1, false] -> [c, None]
    | [c1, _]   ->
      case eval(c1, body) of
        [c2, None] -> evalWhile(c2, cond, body)
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
