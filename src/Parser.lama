-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ eta expr (operators, primary) | primary;

var stmt = memo $ eta syntax (x=lident s[":="] e=exp {Assn (x, e)}                          |
                              x=stmt s[";"] y=stmt end {Seq (x, y)}                         |
                              kSkip {Skip}                                                  |
                              kRead x=inbr[s ("("), lident, s (")")] {Read (x)}             |
                              kWrite e=inbr[s ("("), exp, s (")")] {Write (e)});

var operators = {
  [Left, {bin ("!!")}],
  [Left, {bin ("&&")}],
  [Nona, {
    bin ("<"),
    bin (">"),
    bin ("<="),
    bin (">="),
    bin ("=="),
    bin ("!=")
  }],
  [Left, {
    bin ("+"),
    bin ("-")
  }],
  [Left, {
    bin ("*"),
    bin ("/"),
    bin ("%")
  }]
};

fun bin (op) {
  [s (op), fun (l, _, r) { Binop (op, l, r) }]
}
   

-- Public top-level parser
public parse = stmt;
