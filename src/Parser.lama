-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun inCurlBr(expr) {
  syntax (inbr[s("("), expr, s(")")])
}

fun binOps(ops) {
  fun helper(op) { [s(op), fun (l, op, r) { Binop(op, l, r) }] }
  map(helper, ops)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal { Const(stringInt(x)) } | x=lident { Var(x) } | inCurlBr[exp]),
    exp = memo $ eta (expr({
    [Left, binOps $ { "&&", "!!" }],
    [Nona, binOps $ { "<", ">", "<=", ">=", "==", "!=" }],
    [Left, binOps $ { "+", "-" }],
    [Left, binOps $ { "*", "/", "%" }]
  }, primary));

var stmt = memo $ eta syntax (s1=stmt2 s[";"] s2=stmt { Seq(s1, s2) } | stmt2),
    stmt2 = memo $ eta syntax (
    kRead x=inCurlBr[lident] { Read(x) }
    | kWrite e=inCurlBr[exp] { Write(e) }
    | kSkip { Skip }
    | x=lident s[":="] e=exp { Assn(x, e) }
    | kIf e=exp kThen s1=stmt s2=pElse { If(e, s1, s2) }
    | kWhile e=exp kDo s=stmt kOd { While(e, s) }
    | kDo s=stmt kWhile e=exp kOd { DoWhile(s, e) }
    | kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd { Seq(s1, While(e, Seq(s3, s2))) }
  ),
    pElse = memo $ eta syntax (
    kElif e=exp kThen s1=stmt s2=pElse { If(e, s1, s2) }
    | kElse s=stmt kFi { s }
    | kFi { Skip }
  );
   

-- Public top-level parser
public parse = stmt;
