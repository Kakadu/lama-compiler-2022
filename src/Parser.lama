-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun bin (op) {
  [s (op), fun (l, _, r) { Binop (op, l, r) }]
}

var ops = { [Left, {bin ("!!")}],
              [Left, {bin ("&&")}],
              [Nona, { bin ("<"),
                       bin (">"),
                       bin ("<="),
                       bin (">="),
                       bin ("=="),
                       bin ("!=") }],
              [Left, { bin ("+"),
                       bin ("-")}],
              [Left, { bin ("*"),
                       bin ("/"),
                       bin ("%")}]};

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr (ops, primary) | primary);

-- returns sexp If (If...)
var elif_prs = memo $ eta syntax (kElif e=exp kThen x=stmt y=elif_prs {If (e, x, y)} |
                                  kElse z=stmt kFi {z}                               |
                                  kFi {Skip});

var one_stmt_parser = memo $ eta syntax (x=lident s[":="] e=exp {Assn (x, e)}                   |
                                         kSkip {Skip}                                           |
                                         kRead x=inbr[s ("("), lident, s (")")] {Read (x)}      |
                                         kWrite e=inbr[s ("("), exp, s (")")] {Write (e)}       |
                                         kWhile e=exp kDo x=stmt kOd {While (e, x)}             |
                                         kDo x=stmt kWhile e=exp kOd {DoWhile (x, e)}           |
                                         kIf e=exp kThen x=stmt kElse y=stmt kFi {If (e, x, y)} |
                                         kIf e=exp kThen x=stmt kFi {If (e, x, Skip)}           |
                                         kIf e=exp kThen x=stmt y=elif_prs {If (e, x, y)}       |
                                         kFor x=stmt s[","] e=exp s[","] y=stmt kDo loop_stmt=stmt kOd
                                         {Seq (x, While (e, Seq (loop_stmt, y)))});

var stmt = memo $ eta syntax (one_stmt_parser | x=one_stmt_parser s[";"] y=stmt {Seq (x, y)});

-- Public top-level parser
public parse = stmt;
