-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

fun binop(op) {
  [s(op), fun (l, _, r) { Binop(op, l, r) }]
}

fun aplyBinops(assoc, ops) {
  [assoc, map(binop, ops)]
}

var ops = {
  aplyBinops(Left, { "!!" }),
  aplyBinops(Left, { "&&" }),
  aplyBinops(Nona, { "<", ">", "<=", ">=", "==", "!=" }),
  aplyBinops(Left, { "+", "-" }),
  aplyBinops(Left, { "*", "/", "%" })
};

-- Primary expression
var primary = memo $ eta syntax (x=decimal { Const(stringInt(x)) } |
  x=lident { Var(x) }                                              |
  inbr[s("("), exp, s(")")]),
    exp = memo $ eta expr(ops, primary) | primary;

var stmt = memo $ eta syntax (
  v=lident s[":="] ex=exp { Assn(v, ex) }          |
  st1=stmt s[";"] st2=stmt end { Seq(st1, st2) }   |
  kSkip { Skip }                                   |
  kRead v=inbr[s("("), lident, s(")")] { Read(v) } |
  kWrite ex=inbr[s("("), exp, s(")")] { Write(ex) }
);


-- Public top-level parser
public parse = stmt;
             
