-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ eta expr (operators, primary) | primary;

var stmt = memo $ eta syntax (substmt1=substmt {substmt1} |
                              substmt1=substmt s[";"] stmt2=stmt {Seq (substmt1, stmt2)});

var substmt = memo $ eta syntax (x=lident s[":="] e=exp { Assn (x, e) }                         |
                                kSkip { Skip }                                                  |
                                kRead x=inbr[s ("("), lident, s (")")] { Read (x) }             |
                                kWrite e=inbr[s ("("), exp, s (")")] { Write (e) }              |
                                if_stmt=ifStmt { if_stmt }                                      |
                                for_stmt=forStmt { for_stmt }                                   |
                                while_stmt=whileDoStmt { while_stmt }                           |
                                do_while_stmt=doWhileStmt { do_while_stmt });

var whileDoStmt = memo $ eta syntax (kWhile cond_expr=exp kDo body_stmt=stmt kOd {While (cond_expr, body_stmt)});

var doWhileStmt = memo $ eta syntax (kDo body_stmt=stmt kWhile cond=exp kOd {DoWhile (body_stmt, cond)});

var forStmt = memo $ eta syntax (kFor init=stmt s[","] cond=exp s[","] step=stmt kDo body_stmt=stmt kOd {Seq(init, While (cond, Seq (body_stmt, step)))});

var ifStmt = memo $ eta syntax (kIf cond=exp kThen true_stmt=stmt false_stmt=elsePartStmt {If (cond, true_stmt, false_stmt)}),
    elsePartStmt = memo $ eta syntax (kFi {Skip}                           |
                                      kElse else_stmt=stmt kFi {else_stmt} |
                                      kElif cond=exp kThen true_stmt=stmt false_stmt=elsePartStmt {If (cond, true_stmt, false_stmt)});

var operators = {
  [Left, {bin ("!!")}],
  [Left, {bin ("&&")}],
  [Nona, {
    bin ("<"),  
    bin (">"),
    bin ("<="),
    bin (">="),
    bin ("=="),
    bin ("!=")
  }],
  [Left, {
    bin ("+"),
    bin ("-")
  }],
  [Left, {
    bin ("*"),
    bin ("/"),
    bin ("%")
  }]
};

fun bin (op) {
  [s (op), fun (l, _, r) { Binop (op, l, r) }]
}
   

-- Public top-level parser
public parse = stmt;
