-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- generates parser for infix operator and the semantics action
fun genDesc(op) {
  [s (op), fun (l, op, r) {Binop(op, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
  exp = memo $ eta expr (
    { [Left, {genDesc ("!!")}],
      [Left, {genDesc ("&&")}],
      
      [Nona, {genDesc ("=="),
              genDesc ("!="),
              genDesc ("<="),
              genDesc ("<"),
              genDesc (">="),
              genDesc (">")
            }],
      
      [Left, {genDesc ("+"),
              genDesc ("-")
            }],
      
      [Left, {genDesc ("*"),
              genDesc ("/"),
              genDesc ("%")
            }]
    }, primary
  );

var stmt = memo $ eta syntax (
    x=lident s[":="] e=exp {Assn (x, e)}
  | stmt1=stmt s[";"] stmt2=stmt end {Seq (stmt1, stmt2)}
  | kSkip {Skip}
  | kRead x=inbr[s ("("), lident, s (")")] { Read (x)}
  | kWrite e=inbr[s ("("), exp, s (")")] { Write (e)}
);
   

-- Public top-level parser
public parse = stmt;
             
