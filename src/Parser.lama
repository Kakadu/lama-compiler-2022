-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
    -- decimal constant
    loc=pos x=decimal                               { fun (a) { assertValue (a, Const (stringInt (x)), loc) } }
  
    -- identifier
  | x=lident                                        { fun (a) {
                                                        case a of
                                                          Ref  -> Ref (x)
                                                        | Void -> Ignore (Var (x))
                                                        | _    -> Var (x)
                                                        esac
                                                      } 
                                                    }
  | e=inbr[s ("("), exp, s (")")]                   { e }
  | loc=pos kSkip                                   { fun (a) { assertVoid (a, Skip, loc) } } 
  | loc=pos kRead x=inbr[s ("("), lident, s (")")]  { fun (a) { assertVoid (a, Read (x), loc) } }
  | loc=pos kWrite e=inbr[s ("("), exp, s (")")]    { fun (a) { assertVoid (a, Write (e (Val)), loc) } }
  | loc=pos kIf el=elseItem                         { fun (a) { el (a) } }
  | loc=pos kWhile cond=exp kDo body=exp kOd        { fun (a) { assertVoid (a, While (cond (Val), body (Void)), loc) } }
  | loc=pos kDo body=exp kWhile cond=exp kOd        { fun (a) { assertVoid (a, DoWhile (body (Void), cond (Val)), loc) } }
  | loc=pos kFor decl=exp s[","] cond=exp s[","] succ=exp kDo body=exp kOd
                                                    { fun (a) { 
                                                        assertVoid (a, 
                                                                    Seq (decl (Void), 
                                                                          While (cond (Val), 
                                                                            Seq (body (Void), succ (Void)))), 
                                                                    loc)
                                                      } 
                                                    }
    ),

    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary) | primary),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

var elseItem = memo $ eta syntax (
  cond=exp kThen body=exp
  end = (
      kElif el=elseItem { fun (a) { If (cond (Val), body (a), el (a)) } }
    | kElse el=exp kFi  { fun (a) { If (cond (Val), body (a), el (a)) } }
    | kFi               { fun (a) { assertVoid (a, If (cond (Val), body (Void), Skip), loc) } }
  )

  { end }
);

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});