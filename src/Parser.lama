-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binOp(op) {
  [s(op), fun(l, _, r) {Binop (op, l, r)}]
}
-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr (
        {
          [Left, map (binOp, {"!!"})],
          [Left, map (binOp, {"&&"})],
          [Nona, map (binOp, {"==", "!=", "<", ">", "<=", ">="})],
          [Left, map (binOp, {"+", "-"})],
          [Left, map (binOp, {"*", "/", "%"})]
        }, primary
      ));

var stmtUnit = memo $ eta  syntax (kSkip {Skip}                                |
                               x=lident s[":="] e=exp {Assn (x, e)}            |
                               kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
                               kWrite x=inbr[s("("), exp, s(")")] {Write (x)}  |
                               kWhile c=exp kDo b=stmt kOd {While (c, b)} |
                               kIf c=exp kThen a=stmt b=elseUnit {If (c, a, b)} |
                               kDo b=stmt kWhile c=exp kOd {DoWhile (b, c)}     |
                               kFor beg=stmt s[","] c=exp s[","] change=stmt kDo body=stmt kOd {Seq (beg, While (c, Seq(body, change)))}
);
var elseUnit = memo $ eta syntax (kElif c=exp kThen a=stmt b=elseUnit {If (c, a, b)} |
                                 kElse b=stmt kFi {b}                                |
                                 kFi {Skip});
var stmt = memo $ eta syntax (stmtUnit | x=stmtUnit s[";"] y=stmt {Seq (x, y)});

-- Public top-level parser
public parse = stmt;
