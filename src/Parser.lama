-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
  -- decimal constant x
  loc=pos x=decimal {
    fun (a) {assertValue (a, Const (stringInt (x)), loc)}
  } |
 
  -- identifier x
  x=lident  {
    fun (a) {
      case a of
        Ref  -> Ref (x)
      | Void -> Ignore (Var (x))
      | _    -> Var (x)
        esac
    }
  } |

  -- skip
  loc=pos kSkip {
    fun (a) { assertVoid (a, Skip, loc) }
  } |

  -- read x
  loc=pos kRead x=inbr[ s ("("), lident, s(")")] {
    fun (a) { assertVoid (a, Read (x), loc) }
  } |

  -- write x
  loc=pos kWrite x=inbr[s("("), exp, s(")")] {
    fun (a) { assertVoid (a, Write (x (Val)), loc) }
  } |

  -- while e do x
  loc=pos kWhile e=exp kDo x=exp kOd {
    fun (a) { assertVoid (a, While (e (Val), x (Void)), loc) }
  } |

  -- do x while e
  loc=pos kDo x=exp kWhile e=exp kOd {
    fun (a) { assertVoid (a, DoWhile (x (Void), e (Val)), loc) } 
  } |

  -- if e then x else y
  loc=pos kIf e=exp kThen x=exp kElse y=exp kFi {
    fun (a) { If (e (Val), x (a), y (a)) }
  } |

  -- if e then x
  loc=pos kIf e=exp kThen x=exp kFi {
    fun (a) { assertVoid (a, If (e (Val), x (Void), Skip), loc)}
  } |

  -- if e then x elif ...
  loc=pos kIf e=exp kThen x=exp y=elif_tail {
    fun (a) { If (e (Val), x (a), y (a))}
  } |

  -- for x, e, y do z
  loc=pos kFor x=exp s[","] e=exp s[","] y=exp kDo z=exp kOd {
    fun (a) { assertVoid (a, Seq (x (Void), While (e (Val), Seq (z (Void), y (Void)))), loc) }
  } |

  -- expression in brackets
  loc=pos e=inbr[s("("), exp, s(")")] {
    e
  }
),
elif_tail = memo $ eta syntax (
  kElif e=exp kThen x=exp y=elif_tail {
    fun (a) { If (e (Val), x (a), y (a)) }
  } |
  kElse e=exp kFi {
    e
  } |
  loc=pos kFi {
    fun (a) { assertVoid (a, Skip, loc) }
  }
),
basic = memo $ eta (expr ({
    [Right, {[s (":="),
      fun (l, loc, r) {
        fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
      }
    ]}],
    [Left , map (binop, {"!!"})],
    [Left , map (binop, {"&&"})],
    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
    [Left , map (binop, {"+", "-"})],
    [Left , map (binop, {"*", "/", "%"})]
  },
  primary)),
exp = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
