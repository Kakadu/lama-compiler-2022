-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

fun inCurlBr(expr) {
  syntax (inbr[s("("), expr, s(")")])
}

fun binOps(ops) {
  fun helper(op) { [s(op), fun (l, op, r) { Binop(op, l, r) }] }
  map(helper, ops)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal { Const(stringInt(x)) } | x=lident { Var(x) } | inCurlBr[exp]),
    exp = memo $ eta (expr({
    [Left, binOps $ { "&&", "!!" }],
    [Nona, binOps $ { "<", ">", "<=", ">=", "==", "!=" }],
    [Left, binOps $ { "+", "-" }],
    [Left, binOps $ { "*", "/", "%" }]
  }, primary));

var stmt = memo $ eta syntax(
  kRead x=inCurlBr[lident] { Read(x) }  |
  kWrite e=inCurlBr[exp] { Write(e) }   |
  kSkip { Skip }                        |
  x=lident s[":="] e=exp { Assn(x, e) } |
  s1=stmt s[";"] s2=stmt end { Seq(s1, s2) }
);

-- Public top-level parser
public parse = stmt;
             
