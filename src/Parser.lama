-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun genRules(ops) {
  map (fun (op) {[s (op), fun (l, op, r) { Binop (op, l, r) }]}, ops)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp = memo $ expr ({
                            [Left, genRules ({ "!!" })],
                            [Left, genRules ({ "&&" })],
                            [Nona, genRules ({ "<", ">", "<=", ">=", "==", "!=" })],
                            [Left, genRules ({ "+", "-" })],
                            [Left, genRules ({ "*", "/", "%" })]
                         }, primary);

var stmt = memo $ eta syntax (x=lident s[":="] e=exp { Assn (x, e) }              |
                              x=stmt s[";"] y=stmt end { Seq (x, y) }             |
                              kSkip { Skip }                                      |
                              kRead x=inbr[s ("("), lident, s (")")] { Read (x) } |
                              kWrite e=inbr[s ("("), exp, s (")")] { Write (e) });

-- Public top-level parser
public parse = stmt;
             
