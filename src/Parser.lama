-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, vl, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (vl)
  | _    -> vl
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, vl, loc) {
  case atr of
    Void -> vl
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (vl, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

fun ref (atr, v, loc) {
  case atr of
    Ref  -> Ref (v)
  | Void -> Ignore (Var (v))
  | _    -> Var (v)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun par(p) {
	inbr(s("("), p, s(")"))
}

fun brak(p) {
  inbr(s ("["), p, s ("]"))
}

-- A helper function to be used with super-combinator "expr"
fun binopSyntax (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

fun binop(assoc, ops) {
	[assoc, map (binopSyntax, ops)]
}

fun binops(aops) {
	map (fun ([assoc, ops]) { binop(assoc, ops) }, aops)
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandVarDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  fun expandValDefs (defs, expr) {
    foldr (fun ([defs, expr], [ident, value]) {
             [ident : defs, Seq (Ignore (Set (ident, value)), expr)]
           },
           [{}, expr],
           defs)
  }

  case
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Val (ds) ->
                 case expandValDefs (ds, expr) of
                   [ds, expr] -> [Val (ds) : defs, expr]
                 esac
             | Var (ds) ->
                 case expandVarDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

var assignOp =  [Right,
  {[
    s (":="),
    fun (l, loc, r) {
      fun (a) {
        assertValue (a, Assn (l (Ref), r (Val)), loc)
      }
    }
  ]}
];

var elseBody = memo $ eta syntax (
    loc=pos kElse elseSt=exp kFi {
      fun(a) {
        elseSt (a)
      }
    }
  | loc=pos kElif ifSt=ifBody {
      fun (a) {
        ifSt (a)
      }
    }
  | loc=pos kFi {
      fun (a) {
        assertVoid (a, Skip, loc)
      }
    }
  ),
  ifBody = memo $ eta syntax (
    loc=pos cond=exp kThen thenB=exp elseB=elseBody {
      fun (a) {
        If (cond (Val), thenB (a), elseB (a))
      }
    }
);

var primary = memo $ eta syntax (
        -- array constant
        loc=pos x=brak[list0(syntax (e=exp {e(Val)}))] {fun (a) {assertValue (a, Array (x), loc)}}
        -- string constant
        | loc=pos x=strlit                                               {fun (a) {assertValue (a, String (x), loc)}}
        -- character literal
        | loc=pos x=chrlit                                               {fun (a) {assertValue (a, Const (x), loc)}}
        -- decimal constant
        | loc=pos x=decimal                                              {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}
        -- identifier
        | x=lident args=par[list0(syntax(e=exp {e(Val)}))]? {fun (a) {
                                                                              case args of
                                                                                None -> case a of
                                                                                          Ref  -> Ref (x)
                                                                                        | Void -> Ignore (Var (x))
                                                                                        | _    -> Var (x)
                                                                                        esac
                                                                              | Some (args) -> assertValue (a, Call (x, args))
                                                                              esac
                                                                            }}
        -- S-expression
        | loc=pos x=uident args=par[list0(syntax(e=exp {e(Val)}))]? {fun (a) {assertValue (a, Sexp (x, case args of
                                                                                                                        None        -> {}
                                                                                                                      | Some (args) -> args
                                                                                                                      esac), loc)}}
        | par[scopeExpr]
        -- Skip
        | loc=pos kSkip {
            fun (a) {
                assertVoid (a, Skip, loc)
            }
          }
        -- If
        | loc=pos kIf body=ifBody {
            fun (a) {
              body (a)
            }
          }
        -- While (cond, x)
        | loc=pos kWhile cond=exp kDo x=scopeExpr kOd {
            fun (a) {
              assertVoid (a, While(cond (Val), x (Void)), loc)
            }
          }
        -- x;While (cond, y;z)
        | loc=pos kFor x=scopeExpr s[","] cond=exp s[","] z=exp kDo y=scopeExpr kOd {
            fun (a) {
              assertVoid (
                a,
                distributeScope(x (Void), fun (x) { Seq (x, While(cond (Val), Seq (y (Void), z (Void)))) }),
                loc
              )
            }
          }
        -- DoWhile(x, cond)
        | loc=pos kDo x=scopeExpr kWhile cond=exp kOd {
          fun (a) {
              assertVoid (
                a,
                distributeScope(x (Void), fun (x) { DoWhile(x, cond (Val)) }),
                loc
              )
            }
          }
      ),
      basic   = memo $ eta (expr (assignOp : binops({
                                  [Left, {"!!"}],
                                  [Left, {"&&"}],
                                  [Nona, {"==", "!=", "<", ">", "<=", ">="}],
                                  [Left, {"+", "-"}],
                                  [Left, {"*", "/", "%"}]
                                 }),
                                 postfix)),
      postfix    = memo $ eta syntax (loc=pos e=primary ps=(i=brak[exp] {Index (i (Val))})* {fun (a) {foldl (fun (e, p) {                                                                                                                                                    case p of
                                                                                   Index (i) ->
                                                                                     fun (a) {
                                                                                       case a of
                                                                                         Ref -> ElemRef (e (Val), i)
                                                                                       | _   -> assertValue (a, Elem (e (Val), i), loc)
                                                                                       esac
                                                                                     }
                                                                                 esac
                                                                               }, e, ps) (a)
                                                              }}
                                     ),
      scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {fun (a) {fun (e) {
                                                                        case ds of
                                                                          {} -> e
                                                                        | _  -> expandScope (ds, e)
                                                                        esac
                                                                      } (case e of
                                                                           Some (e) -> e (a)
                                                                         | _        -> Skip
                                                                         esac)
                                                                      }}),
      definition = memo $ eta syntax (kVar ds=list[syntax (lident (s["="] e=basic {e (Val)})?)] s[";"] {Var (ds)} |
                                      kVal ds=list[syntax (lident (s["="] e=basic {e (Val)}))]  s[";"] {Val (ds)} |
                                      kFun name=lident
                                           args=par[list0 (lident)]
                                           body=inbr[s("{"), scopeExpr, s("}")] {
                                           Fun (name, args, body (Weak))
                                      }
                                     ),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
