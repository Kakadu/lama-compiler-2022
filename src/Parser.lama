-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun gen_infix_op_parsers (ops) {
  fun binop_sem_action (l, op, r) {
    Binop (op, l, r)
  }

  map (fun (op) { [s (op), binop_sem_action] }, ops)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ expr ({[Left, gen_infix_op_parsers({"!!"})],
                          [Left, gen_infix_op_parsers({"&&"})],
                          [Nona, gen_infix_op_parsers({"==", "!=", "<=",
                                                       "<", ">=", ">"})],
                          [Left, gen_infix_op_parsers({"+", "-"})],
                          [Left, gen_infix_op_parsers({"*", "/", "%"})]
                         },
                         primary);

var stmt = memo $ eta syntax (x=lident s[":="] e=exp { Assn (x, e) }            |
                              kSkip { Skip }                                    |
                              kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
                              kWrite e=inbr[s("("), exp, s(")")] { Write (e) });

var stmts = memo $ listBy (stmt, s (";")) @ fun (l) {
    foldl (fun (acc, s) { case acc of None -> s | _ -> Seq (acc, s) esac }, None, l)
  };
   

-- Public top-level parser
public parse = stmts;
