-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun genRule(op) {
  [s (op), fun (l, _, r) {Binop(op, l, r)}]
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp = memo $ eta (expr ({
                                [Left, {genRule ("!!")}],
                                [Left, {genRule ("&&")}],
                                [Nona, {genRule ("=="), genRule ("!="),
                                        genRule ("<="), genRule ("<"),
                                        genRule (">="), genRule (">")}],
                                [Left, {genRule ("+"),  genRule ("-")}],
                                [Left, {genRule ("*"),  genRule ("/"),
                                        genRule ("%")}]
                              }, primary) | primary);

var elPart = memo $ eta syntax (kElif ex=exp kThen s=stmt el=elPart {If (ex, s, el)} |
                                kElse s=stmt {s});

-- Statement without ';'
var stmtSimple = memo $ eta syntax (x=lident s[":="] e=exp {Assn (x, e)}                     |
                                    kSkip {Skip}                                             |
                                    kRead x=inbr[s ("("), lident, s (")")] {Read (x)}        |
                                    kWrite e=inbr[s ("("), exp, s (")")] {Write (e)}         |
                                    kIf e=exp kThen s=stmt el=elPart kFi {If (e, s, el)}     |
                                    kIf e=exp kThen s=stmt kFi {If (e, s, Skip)}             |
                                    kWhile e=exp kDo s=stmt kOd {While (e, s)}               |
                                    kDo s=stmt kWhile e=exp kOd {DoWhile (s, e)}             |
                                    kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd
                                      {Seq (s1, While (e, Seq (s3, s2)))});

var stmt = memo $ eta syntax (stmtSimple                                  |
                              s1=stmtSimple s[";"] s2=stmt {Seq (s1, s2)});

-- Public top-level parser
public parse = stmt;
