-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (binop) {
  [s (binop), fun (l, op, r) {Binop (op, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (
  x=decimal { Const(stringInt(x)) } |
  x=lident { Var(x) }               |
  inbr[s("("), exp, s(")")]
),
    exp = memo $ eta expr({
    [Left, map(binop, { "!!" })],
    [Left, map(binop, { "&&" })],
    [Nona, map(binop, { "==", "!=", "<", ">", "<=", ">=" })],
    [Left, map(binop, { "+", "-" })],
    [Left, map(binop, { "*", "/", "%" })]
  },
    primary
  );

var stmt = memo $ eta syntax (
  x=lident -s[":="] v=exp { Assn(x, v) }                   |
  stmt1=stmt -s[";"] stmt2=stmt -end { Seq(stmt1, stmt2) } |
  -kSkip { Skip }                                          |
  -kRead x=inbr[s("("), lident, s(")")] { Read(x) }        |
  -kWrite v=inbr[s("("), exp, s(")")] { Write(v) }
);


-- Public top-level parser
public parse = stmt;