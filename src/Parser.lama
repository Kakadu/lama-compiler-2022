-- Parser

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]
);

var binops = fun(l, op, r) {Binop(op, l, r)};

-- mind priority
var ops = {
  [Left, [s ("!!"), binops] : {}],
  [Left, [s ("&&"), binops] : {}],
  [Nona, [s ("<") | s (">") | s ("<=") | s (">=") | s ("==") | s ("!="), binops] : {}],
  [Left, [s ("+") | s ("-"), binops] : {}],
  [Left, [s ("*") | s ("/") | s ("%"), binops] : {}]
};

var exp = memo $ eta expr (ops, primary);

var stmt = memo $ eta syntax (
  	kRead  x=inbr[s("("), lident, s(")")] {Read (x)}      |
  	kWrite x=inbr[s("("), exp, s(")")]    {Write (x)}     |
  	x=lident s[":="] y=exp                {Assn (x, y)}   |
  	st1=stmt s[";"] st2=stmt end          {Seq (st1, st2)}
);

-- Public top-level parser
public parse = stmt;
