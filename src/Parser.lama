-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (
  x=decimal {Const (stringInt (x))} |
  x=lident  {Var (x)}               |
  inbr[s ("("), exp, s (")")]
),
exp = memo $ eta 
  (expr (
    {[Left, {[s ("&&") | s ("!!"), fun (l, op, r) {Binop (op, l, r)}]}],
     [Left, {[binops, fun (l, op, r) {Binop (op, l, r)}]}],
     [Left, {[s ("+") | s ("-"), fun (l, op, r) {Binop (op, l, r)}]}], 
     [Left, {[s ("*") | s ("/") | s ("%"), fun (l, op, r) {Binop (op, l, r)}]}]},
    primary
  ))
,
binops = memo $ eta syntax (
    s ["=="] | s ["!="] | s ["<="] | 
    s ["<"] | s [">="] | s [">"]
);

var stmt = memo $ eta syntax (
    s1 = unostmt s [";"] s2 = stmt {Seq (s1, s2)} 
  | unostmt 
  | end
),
unostmt = memo $ eta syntax (
    kRead  x=inbr [s ("("), lident, s (")")] {Read (x)}
  | kWrite x=inbr [s ("("), exp,    s (")")] {Write (x)}
  | l=lident s [":="] r=exp {Assn (l, r)}
  -- | kSkip {Skip}
);

-- Public top-level parser
public parse = stmt;
             
