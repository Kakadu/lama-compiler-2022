-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

fun binop(token) {
  [s(token), fun (l, op, r) { Binop(op, l, r) }]
}

-- Primary expression
var primary = memo $ eta syntax (
  x=decimal { Const(stringInt(x)) }
  | x=lident { Var(x) }
  | inbr[s("("), exp, s(")")]),
    exp = memo $ eta expr(
    {
      [Left, map(binop, { "!!" })],
      [Left, map(binop, { "&&" })],
      [Nona, map(binop, { "<", ">", "<=", ">=", "==", "!=" })],
      [Left, map(binop, { "+", "-" })],
      [Left, map(binop, { "*", "/", "%" })]
    },
    primary
  );

var elseHelper = memo $ eta syntax (
  kElif cond=exp kThen s1=stmts s2=elseHelper { If(cond, s1, s2) }
  | kElse s1=stmts kFi { s1 }
  | kFi { Skip }
);

var stmt = memo $ eta syntax (
  kSkip { Skip }
  | s1=stmt s[";"] s2=stmt end { Seq(s1, s2) }
  | x=lident s[":="] e=exp { Assn(x, e) }
  | kRead x=inbr[s("("), lident, s(")")] { Read(x) }
  | kWrite e=inbr[s("("), exp, s(")")] { Write(e) }
  | kIf e=exp kThen st=stmts el=elseHelper { If(e, st, el) }
  | kWhile e=exp kDo st=stmts kOd { While(e, st) }
  | kDo st=stmts kWhile e=exp kOd { DoWhile(st, e) }
  | kFor begin=stmts s[","] e=exp s[","] inc=stmts kDo body=stmts kOd { Seq(begin, While(e, Seq(body, inc))) }
),
    stmts = memo $ eta syntax (
    stmt
    | s1=stmt s[";"] s2=stmts { Seq(s1, s2) });


-- Public top-level parser
public parse = stmts;
