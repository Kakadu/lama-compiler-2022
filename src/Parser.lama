-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr(l, p, r) {
  syntax (-l p -r)
}

-- Transforms list of binop strings into a list of descriptors
-- to use in expr superparser
fun binop_descrs(ts) {
  map(fun (t) { [s(t), fun (l, op, r) { Binop(op, l, r) }] }, ts)
}

-- Primary expression
var primary = memo $ eta syntax (
  x=decimal { Const(stringInt(x)) } |
  x=lident { Var(x) }               |
  inbr[s("("), exp, s(")")]
),
    exp = memo $ eta expr(
    {
      [Left, binop_descrs({ "!!" })],
      [Left, binop_descrs({ "&&" })],
      [Nona, binop_descrs({ "==", "!=", "<=", "<", ">=", ">" })],
      [Left, binop_descrs({ "+", "-" })],
      [Left, binop_descrs({ "*", "/", "%" })]
    },
    primary
  );

var stmt = memo $ eta (
  failure("statement parsing not implemented\n")
  -- syntax (
  --   s1=stmt s[";"] s2=stmt end { Seq(s1, s2) }       |
  --   kSkip { Skip }                                   |
  --   x=lident s[":="] e=exp { Assn(x, e) }            |
  --   kRead x=inbr[s("("), lident, s(")")] { Read(x) } |
  --   kWrite e=inbr[s("("), exp, s(")")] { Write(e) }
  -- )
);

-- Public top-level parser
public parse = stmt;
