-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopParserHelper(op_str) {
  [s(op_str), fun (l, op, r) { Binop(op, l, r) }]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta syntax (primary |
                                expr[{[Left, map(binopParserHelper, {"!!"})],
                                      [Left, map(binopParserHelper, {"&&"})],
                                      [Nona, map(binopParserHelper, {"==", "!=", "<=", ">=", ">", "<"})],
                                      [Left, map(binopParserHelper, {"+", "-"})],
                                      [Left, map(binopParserHelper, {"*", "/", "%"})]},
                                      primary]);

var parseElseSyntax = memo $ eta syntax (kElse s2=stmts { s2 } |
                                         kElif cond1=exp kThen s2=stmts s3=parseElseSyntax { If (cond1, s2, s3) } |
                                         empty {Skip}
                                        );

var stmt = memo $ eta syntax (kRead var_name=inbr[s("("), lident, s(")")] { Read (var_name) } |
                              kWrite e=inbr[s("("), exp, s(")")] { Write (e) } |
                              kSkip { Skip } |
                              var_name=lident s[":="] e=exp { Assn(var_name, e) } |
                              kIf cond1=exp kThen s1=stmts s2=parseElseSyntax kFi { If (cond1, s1, s2) }|
                              kWhile cond=exp kDo s=stmts kOd { While (cond, s) } |
                              kDo s=stmts kWhile cond=exp kOd { DoWhile(s, cond) } |
                              kFor init=stmts s[","] cond=exp s[","] mod=stmts kDo s=stmts kOd
                                { Seq (init, While (cond, Seq (s, mod))) }
                              ),
      stmts = memo $ eta syntax (stmt | s1=stmt s[";"] s_other=stmts { Seq (s1, s_other) });
   

-- Public top-level parser
public parse = stmts;
