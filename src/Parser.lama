-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- generates parser for infix operator and the semantics action
fun genDesc(op) {
  [s (op), fun (l, op, r) {Binop(op, l, r)}]
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ eta expr (
    { [Left, {genDesc ("!!")}],
      [Left, {genDesc ("&&")}],
      
      [Nona, {genDesc ("=="),
              genDesc ("!="),
              genDesc ("<="),
              genDesc ("<"),
              genDesc (">="),
              genDesc (">")
            }],
      
      [Left, {genDesc ("+"),
              genDesc ("-")
            }],
      
      [Left, {genDesc ("*"),
              genDesc ("/"),
              genDesc ("%")
            }]
    }, primary
  );

var elseItem = memo $ eta syntax (
    kElif e=exp kThen stmt1=stmt stmt2=elseItem { If (e, stmt1, stmt2)}
  | kElse stmt2=stmt kFi { stmt2 }
  | kFi { Skip }
);

var stmtItem = memo $ eta syntax (
    x=lident s[":="] e=exp { Assn (x, e) }
  -- | stmt1=stmt s[";"] stmt2=stmt end { Seq (stmt1, stmt2) }
  | kSkip {Skip}
  | kRead x=inbr[s ("("), lident, s (")")] { Read (x) }
  | kWrite e=inbr[s ("("), exp, s (")")] { Write (e) }
  | kIf e=exp kThen stmt1=stmt el=elseItem { If (e, stmt1, el) }
  | kWhile e=exp kDo stmt1=stmt kOd { While (e, stmt1) }
  | kDo stmt1=stmt kWhile e=exp kOd { DoWhile (stmt1, e) }
  | kFor stmt1=stmt s[","] e=exp s[","] stmt2=stmt kDo stmt3=stmt kOd { Seq (stmt1, While (e, Seq (stmt3, stmt2))) }
);

var stmt = memo $ eta syntax (
    stmtItem
  | stmt1=stmtItem s[";"] stmt2=stmt { Seq (stmt1, stmt2) } 
);
   

-- Public top-level parser
public parse = stmt;
