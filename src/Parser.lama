-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binOpPrs(op) {
  [s(op), fun(l, op, r) {Binop (op, l ,r)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta (expr ({  
                              [Left, map (binOpPrs, {"&&", "!!"})],
                              [Nona, map (binOpPrs, {"<", ">", "<=", ">=", "==", "!="})],
                              [Left, map (binOpPrs, {"+", "-"})],
                              [Left, map (binOpPrs, {"*", "/", "%"})]
                            }, primary));

var parseElse = memo $ eta syntax (
                              kElif e=exp kThen s1=stmt s2=parseElse { If(e, s1, s2) } |
                              kElse s=stmt kFi { s } |
                              kFi { Skip }
                              );

var parseIf = memo $ eta syntax (kIf e=exp kThen s1=stmt s2=parseElse {If (e, s1, s2)} );

var stmt2 = memo $ eta syntax (kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
                              kWrite e=inbr[s("("), exp, s(")")] {Write(e)} |
                              kSkip {Skip} |
                              x=lident s[":="] e=exp {Assn(x, e)} |
                              kWhile e=exp kDo s=stmt kOd {While(e, s)} |
                              kDo s=stmt kWhile e=exp kOd {DoWhile(s, e)} |
                              kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq (s1, While (e, Seq(s3, s2)))} |
                              s=parseIf {s}
                              );

var stmt = memo $ eta syntax (
                               l=stmt2 s[";"] r=stmt {Seq (l, r)} | stmt2
                              );
   

-- Public top-level parser
public parse = stmt;
