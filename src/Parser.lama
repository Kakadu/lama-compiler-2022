-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun genRules(ops) {
  map (fun (op) {[s (op), fun (l, op, r) { Binop (op, l, r) }]}, ops)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp = memo $ expr ({
        [Left, genRules ({ "!!" })],
        [Left, genRules ({ "&&" })],
        [Nona, genRules ({ "<", ">", "<=", ">=", "==", "!=" })],
        [Left, genRules ({ "+", "-" })],
        [Left, genRules ({ "*", "/", "%" })]
      }, primary);


var elsePart = memo $ eta syntax (
  kElif e=exp kThen s=stmt ep=elsePart { If (e, s, ep) }     |
  kElse s=stmt { s }                                         |
  empty { Skip }
);

var compound = memo $ eta syntax (
  kIf e=exp kThen s=stmt ep=elsePart kFi { If (e, s, ep) }   |
  kWhile e=exp kDo s=stmt kOd { While (e, s) }               |
  kDo s=stmt kWhile e=exp kOd { DoWhile (s, e) }             |
  kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd
  { Seq (s1, While (e, Seq (s3, s2))) }
);

var atomStmt = memo $ eta syntax (
  x=lident s[":="] e=exp { Assn (x, e) }                     |
  kRead x=inbr[s ("("), lident, s (")")] { Read (x) }        |
  kWrite e=inbr[s ("("), exp, s (")")]   { Write (e) }       |
  kSkip { Skip }                                             |
  compound
);

var stmt = memo $ eta syntax (
  head=atomStmt s[";"] tail=stmt { Seq (head, tail) }        |
  atomStmt
);

-- Public top-level parser
public parse = stmt;
             
