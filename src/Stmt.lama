-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c@[s, w], stmt) {
  case stmt of
      Assn (x, expr)         -> [s <- [x, evalExpr(s, expr)], w]
    | Seq (stmtLhs, stmtRhs) -> eval(eval(c, stmtLhs), stmtRhs)
    | Skip                   -> c
    | Read (x)               -> (
      case readWorld(w) of
        [v, wAfterRead] -> [s <- [x, v], wAfterRead]
      esac
    )
    | Write (expr)           -> [s, writeWorld(evalExpr(s, expr), w)]
    | If (expr, stmt1, stmt2) -> if evalExpr(s, expr) then eval(c, stmt1) else eval(c, stmt2) fi
    | While (expr, stmt)      ->
      while case c of [state, _] -> evalExpr(state, expr) esac
      do
        c := eval(c, stmt)
      od;
      c
    | DoWhile (stmt, expr)    ->
      do
        c := eval(c, stmt) while case c of [state, _] -> evalExpr(state, expr) esac
      od;
      c
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
