-- Statement evaluator.

import State;
import Expr;
import World;
import List;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c, stmt) {
  var state = c.fst;
  var w = c.snd;

  case stmt of
    Assn (v, expr) -> (
      [state <- [v, evalExpr(state, expr)], w]
    )
    | Seq (s1, s2)   -> eval(eval(c, s1), s2)
    | Skip           -> c
    | Read (x)       -> (
      case w.readWorld of [value, newW] -> [state <- [x, value], newW] esac
    )
    | Write (expr)   -> (
      var res = evalExpr(state, expr);
      [state, writeWorld(res, w)]
    )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}