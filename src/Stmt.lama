-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[st, w], stmt) {
  case stmt of 
  Assn (s, e) -> 
    var v = evalExpr(st, e); 
    [st <- [s, v], w]
  | Seq (stmt1, stmt2) -> 
    var new_c = eval (c, stmt1); 
    eval (new_c, stmt2)
  | Skip -> c
  | Read (s) -> 
    var tmp = readWorld(w);
    [st <- [s, tmp[0]], tmp[1]]
  | Write (e) -> 
    var v = evalExpr(st,e); 
    var new_w = writeWorld(v, w); 
    [st, new_w]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
