-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c @ [state, world], stmt) {
  case stmt of
    Assn(x, expr)       -> [state <- [x, evalExpr(state, expr)], world]
    | Seq(stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
    | Skip              -> c
    | Read(x)           -> case readWorld(world) of [value, world] -> [state <- [x, value], world] esac
    | Write(expr)       -> [state, writeWorld(evalExpr(state, expr), world)]
    | If (expr, then_body, else_body)  ->
      if evalExpr(stmt, expr)
        then
          eval(c, then_body)
        else
          eval(c, else_body)
      fi
    | While (expr, while_body)   ->
      while evalExpr(stmt, expr) do
        c := eval(c, while_body);
        stmt := c.fst
      od;
      c
    | DoWhile (while_body, expr) ->
      do
        c := eval(c, while_body);
        stmt := c.fst
      while evalExpr(stmt, expr) od;
      c
    | _                 -> failure("Unexpected statement!")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
