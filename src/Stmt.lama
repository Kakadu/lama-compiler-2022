-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, w], stmt) {
  case stmt of
    Assn  (var_name, expr) -> [state <- [var_name, evalExpr (state, expr)], w]
  | Seq   (stmt1, stmt2)   -> eval (eval (c, stmt1), stmt2)
  | Skip                   -> c
  | Read  (var_name)       ->
      case readWorld (w) of [value, w] -> [state <- [var_name, value], w] esac
  | Write (expr)           -> [state, writeWorld (evalExpr (state, expr), w)]
  | If (expr, stmt1, stmt2) ->
      if evalExpr (state, expr) then eval (c, stmt1) else eval (c, stmt2) fi
  | While (expr, loop_stmt) ->
      if evalExpr (state, expr) then eval (eval (c, loop_stmt), stmt) else c fi
  | DoWhile (loop_stmt, expr) ->
      eval (eval (c, loop_stmt), While (expr, loop_stmt))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
