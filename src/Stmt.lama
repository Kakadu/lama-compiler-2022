-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var state = c[0];
  var world = c[1];
  case stmt of
    Assn (s, expr) ->  [state <- [s, evalExpr (state, expr)], world]
  | Seq  (l_stmt, r_stmt) -> c := eval (c, l_stmt); c := eval (c, r_stmt); c
  | Skip -> c
  | Read (s) -> var readen = readWorld(world); [state <- [s, readen[0]], readen[1]]
  | Write (expr) -> [state, writeWorld (evalExpr (state, expr), world)]
  | If (cond, s1, s2) -> if evalExpr(state, cond) then eval(c, s1) else eval(c, s2) fi
  | While (cond, body) -> if evalExpr(state, cond) then eval(eval(c, body), stmt) else c fi
  | DoWhile (body, cond) -> var afterIter = eval (c, body); eval(afterIter, While (cond, body)) 
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
