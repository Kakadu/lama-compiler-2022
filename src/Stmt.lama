-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun readStmt ([state, world], name) {
  case readWorld(world) of
    [v, newWorld]-> [state <- [name, v], newWorld]
  esac
}

fun eval ([state, world], stmt) {
  case stmt of
    Assn (name, expr) -> [state <- [name, evalExpr(state, expr)], world]   |
    Seq  (a, b) -> eval(eval([state, world], a), b)                        |
    Skip -> [state, world]                                                 |
    Read (s) -> readStmt([state, world], s)                                |
    Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]      
    | If (expr, a, b) -> 
        if evalExpr(state, expr)
        then
          eval([state, world], a) 
        else
          eval ([state, world], b)
        fi                                                             
    | While (expr, stmt) -> 
        var c = [state, world];
        while evalExpr(c[0], expr) do
          c := eval(c, stmt)
        od; 
        c
    | DoWhile (stmt, expr) -> 
        var c = [state, world];
        do
          c := eval(c, stmt)
        while evalExpr(c[0], expr)
        od;
        c
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
