-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c @ [st, w], stmt) {
  case stmt of
    Assn  (x, e)      -> [st <- [x, evalExpr (st, e)], w]
  | Seq   (st1, st2)  -> eval (eval (c, st1), st2)
  | Skip              -> c
  | Read  (x)         -> (
    case readWorld (w) of [z, w1] -> [st <- [x, z], w1] esac
  )
  | Write (e)         -> [st, writeWorld (evalExpr (st, e), w)]
  | While (p, s1)     -> 
    while case c of [s, w] -> evalExpr (s, p) esac do
      c := eval (c, s1)
    od;
    c  
  | DoWhile (s1, p) -> 
    do
    	  c := eval (c, s1)
    while case c of [s, w] -> evalExpr (s, p) esac od;
    c
  | If (p, s1, s2) ->
    if evalExpr (st, p) then
       eval (c, s1)
    else
       eval (c, s2)
    fi
  | _                 -> failure ("Undefined statement\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
