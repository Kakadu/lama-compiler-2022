-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c@[s, w], stmt) {
  case stmt of
    Assn (x, e)          -> [s <- [x, evalExpr(s, e)], w]
    | Seq(s1, s2)        -> eval(eval(c, s1), s2)
    | Skip               -> c
    | Read(x)            ->
      (
        var r = readWorld(w);
        [s <- [x, r[0]], r[1]]
      )
    | Write(e)           -> [s, writeWorld(evalExpr(s, e), w)]
    | If (cond, s1, s2)  -> if evalExpr(s, cond) then eval(c, s1) else eval(c, s2) fi
    | While (cond, s1)   -> if evalExpr(s, cond) then eval(eval(c, s1), stmt) else c fi
    | DoWhile (s1, cond) -> eval(eval(c, s1), While(cond, s1))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
