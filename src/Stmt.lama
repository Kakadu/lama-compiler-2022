-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var state = c[0], world = c[1];

  case stmt of
    Assn    (var_as_str, expr)         -> [state <- [var_as_str, evalExpr (state, expr)], world]
  | Seq     (left_stmt, right_stmt)    -> eval (eval (c, left_stmt), right_stmt)
  | Skip                               -> c
  | Read    (name_of_var)              ->
      case readWorld (world) of
        [num, new_world] ->
          [state <- [name_of_var, num], new_world]
      esac
  | Write   (expr)                     -> [state, writeWorld (evalExpr (state, expr), world)]
  | DoWhile (loop_stmt, expr)          -> eval (eval (c, loop_stmt), While (expr, loop_stmt))
  | If      (expr, if_stmt, else_stmt) ->
      if evalExpr (state, expr) then
        eval (c, if_stmt) else
        eval (c, else_stmt)
      fi
  | While   (expr, loop_stmt)          ->
      if evalExpr (state, expr) then
        eval (eval (c, loop_stmt), stmt) else c
      fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
