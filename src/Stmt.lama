-- Statement evaluator.

import List;
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c @ [state, w], stmt) {
  case stmt of
    Assn (x, exp) -> [state <- [x, evalExpr (state, exp)], w]
  | Seq(s1, s2)   -> foldl (eval, c, {s1, s2})
  | Skip        -> c
  | Read(x)    -> case readWorld (w) of [z, world] -> [state <- [x, z], world] esac
  | Write(exp) -> [state, writeWorld (evalExpr (state, exp), w)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
