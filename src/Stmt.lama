-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c @ [state, world], stmt) {
  case stmt of
      Skip                    -> c
    | Assn (x, expr)          -> [state <- [x, evalExpr(state, expr)], world]
    | Read (x)                -> case readWorld(world) of [v, newWorld] -> [state <- [x, v], newWorld] esac
    | Write (expr)            -> [state, writeWorld(evalExpr(state, expr), world)]
    | Seq (stmt1, stmt2)      -> eval(eval(c, stmt1), stmt2)
    | If (expr, stmt1, stmt2) -> if evalExpr(state, expr) != 0 then eval(c, stmt1) else eval(c, stmt2) fi
    | While (expr, stmt0)     -> if evalExpr(state, expr) != 0 then eval(eval(c, stmt0), stmt) else c fi
    | DoWhile (stmt0, expr)   ->
      case eval(c, stmt0) of
        [state, world] -> if evalExpr(state, expr) != 0 then eval([state, world], stmt) else [state, world] fi
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
