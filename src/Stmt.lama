-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([st, w], stmt) {
  case stmt of
    Assn (x, expr)          -> [st <- [x, evalExpr (st, expr)], w]
  | Seq (stmt1, stmt2)      -> eval (eval ([st, w], stmt1), stmt2)
  | Skip                    -> [st, w]
  | Read (x)                -> case readWorld (w) of [new_x, new_w] -> [st <- [x, new_x], new_w] esac
  | Write (expr)            -> [st, writeWorld (evalExpr (st, expr), w)]
  | If (cond, stmt1, stmt2) -> if evalExpr (st, cond) 
                               then eval ([st, w], stmt1)
                               else eval ([st, w], stmt2)
                               fi
  | While (cond, body)     -> if evalExpr (st, cond)
                               then eval (eval ([st, w], body), stmt)
                               else [st, w]
                               fi
  | DoWhile (body, cond)   -> eval (eval ([st, w], body), While (cond, body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
