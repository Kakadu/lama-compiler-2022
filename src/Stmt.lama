-- Statement evaluator.

import List;
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c @ [state, world], stmt) {
  case stmt of
    Assn (x, e)         -> [state <- [x, evalExpr(state, e)], world]
    | Seq(stmt1, stmt2) -> foldl(eval, c, { stmt1, stmt2 })
    | Skip              -> c
    | Read(x)           ->
      case readWorld(world) of
        [z, world] -> [state <- [x, z], world]
      esac
    | Write(e)          -> [state, writeWorld(evalExpr(state, e), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
