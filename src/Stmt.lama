-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |ss
--        Read   (string)           |
--        Write  (expr)             |

fun eval(c @ [s, w], stmt)
{
  case stmt of
    Assn(x, e)     -> [s <- [x, evalExpr(s, e)], w]
    | Seq (s1, s2) -> eval(eval(c, s1), s2)
    | Skip         -> c
    | Read (x)     ->
      (
        var r = readWorld(w);
        [s <- [x, r[0]], r[1]]
      )
    | Write(e)     -> [s, writeWorld(evalExpr(s, e), w)]
    | _            -> failure("Unexpected statement <%s>\n", stmt.string)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt)
{
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
