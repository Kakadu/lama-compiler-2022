-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn (x, e) -> [state <- [x, evalExpr (state, e)], world]
  | Seq (s1, s2) -> eval (eval (c, s1), s2)
  | Skip -> c
  | Read (x) ->
    case readWorld (world) of
      [v, wn] -> [state <- [x, v], wn]
    esac
  | Write (e) -> [state, writeWorld (evalExpr (state, e), world)]
  | While (e, s1) ->
    while case c of [s, w] -> evalExpr (s, e) esac do
    	  c := eval (c, s1)
    od;
    c
  | DoWhile (s1, e) ->
    do
    	  c := eval (c, s1)
    while case c of [s, w] -> evalExpr (s, e) esac od;
    c
  | If (e, s1, s2) ->
    if evalExpr (state, e) then
       eval (c, s1)
    else
       eval (c, s2)
    fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
