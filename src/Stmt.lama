-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
  case stmt of
      Assn (name, e)     -> [s <- [name, evalExpr (s, e)], w]
    | Seq (s1, s2)       -> eval (eval (c, s1), s2)
    | Skip               -> c
    | Read (name)        -> case readWorld (w) of [n, w] -> [s <- [name, n], w] esac
    | Write (e)          -> [s, writeWorld (evalExpr (s, e), w)]
    | If (e, st1, st2)   ->
      if evalExpr (s, e) != 0
        then eval (c, st1)
        else eval (c, st2)
      fi
    | While (e, st)      ->
      if evalExpr (s, e) != 0
        then eval (eval (c, st), stmt)
        else c
      fi
    | DoWhile (st, expr) ->
      case eval (c, st) of
        [state, world] ->
          if evalExpr (state, expr) != 0
            then eval ([state, world], stmt)
            else [state, world]
          fi
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
