-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var state = c[0];
  var world = c[1];

  case stmt of 
      Skip -> [state, world]
    | Assn  (var_name, expr) -> [state <- [var_name, evalExpr(state, expr)], world]
    | Seq   (stmt1, stmt2)   -> eval(eval(c, stmt1), stmt2)
    | Read  (var_name)          -> case readWorld(world) of [value, new_world]
                             -> [state <- [var_name, value], new_world] esac
    | Write (expr)           -> [state, writeWorld(evalExpr(state, expr), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
