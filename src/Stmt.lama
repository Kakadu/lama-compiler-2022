-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, w], stmt) {
  case stmt of
    Skip -> c
  | Seq (s1, s2) -> eval(eval(c, s1), s2)
  | Assn (v, e) -> [st <- [v, evalExpr(st, e)], w]
  | Read (v) -> case readWorld(w) of [inputV, newW] -> [st <- [v, inputV], newW] esac
  | Write (e) -> [st, writeWorld(evalExpr(st, e), w)]
  | If (e, s1, s2) -> if evalExpr(st, e) then eval(c, s1) else eval(c, s2) fi
  | While (e, s) -> if evalExpr(st, e) then eval(eval(c, s), stmt) else c fi
  | DoWhile (s, e) -> eval(eval(c, s), While (e, s))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
