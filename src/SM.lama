-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun evalNonControlFlowInstruction(c, instruction) {
  var stack = c[0];
  var state = c[1];
  var world = c[2];
  case instruction of
    BINOP (op) -> evalBinop (c, op)
  | CONST (v) -> [v:stack, state, world]
  | READ -> evalRead (c)
  | WRITE -> evalWrite (c)
  | LD (x) -> [state (x):stack, state, world]
  | ST (x) -> evalSt (c, x)
  | {} -> c
  | _ -> failure("Unknown stack machine instruction")
  esac
}

fun evalBinop ([x:y:stack, state, world], op) {
  [evalOp (op, y, x):stack, state, world]
}

fun evalRead ([stack, state, world]) {
  var res;
  res := readWorld(world);
  [res[0]:stack, state, res[1]]
}

fun evalWrite([x:stack, state, world]) {
  [stack, state, writeWorld(x, world)]
}

fun evalSt([v:stack, state, world], x) {
  [stack, state <- [x, v], world]
}

fun eval (env, c@[stack, state, world], insns) {
  case insns of
    {} -> c
  | JMP (lab) : _ -> eval (env, c, fromLabel (env, lab))
  | LABEL (lab) : other -> eval (env, c, other)
  | CJMP (cond, lab) : other ->
      case stack of
        n : stack ->
                    if case cond of "z" -> n == 0 | _ -> n != 0 esac then
                      eval (env, [stack, state, world], fromLabel (env, lab))
                    else
                      eval (env, [stack, state, world], other)
                    fi
      esac
  | i : other -> eval (env, evalNonControlFlowInstruction (c, i), other)
  esac
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> singletonBuffer (LD (x))
  | Const (n) -> singletonBuffer (CONST (n))
  | Binop (op, l, r) -> compileExpr (l) <+> compileExpr (r) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, true_stmt, false_stmt) ->
      case env.genLabel of
        [else_label, env] ->
          case compile (lab, env, true_stmt) of
            [_, env, true_stmt_code] ->
              case compile (lab, env, false_stmt) of
                [_, env, false_stmt_code] ->
                  [true, env, compileExpr (cond) <+
                              CJMP ("z", else_label) <+>
                              true_stmt_code <+
                              JMP (lab) <+
                              LABEL (else_label) <+>
                              false_stmt_code
                  ]
              esac
          esac
      esac
    | While (cond, body) ->
      case env.genLabels (2) of
        [body_lab, cond_lab, env] ->
          case compile (cond_lab, env, body) of
            [_, env, body_code] ->
              [false, env, singletonBuffer (JMP (cond_lab)) <+
                          LABEL (body_lab) <+>
                          body_code <+
                          LABEL (cond_lab) <+>
                          compileExpr (cond) <+
                          CJMP ("nz", body_lab)
              ]
          esac
      esac
    | DoWhile (body, cond) ->
      case env.genLabel of
        [body_lab, env] ->
          case compile (lab, env, body) of
            [_, env, body_code] ->
              [false, env, singletonBuffer (LABEL (body_lab)) <+>
                          body_code <+>
                          compileExpr (cond) <+
                          CJMP ("nz", body_lab)
              ]
          esac
      esac
    | _ -> failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
