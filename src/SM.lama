-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalIns (c, ins) {
  var s = c[0], st = c[1], w = c[2];

  case ins of
    BINOP (op) ->
      case s of x : y : tail -> [{ evalBinop (op, y, x) } +++ tail, st, w] esac
  | CONST (z)  -> [{ z } +++ s, st, w]
  | READ       -> case readWorld (w) of [value, w] -> [{ value } +++ s, st, w] esac
  | WRITE      -> case s of x : tail -> [tail, st, writeWorld (x, w)] esac
  | LD    (x)  -> [{ st (x) } +++ s, st, w]
  | ST    (x)  -> case s of z : tail -> [tail, st <- [x, z], w] esac
  esac
}

fun evalList (c, insns) {
  case insns of
    {} -> c
  | ins : tail -> evalList (evalIns (c, ins), tail)
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  evalList(c, getBuffer (insns))
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)            -> singletonBuffer (LD (x))
  | Const (n)            -> singletonBuffer (CONST (n))
  | Binop (str_op, x, y) -> compileExpr (x) <+> compileExpr (y) <+ BINOP (str_op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (var_name, expr) -> compileExpr (expr) <+ ST (var_name)
  | Seq   (stmt1, stmt2)   -> compileSM (stmt1) <+> compileSM (stmt2)
  | Skip                   -> emptyBuffer ()
  | Read  (var_name)       -> singletonBuffer (READ) <+ ST (var_name)
  | Write (expr)           -> compileExpr (expr) <+ WRITE
  esac
}
