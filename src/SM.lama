-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
-- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
      | Loc (i) -> locs[i]
      | Loc (i) -> locs[i]
      | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
      | Loc (i) -> locs[i] := vl
      | Glb (x) -> var g = deref (globalState);
      globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
        then [list, acc]
        else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      i : insns ->
        case i of
          BINOP (op) ->
            case st of
              y : x : st -> eval ([evalOp (op, x, y):st, cst, s, w], insns)
            esac
          | LD    (x) -> eval ([lookup (s, x):st, cst, s, w], insns)
          | LDA (x) -> eval ([x:st, cst, s, w], insns)
          | ST    (x) ->
            case st of
              z : _ -> assign (s, x, z); eval (c, insns)
            esac
          | STI ->
            case st of
              z : Ref(x) : st -> assign (s, x, z); eval ([z:st, cst, s, w], insns)
            esac
          | CONST (n) -> eval ([n:st, cst, s, w], insns)
          | LABEL (_) -> eval (c, insns)
          | JMP (l)        -> eval (c, fromLabel (env, l))
          | CJMP (cond, l) ->
            case [cond, st] of
              ["z", 0 : st]  -> eval([st, cst, s, w], env.fromLabel(l))
              | ["z", _ : st]  -> eval([st, cst, s, w], insns)
              | ["nz", 0 : st] -> eval([st, cst, s, w], insns)
              | ["nz", _ : st] -> eval([st, cst, s, w], env.fromLabel(l))
            esac
          | DROP           ->
            case st of
              _ : st -> eval ([st, cst, s, w], insns)
            esac
          | END ->
            case cst of
              { } -> c
              | [s, insns] : cst -> eval ([st, cst, s, w], insns)
            esac
          | DUP               -> case st of x : _ -> eval([x:st, cst, s, w], insns) esac
          | CALL (f, _) -> eval ([st, [s, insns]:cst, s, w], fromLabel (env, f))
          | BEGIN (_, na, nl) ->
            case take(st, na) of
              [st, as] ->
                var new = makeState(na, nl);
                foldl(fun (i, a) { assign(new, Arg(i), a); i + 1 }, 0, as);
                eval([st, cst, new, w], insns)
            esac
          | GLOBAL (x) -> assign (s, Glb (x), 0); eval (c, insns)
          | ARRAY (n) ->
            case take (st, n) of
              [st, elms] -> eval ([listArray (elms):st, cst, s, w], insns)
            esac
          | ELEM ->
            case st of
              i : arr : st -> eval ([
                (case arr of
                  arr@#array -> arr
                  | Sexp(_, arr) -> arr
                  | arr@#str -> arr
                esac)[i]:st, cst, s, w],
                insns
              )
            esac
          | STA ->
            case st of
              v : i : addr : st ->
                (case addr of
                  arr@#array -> arr[i] := v
                  | Sexp(_, arr) -> arr[i] := v
                  | arr@#str -> arr[i] := v
                  | x -> assign (s, x, v)
                esac);
                eval ([addr:st, cst, s, w], insns)
            esac
          | STRING (string) -> eval ([string:st, cst, s, w], insns)
          | BUILTIN (f, n) ->
            case take (st, n) of
              [st, args] ->
                case evalBuiltin (f, args, w) of
                  [v, w] -> eval ([v:st, cst, s, w], insns)
                esac
            esac
          | SEXP (x, n) ->
            case take (st, n) of
              [st, vs] -> eval ([Sexp (x, listArray (vs)):st, cst, s, w], insns)
            esac
        esac
      | { } -> c
    esac
  }


  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
      then singletonBuffer (LABEL (lab))
      else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip -> [false, env, emptyBuffer ()]
      | Var (x) -> [false, env, singletonBuffer (LD (lookupVal (env, x)))]
      | Ref (x) -> [false, env, singletonBuffer (LDA (lookupVar (env, x))) <+ DUP]
      | Const (n)             -> [false, env, singletonBuffer (CONST (n))]
      | Binop (op, l, r) ->
        case env.genLabels(2) of
          [rLab, opLab, env] ->
            case compile(rLab, env, l) of
              [rLabUsed, env, lCode] ->
                case compile(opLab, env, r) of
                  [opLabUsed, env, rCode] -> [false, env,
                    lCode
                      <+> label(rLab, rLabUsed)
                      <+> rCode
                      <+> label(opLab, opLabUsed)
                      <+ BINOP(op)
                  ]
                esac
            esac
        esac
      | Ignore (e)       ->
        case env.genLabel of
          [dropLab, env] ->
            case compile(dropLab, env, e) of
              [dropLabUsed, env, code] -> [false, env,
                code
                  <+> label(dropLab, dropLabUsed)
                  <+ DROP
              ]
            esac
        esac
      | Assn (Ref(l), r) -> compile (lab, env, Set (l, r))
      | Assn (l, r)      ->
        case env.genLabels(2) of
          [rLab, stLab, env] ->
            case compile(rLab, env, l) of
              [rLabUsed, env, lCode] ->
                case compile(stLab, env, r) of
                  [stLabUsed, env, rCode] -> [false, env,
                    lCode
                      <+>
                      label(rLab, rLabUsed)
                      <+> rCode
                      <+> label(stLab, stLabUsed)
                      <+ STA
                  ]
                esac
            esac
        esac
      | Seq (s1, s2)     ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | While (e, s)     ->
        case env.genLabels(3) of
          [condLab, bodyLab, cjmpLab, env] ->
            case compile(condLab, env, s) of
              [condLabUsed, env, bodyCode] ->
                case compile(cjmpLab, env, e) of
                  [cjmpLabUsed, env, condCode] -> [false, env,
                    singletonBuffer(JMP(condLab))
                      <+ LABEL(bodyLab)
                      <+> bodyCode
                      <+ LABEL(condLab)
                      <+> condCode
                      <+> label(cjmpLab, cjmpLabUsed)
                      <+ CJMP("nz", bodyLab)
                  ]
                esac
            esac
        esac
      | DoWhile (s, e)   ->
        case env.genLabels(3) of
          [condLab, bodyLab, cjmpLab, env] ->
            case compile(condLab, env, s) of
              [condLabUsed, env, bodyCode] ->
                case compile(cjmpLab, env, e) of
                  [cjmpLabUsed, env, condCode] -> [false, env,
                    singletonBuffer(LABEL(bodyLab))
                      <+> bodyCode
                      <+> label(condLab, condLabUsed)
                      <+> condCode
                      <+> label(cjmpLab, cjmpLabUsed)
                      <+ CJMP("nz", bodyLab)
                  ]
                esac
            esac
        esac
      | If (e, s1, s2)   ->
        case env.genLabels(2) of
          [cjmpLab, elseLab, env] ->
            case compile(cjmpLab, env, e) of
              [cjmpLabUsed, env, condCode] ->
                case compile(lab, env, s1) of
                  [labUsed, env, mainCode] ->
                    case compile(lab, env, s2) of
                      [labUsed, env, elseCode] -> [true, env,
                        condCode
                          <+> label(cjmpLab, cjmpLabUsed)
                          <+ CJMP("z", elseLab)
                          <+> mainCode
                          <+ JMP(lab)
                          <+ LABEL(elseLab)
                          <+> elseCode
                      ]
                    esac
                esac
            esac
        esac
      | Call (f, args) ->
        case lookupFun (env, f) of
          Fun (fLab, nParams) ->
            if size (args) != nParams then
              error (sprintf ("expected %d arguments for function ""%s"", but found %d", nParams, f, size (args)), getLoc (f))
            fi;
            case genLabel (env) of
              [callLab, env] ->
                case compile (callLab, env, foldl (
                  fun (acc, arg) { Seq (acc, arg) },
                  Skip,
                  args
                )) of
                  [callLabUsed, env, argsCode] ->
                    if (compare (fLab[0], '$') == 0) then
                      case compile (lab, env, Builtin (f, args)) of
                        [labUsed, env, code] -> [labUsed, env, argsCode <+> label (callLab, callLabUsed) <+> code]
                      esac
                      else
                        [false, env, argsCode <+> label (callLab, callLabUsed) <+ CALL (fLab, nParams)]
                    fi
                esac
            esac
        esac
      | Scope (defs, e) ->
        case foldl (fun ([env, funs, globals], def) {
          case def of
            Var (names) -> [addVars (env, names), funs, if isGlobal (env) then names +++ globals else globals fi]
            | Fun (name, params, body) ->
              case genFunLabel (env, name) of
                [fLab, env] -> [addFun (env, name, fLab, size (params)), [fLab, params, body]:funs, globals]
              esac
          esac
        }, [beginScope (env), { }, { }], defs) of
          [env, funs, globals] ->
            case compile (lab, foldl (
              fun (env, [fLab, params, body]) { rememberFun (env, fLab, params, body) },
              env,
              funs
            ), e) of
              [labUsed, env, code] -> [labUsed, endScope (env),
                map (fun (name) { GLOBAL (name) }, globals).listBuffer
                  <+> code
              ]
            esac
        esac
      | Array (arr) ->
        case genLabel (env) of
          [arrLab, env] ->
            case compile (arrLab, env, foldl (
              fun (acc, arg) { Seq (acc, arg) },
              Skip,
              arr
            )) of
              [arrLabUsed, env, code] -> [false, env, code <+> label (arrLab, arrLabUsed) <+ ARRAY (size (arr))]
            esac
        esac
      | Elem (arr, i) ->
        case genLabel (env) of
          [elemLab, env] ->
            case compile (elemLab, env, ElemRef (arr, i)) of
              [elemLabUsed, env, code] -> [false, env, code
                <+> label (elemLab, elemLabUsed)
                <+ ELEM
              ]
            esac
        esac
      | ElemRef (arr, i) ->
        case genLabel (env) of
          [iLab, env] ->
            case compile (iLab, env, arr) of
              [iLabUsed, env, arrCode] ->
                case compile (lab, env, i) of
                  [labUsed, env, iCode] -> [labUsed, env, arrCode
                    <+> label (iLab, iLabUsed)
                    <+> iCode
                  ]
                esac
            esac
        esac
      | Builtin (f, as) ->
        case lookupFun (env, f) of
          Fun (fLab, nArgs) -> [false, env, singletonBuffer $ BUILTIN (substring (fLab, 1, length (fLab) - 1), nArgs)]
        esac
      | String (string) -> [false, env, singletonBuffer (STRING (string))]
      | Set (x, e) ->
        case genLabel (env) of
          [setLab, env] ->
            case compile (setLab, env, e) of
              [setLabUsed, env, code] -> [false, env, code
                <+> label (setLab, setLabUsed)
                <+ ST (lookupVar (env, x))]
            esac
        esac
      | Sexp (x, es) ->
        case genLabel (env) of
          [sexpLab, env] ->
            case compile (sexpLab, env, foldl (
              fun (acc, arg) { Seq (acc, arg) },
              Skip,
              es
            )) of
              [sexpLabUsed, env, elmsCode] -> [false, env, elmsCode
                <+> label (sexpLab, sexpLabUsed)
                <+ SEXP (x, size (es))]
            esac
        esac
    esac
  }

  fun compileFuns (env) {
    fun compileFun (env, f) {
      case f of
        Fun(fLab, params, body, state) ->
          case genLabel (addArgs (beginFun (env, state), params)) of
            [endLab, env] ->
              case compile (endLab, env, body) of
                [endLabUsed, env, code] ->
                  listBuffer ({
                    LABEL (fLab),
                    BEGIN (fLab, size (params), getLocals (env)) })
                    <+> code
                    <+> label (endLab, endLabUsed)
                    <+ END
              esac
          esac
      esac
    }
    fun rec(env, fs, alreadyCompiled) {
      case fs of
        { } ->
          case getFuns (env) of
            [{}, env] -> alreadyCompiled
            | [fs, env] -> rec(env, fs, alreadyCompiled)
          esac
        | _ -> foldl(
          fun (acc, f) { acc <+> compileFun(env, f) },
          alreadyCompiled,
          fs
        )
      esac
    }
    rec(env, { }, emptyBuffer ())
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
    .addFun ("write" , "$write" , 1)
    .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, env, code] ->
          getBuffer $
            listBuffer ({
              LABEL ("main"),
              BEGIN ("main", 0, getLocals (env))
            })
            <+> code
            <+> label (endLab, endLabUsed)
            <+ END
            <+> compileFuns (env)
      esac
  esac
}