-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
      READ         -> "READ"
    | WRITE        -> "WRITE"
    | BINOP (s)    -> sprintf ("BINOP %s", s)
    | LD    (x)    -> sprintf ("LD %s", x)
    | LDA   (x)    -> sprintf ("LDA %s", x)
    | ST    (x)    -> sprintf ("ST %s", x)
    | STI          -> "STI"
    | CONST (n)    -> sprintf ("CONST %d", n)
    | LABEL (s)    -> sprintf ("LABEL %s", s)
    | JMP   (l)    -> sprintf ("JMP %s", l)
    | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
    | DUP          -> "DUP"
    | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
      fun ([m, insns]) {
        case insns of
            {}               -> m
          | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
          | _ : tl           -> rec ([m, tl])
        esac
      }
    }) $ [emptyMap (compare), insns];

  [fun (l) {
    case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  fun eval (c@[stack, state, world], insns) {
    case insns of
        {}                       -> c
      | JMP   (lab) : _          -> eval (c, fromLabel (env, lab))
      | CJMP (cond, lab) : insns ->
        case stack of
          n : st -> if case cond of "z" -> n == 0 | _   -> n != 0 esac
                      then eval ([st, state, world], fromLabel (env, lab))
                      else eval ([st, state, world], insns)
                    fi
        esac
      | i : insns                ->
        eval (
          case i of
              CONST (n) -> [n:stack, state, world]
            | BINOP (s) -> case stack of x : y : tl -> [evalOp (s, y, x):tl, state, world] esac
            | READ      -> case readWorld (world) of [v, world] -> [v:stack, state, world] esac
            | WRITE     -> case stack of n : tl -> [tl, state, writeWorld (n, world)] esac
            | LD (x)    -> [state (x):stack, state, world]
            | LDA (x)   -> [x:stack, state, world]
            | ST (x)    -> case stack of n : tl -> [tl, state <- [x, n], world] esac
            | STI       -> case stack of v : x : vals -> [v:vals, state <- [x, v], world] esac
            | LABEL (s) -> c
            | DROP      -> case stack of _ : vals -> [vals, state, world] esac
            | DUP       -> case stack of v : vals -> [v:v:vals, state, world] esac
          esac,
          insns
        )
    esac
  }
  eval (c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
    [sprintf ("L%d", n), makeCompEnv (n + 1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
      then {env}
      else case env.genLabel of
             [lab, env] -> lab:inner (env, n - 1)
           esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
      then singletonBuffer (LABEL (lab))
      else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
        Skip                 -> [false, env, emptyBuffer ()]
      | Var    (x)           -> [false, env, singletonBuffer (LD (x))]
      | Ref    (x)           -> [false, env, singletonBuffer (LDA (x))]
      | Const  (n)           -> [false, env, singletonBuffer (CONST (n))]
      | Read  (x)            -> [false, env, singletonBuffer (READ) <+ ST (x)]
      | Write (e)            -> case env.genLabel of
                                  [lab, env] ->
                                    case compile (lab, env, e) of
                                      [labUsed, env, code] -> [false, env, code <+> label (lab, labUsed) <+ WRITE]
                                    esac
                                esac
      | Assn  (x, e)         -> case env.genLabels (2) of
                                  [xLab, eLab, env] ->
                                    case compile (xLab, env, x) of
                                      [xLabUsed, env, xCode] ->
                                        case compile (eLab, env, e) of
                                          [labUsed, env, eCode] -> [
                                            false,
                                            env,
                                            xCode <+> label (xLab, xLabUsed) <+> eCode <+> label (eLab, labUsed) <+ STI
                                          ]
                                        esac
                                    esac
                                esac
      | Seq   (s1, s2)       ->
        case env.genLabel of
          [s2Lab, env] -> case compile (s2Lab, env, s1) of
                            [s2LabUsed, env, s1Code] ->
                              case compile (lab, env, s2) of
                                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                              esac
                          esac
        esac
      | While (cond, body)     ->
        case env.genLabels(3) of
          [condLab, bodyLab, cjmpLab, env] ->
            case compile(condLab, env, body) of
              [_, env, bodyCode] ->
                case compile(cjmpLab, env, cond) of
                  [cjmpLabUsed, env, condCode] ->
                    [
                      false,
                      env,
                      singletonBuffer(JMP(condLab))
                        <+ LABEL(bodyLab)
                        <+> bodyCode
                        <+ LABEL(condLab)
                        <+> condCode
                        <+> label(cjmpLab, cjmpLabUsed)
                        <+ CJMP("nz", bodyLab)
                    ]
                esac
            esac
        esac
      | DoWhile (body, cond)   ->
        case env.genLabels(3) of
          [condLab, bodyLab, cjmpLab, env] ->
            case compile(condLab, env, body) of
              [condLabUsed, env, bodyCode] ->
                case compile(cjmpLab, env, cond) of
                  [cjmpLabUsed, env, condCode] ->
                    [
                      false,
                      env,
                      singletonBuffer(LABEL(bodyLab))
                        <+> bodyCode
                        <+> label(condLab, condLabUsed)
                        <+> condCode
                        <+> label(cjmpLab, cjmpLabUsed)
                        <+ CJMP("nz", bodyLab)
                    ]
                esac
            esac
        esac
      | If (cond, body, el)   ->
        case env.genLabels(2) of
          [cjmpLab, elseLab, env] ->
            case compile(cjmpLab, env, cond) of
              [cjmpLabUsed, env, condCode] ->
                case compile(lab, env, body) of
                  [_, env, mainCode] ->
                    case compile(lab, env, el) of
                      [_, env, elseCode] ->
                        [
                          true,
                          env,
                          condCode
                            <+> label(cjmpLab, cjmpLabUsed)
                            <+ CJMP("z", elseLab)
                            <+> mainCode
                            <+ JMP(lab)
                            <+ LABEL(elseLab)
                            <+> elseCode
                        ]
                    esac
                esac
            esac
        esac
      | Ignore (e)           ->
        case env.genLabel of
          [lab, env] ->
            case compile (lab, env, e) of
              [labUsed, env, eCode] -> [false, env, eCode <+> label (lab, labUsed) <+ DROP]
            esac
        esac
      | Binop (op, l, r)     ->
        case env.genLabels (2) of
          [rLab, opLab, env] ->
            case compile (rLab, env, l) of
              [rLabUsed, env, lCode] ->
                case compile (opLab, env, r) of
                  [opLabUsed, env, rCode] ->
                    [false, env, lCode <+> label (rLab, rLabUsed) <+> rCode <+> label (opLab, opLabUsed) <+ BINOP (op)]
                esac
            esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
      esac
  esac
}
