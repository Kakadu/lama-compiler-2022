-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun insType (i) {
  case i of
    JMP (_)     -> Jumping
  | CJMP (_, _) -> Jumping
  | CALL (_, _) -> Jumping
  | END         -> Jumping
  | _           -> NonJumping
  esac
}

fun confStackPop([v : st, cst, s, w]) {
  [v, [st, cst, s, w]]
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun insnsAfterCondJump(value, cond, lab, oldInsns) {
    if (compare(cond, "z") == 0 && value == 0) !! (compare(cond, "nz") == 0 && value) then
      fromLabel(env, lab)
    else
      oldInsns
    fi
  }

  fun execSMIns(c@[st, cst, s, w], i) {
    case i of
      READ      -> case readWorld(w) of [v, w] -> [v : st, cst, s, w] esac
    | WRITE     -> case st of v : st -> [st, cst, s, writeWorld(v, w)] esac
    | BINOP (o) -> case st of v2 : v1 : st -> [evalOp(o, v1, v2) : st, cst, s, w] esac
    | LD    (x) -> [lookup(s, x) : st, cst, s, w]
    | LDA   (x) -> [x : st, cst, s, w]
    | ST    (x) -> case st of v : _ -> assign(s, x, v); c esac
    | STI       -> case st of v : x : st -> assign(s, x, v); [v : st, cst, s, w] esac
    | CONST (n) -> [n : st, cst, s, w]
    | DUP       -> case st of v : st -> [v : v : st, cst, s, w] esac
    | DROP      -> case st of v : st -> [st, cst, s, w] esac
    | LABEL (_) -> c
    | BEGIN (_, nargs, nlocs) ->
        fun prepareState(s) {
          fun putArg (i, arg) {
            assign(s, Arg(i), arg); i + 1
          }

          case take(st, nargs) of [st, args] ->
            foldl(putArg, 0, args); [st, cst, s, w]
          esac
        }

        prepareState(makeState(nargs, nlocs))
    | GLOBAL (x) -> assign(s, Glb(x), 0); c
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun evalOneStep ([c@[st, cst, s, w], insns, _]) {
    case insns of
      {}        -> [c, {}, Stop]
    | i : insns ->
        case insType(i) of
          NonJumping -> [execSMIns(c, i), insns, Cont]
        | Jumping    ->
            case i of
              JMP  (l)    -> [c, fromLabel(env, l), Cont]
            | CJMP (s, l) ->
                case confStackPop(c) of [v, c] ->
                  [c, insnsAfterCondJump(v, s, l, insns), Cont]
                esac
            | CALL (f, _) -> [[st, [s, insns] : cst, s, w], fromLabel(env, f), Cont]
            | END ->
                case cst of
                  {} -> [c, {}, Stop]
                | [s, insns] : cst -> [[st, cst, s, w], insns, Cont]
                esac
            esac
        esac
    esac
  }

  fun shouldCont([_, _, x]) {
    case x of
      Stop -> false
    | Cont -> true
    esac
  }

  fun eval (c, insns) {
    fun eval(arg) {
      do arg := evalOneStep(arg) while shouldCont(arg) od; arg[0]
    }

    eval([c, insns, Cont])
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x) -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Binop (op, l, r) ->
        case env.genLabels(2) of [lEnd, rEnd, env] ->
          case compile(lEnd, env, l) of [lEndUsed, env, lCode] ->
            case compile(rEnd, env, r) of [rEndUsed, env, rCode] ->
              [false, env, lCode
                           <+> label(lEnd, lEndUsed)
                           <+> rCode
                           <+> label(rEnd, rEndUsed)
                           <+  BINOP(op)]
            esac
          esac
        esac
    | Write (e) ->
        case env.genLabel of [eEnd, env] ->
          case compile(eEnd, env, e) of [eEndUsed, env, eCode] ->
            [false, env, eCode <+> label(eEnd, eEndUsed) <+ WRITE]
          esac
        esac
    | Assn (x, e) ->
        case env.genLabels(2) of [xEnd, eEnd, env] ->
          case compile(xEnd, env, x) of [xEndUsed, env, xCode] ->
            case compile(eEnd, env, e) of [eEndUsed, env, eCode] ->
              [false, env, xCode
                           <+> label(xEnd, xEndUsed)
                           <+> eCode
                           <+> label(eEnd, eEndUsed)
                           <+  STI]
            esac
          esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile(s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, sTrue, sFalse) ->
        case env.genLabels(3) of [sTrueEnd, sFalseStart, condEnd, env] ->
          case compile(sTrueEnd, env, sTrue) of [sTrueEndUsed, env, sTrueCode] ->
            case compile(lab, env, sFalse) of [labUsed, env, sFalseCode] ->
              case compile(condEnd, env, cond) of [condEndUsed, env, condCode] ->
                [true, env, condCode
                            <+> label(condEnd, condEndUsed)
                            <+  CJMP ("z", sFalseStart)
                            <+> sTrueCode
                            <+> label(sTrueEnd, sTrueEndUsed)
                            <+  JMP(lab)
                            <+  LABEL(sFalseStart)
                            <+> sFalseCode]
              esac
            esac
          esac
        esac
    | While (cond, body) ->
        case env.genLabels(3) of [condStart, bodyEnd, condEnd, env] ->
          case compile(bodyEnd, env, body) of [bodyEndUsed, env, bodyCode] ->
            case compile(condEnd, env, cond) of [condEndUsed, env, condCode] ->
              [true, env, singletonBuffer(LABEL(condStart))
                          <+> condCode
                          <+> label(condEnd, condEndUsed)
                          <+  CJMP("z", lab)
                          <+> bodyCode
                          <+> label(bodyEnd, bodyEndUsed)
                          <+  JMP(condStart)]
            esac
          esac
        esac
    | DoWhile (body, cond) ->
        case env.genLabels(3) of [bodyStart, bodyEnd, condEnd, env] ->
          case compile(bodyEnd, env, body) of [bodyEndUsed, env, bodyCode] ->
            case compile(condEnd, env, cond) of [condEndUsed, env, condCode] ->
              [false, env, singletonBuffer(LABEL(bodyStart))
                           <+> bodyCode
                           <+> label(bodyEnd, bodyEndUsed)
                           <+> condCode
                           <+> label(condEnd, condEndUsed)
                           <+  CJMP ("nz", bodyStart)]
            esac
          esac
        esac
    | Ignore (e) ->
        case env.genLabel of [eEnd, env] ->
          case compile(eEnd, env, e) of [eEndUsed, env, eCode] ->
            [false, env, eCode <+> label(eEnd, eEndUsed) <+ DROP]
          esac
        esac
    | Scope (Var(vdefs) : fdefs, e) ->
        fun doExit([labUsed, env, code], vdefs) {
          fun addGlobalVarDec(code, vdef) {
            singletonBuffer(GLOBAL(vdef)) <+> code
          }

          if isGlobal(env) then
            [labUsed, env, foldl(addGlobalVarDec, code, vdefs)]
          else
            [labUsed, endScope(env), code]
          fi
        }

        fun addFunDec(env, Fun (f, args, _)) {
          case genFunLabel(env, f) of [fl, env] ->
            addFun(env, f, fl, size(args))
          esac
        }

        fun addFunDef(env, Fun (f, args, body)) {
          case lookupFun(env, f) of Fun(f, _) ->
            rememberFun(env, f, args, body)
          esac
        }

        doExit(compile(lab, foldl(addFunDef, foldl(addFunDec, foldl(addVar, beginScope(env), vdefs), fdefs), fdefs), e), vdefs)
    | Call (f, args) ->
        case lookupFun(env, f) of Fun(f, nargs) ->
          fun putArg ([env, code], arg) {
            case env.genLabel of [argLab, env] ->
              case compile(argLab, env, arg) of [argLabUsed, env, argCode] ->
                [env, code <+> argCode <+> label(argLab, argLabUsed)]
              esac
            esac
          }

          case foldl(putArg, [env, emptyBuffer()], args) of [env, code] -> [false, env, code <+ CALL(f, nargs)] esac
        esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of [endLabUsed, env, code] ->
        fun addFunDefs(p@[env, code]) {
          fun compileFun([env, code], Fun(f, args, body, state)) {
            case genLabel(foldl(addArg, beginFun(env, state), args)) of [fLab, env] ->
              case compile(fLab, env, body) of [fLabUsed, env, fCode] ->
                [env, code <+ LABEL(f) <+ BEGIN(f, size(args), env.getLocals) <+> fCode <+> label(fLab, fLabUsed) <+ END]
              esac
            esac
          }

          case env.getFuns of
            [{}, env]   -> p
          | [funs, env] -> addFunDefs(foldl(compileFun, [env, code], funs))
          esac
        }

        case addFunDefs([env, listBuffer({LABEL("main"), BEGIN("main", 0, env.getLocals)})
                              <+> code <+> label(endLab, endLabUsed) <+ END]) of
          [env, code] -> getBuffer(code)
        esac
      esac
  esac
}
