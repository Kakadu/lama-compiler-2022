-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, w], insns) {
  fun evalInstruction(c, insn) {
    case insn of
      READ           -> (
        case w.readWorld of [value, newW] -> [value:stack, state, newW] esac
      )
      | WRITE        -> (
        case stack of
          v : tl -> [tl, state, writeWorld(v, w)]
        esac
      )
      | BINOP(binop) -> (
        var rArg = stack.hd;
        var temp = stack.tl;
        var lArg = temp.hd;
        var stackTail = temp.tl;
        var value = evalOp(binop, lArg, rArg);
        [value:stackTail, state, w]
      )
      | LD (x)       -> [state(x):stack, state, w]
      | LDA (x)      -> [LValue(x):stack, state, w]
      | STI          -> case stack of
        z : LValue(x) : tl -> [z:tl, state <- [x, z], w]
      esac
      | ST (x)       -> (
        case stack of
          v : tl -> [stack, state <- [x, v], w]
        esac
      )
      | CONST (n)    -> [n:stack, state, w]
      | LABEL (_)    -> [stack, state, w]
    esac
  }
  case insns of
    { }               -> c
    | insn : insnRest ->
      case insn of
        CJMP (c, lab) ->
          case [c, stack] of
            ["z", 0 : tl]    -> eval(env, [tl, state, w], env.fromLabel(lab))
            | ["z", _ : tl]  -> eval(env, [tl, state, w], insnRest)
            | ["nz", 0 : tl] -> eval(env, [tl, state, w], insnRest)
            | ["nz", _ : tl] -> eval(env, [tl, state, w], env.fromLabel(lab))
          esac
        | JMP (lab)   -> eval(env, c, fromLabel(env, lab))
        | DROP        -> case stack of _ : tl -> eval(env, [tl, state, w], insnRest) esac
        | _           -> (
          var temp = evalInstruction(c, insn);
          eval(env, temp, insnRest)
        )
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
    Const (n)                 -> singletonBuffer(CONST(n))
    | Var (x)                   -> singletonBuffer(LD(x))
    | Binop (binop, lexp, rexp) -> compileExpr(lexp) <+> compileExpr(rexp) <+ BINOP(binop)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Read (x) -> [false, env, listBuffer({ READ, ST(x), DROP })]
    | Write (e)        ->
      case env.genLabel of
        [writeLab, env] ->
          case compile(writeLab, env, e) of
            [writeLabUsed, env, code] -> [false, env,
              code
                <+> label(writeLab, writeLabUsed)
                <+ WRITE
            ]
          esac
      esac
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Assn (l, r)      ->
      case env.genLabels(2) of
        [rLab, stLab, env] ->
          case compile(rLab, env, l) of
            [rLabUsed, env, lCode] ->
              case compile(stLab, env, r) of
                [stLabUsed, env, rCode] -> [false, env,
                  lCode
                    <+>
                    label(rLab, rLabUsed)
                    <+> rCode
                    <+> label(stLab, stLabUsed)
                    <+ STI
                ]
              esac
          esac
      esac
    | Binop (op, l, r) ->
      case env.genLabels(2) of
        [rLab, opLab, env] ->
          case compile(rLab, env, l) of
            [rLabUsed, env, lCode] ->
              case compile(opLab, env, r) of
                [opLabUsed, env, rCode] -> [false, env,
                  lCode
                    <+> label(rLab, rLabUsed)
                    <+> rCode
                    <+> label(opLab, opLabUsed)
                    <+ BINOP(op)
                ]
              esac
          esac
      esac
    | Ignore (e)       ->
      case env.genLabel of
        [dropLab, env] ->
          case compile(dropLab, env, e) of
            [dropLabUsed, env, code] -> [false, env,
              code
                <+> label(dropLab, dropLabUsed)
                <+ DROP
            ]
          esac
      esac
    | Seq   (s1, s2) ->
      case env.genLabel of
        [s2Lab, env] ->
          case compile (s2Lab, env, s1) of
            [s2LabUsed, env, s1Code] ->
              case compile (lab, env, s2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
              esac
          esac
      esac
      | While (e, s)     ->
        case env.genLabels(3) of
          [condLab, bodyLab, cjmpLab, env] ->
            case compile(condLab, env, s) of
              [condLabUsed, env, bodyCode] ->
                case compile(cjmpLab, env, e) of
                  [cjmpLabUsed, env, condCode] -> [false, env,
                    singletonBuffer(JMP(condLab))
                      <+ LABEL(bodyLab)
                      <+> bodyCode
                      <+ LABEL(condLab)
                      <+> condCode
                      <+> label(cjmpLab, cjmpLabUsed)
                      <+ CJMP("nz", bodyLab)
                  ]
                esac
            esac
        esac
      | If (e, s1, s2)   ->
        case env.genLabels(2) of
          [cjmpLab, elseLab, env] ->
            case compile(cjmpLab, env, e) of
              [cjmpLabUsed, env, condCode] ->
                case compile(lab, env, s1) of
                  [labUsed, env, mainCode] ->
                    case compile(lab, env, s2) of
                      [labUsed, env, elseCode] -> [true, env,
                        condCode
                          <+> label(cjmpLab, cjmpLabUsed)
                          <+ CJMP("z", elseLab)
                          <+> mainCode
                          <+ JMP(lab)
                          <+ LABEL(elseLab)
                          <+> elseCode
                      ]
                    esac
                esac
            esac
        esac
      | DoWhile (s, e)   ->
        case env.genLabels(3) of
          [condLab, bodyLab, cjmpLab, env] ->
            case compile(condLab, env, s) of
              [condLabUsed, env, bodyCode] ->
                case compile(cjmpLab, env, e) of
                  [cjmpLabUsed, env, condCode] -> [false, env,
                    singletonBuffer(LABEL(bodyLab))
                      <+> bodyCode
                      <+> label(condLab, condLabUsed)
                      <+> condCode
                      <+> label(cjmpLab, cjmpLabUsed)
                      <+ CJMP("nz", bodyLab)
                  ]
                esac
            esac
        esac
    | _              -> failure("compileSM not implemented for %s\n", stmt.string)
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
       esac
  esac
}
