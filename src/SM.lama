-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
-- Shows a location (a reference to function argument, local or global variable)
  fun showLoc(d) {
    case d of
        Arg (i) -> sprintf("arg[%d]", i)
      | Loc (i) -> sprintf("loc[%d]", i)
      | Glb (x) -> x
    esac
  }
  
  case i of
      READ             -> "READ"
    | WRITE            -> "WRITE"
    | BINOP  (s)       -> sprintf("BINOP %s", s)
    | LD     (x)       -> sprintf("LD %s", showLoc(x))
    | LDA    (x)       -> sprintf("LDA %s", showLoc(x))
    | ST     (x)       -> sprintf("ST %s", showLoc(x))
    | STI              -> "STI"
    | CONST  (n)       -> sprintf("CONST %d", n)
    | LABEL  (s)       -> sprintf("LABEL %s", s)
    | JMP    (l)       -> sprintf("JMP %s", l)
    | CJMP   (c, l)    -> sprintf("CJMP %s, %s", c, l)
    | CALL   (f, n)    -> sprintf("CALL %s, %d", f, n)
    | BEGIN  (f, a, l) -> sprintf("BEGIN %s, %d, %d", f, a, l)
    | GLOBAL (x)       -> sprintf("GLOBAL %s", x)
    | END              -> sprintf("END")
    | DUP              -> "DUP"
    | DROP             -> "DROP"
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
            { }              -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];
  
  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval(env, w, insns) {
-- Global state maps names of global variables to values
  var globalState = ref(fun (x) { error(sprintf("name ""%s"" is undefined", x), getLoc(x)) });
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState(a, l) {
    [initArray(a, fun (_) { 0 }), initArray(l, fun (_) { 0 })]
  }
  
  -- Lookups a location in local/global states
  fun lookup([args, locs], loc) {
    case loc of
        Arg (i) -> args[i]
      | Loc (i) -> locs[i]
      | Glb (x) -> deref(globalState)(x)
    esac
  }
  
  -- Assigns a value to a location
  fun assign([args, locs], loc, v) {
    case loc of
        Arg (i) -> args[i] := v
      | Loc (i) -> locs[i] := v
      | Glb (x) -> var g = deref(globalState);
      globalState ::= fun (y) { if compare(x, y) == 0 then v else g(y) fi }
    esac
  }
  
  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take(list, n) {
    fun inner(n, acc, list) {
      if n == 0
        then [list, acc]
        else inner(n - 1, list.hd:acc, list.tl)
      fi
    }
    
    inner(n, { }, list)
  }
  
  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  -- stack, call stack, state, world and program
  fun eval(c@[st, cst, s, w], insns) {
    case insns of
        { }           -> c
      | isn : program ->
        case isn of
            { }                     -> c
          | CONST (n)               -> eval([n:st, cst, s, w], program)
          | GLOBAL (x)              -> assign(s, Glb(x), 0); eval(c, program)
          | BINOP (op)              ->
            case st of
              y : x : st -> eval([evalOp(op, x, y):st, cst, s, w], program)
            esac
          | READ                    ->
            case readWorld(w) of
              [x, new_w] -> eval([x:st, cst, s, new_w], program)
            esac
          | WRITE                   ->
            case st of
              h : t -> eval([t, cst, s, writeWorld(h, w)], program)
            esac
          | DROP                    ->
            case st of
              _ : t -> eval([t, cst, s, w], program)
            esac
          | LD (x)                  -> eval([lookup(s, x):st, cst, s, w], program)
          | LDA (x)                 -> eval([x:st, cst, s, w], program)
          | ST (x)                  ->
            case st of
              h : _ -> (
                assign(s, x, h);
                eval(c, program)
              )
            esac
          | STI                     ->
            case st of
              n : x : t -> (
                assign(s, x, n);
                eval([n:t, cst, s, w], program)
              )
            esac
          | LABEL (_)               -> eval(c, program)
          | JMP (l)                 -> eval(c, fromLabel(env, l))
          | CJMP (cond, l)          ->
            case [cond, st] of
                ["z", h : t]  -> (
                  if (h == 0)
                    then eval([t, cst, s, w], fromLabel(env, l))
                    else eval([t, cst, s, w], program)
                  fi
                )
              | ["nz", h : t] -> (
                if (h != 0)
                  then eval([t, cst, s, w], fromLabel(env, l))
                  else eval([t, cst, s, w], program)
                fi
              )
            esac
          | CALL (f, _)             -> eval([st, [s, program]:cst, s, w], fromLabel(env, f))
          | BEGIN (_, nargs, nlocs) ->
            case take(st, nargs) of
              [new_stack, args] ->
                var new_state = makeState(nargs, nlocs);
                foldl(
                  fun (i, a) {
                    assign(new_state, Arg(i), a); i + 1
                  },
                  0,
                  args);
                eval([new_stack, cst, new_state, w], program)
            esac
          | END                     ->
            case cst of
                { }                    -> c
              | [s_prev, p] : cst_prev -> eval([st, cst_prev, s_prev, w], p)
            esac
          | _                       -> failure("Unxepcted instruction %s in SM eval. tail is %s\n", isn.string, program.string)
        esac
    esac
  }
  (* End *)
  
  eval([{ }, { }, makeState(0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), createWorld(input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions) {
-- Generates a new label
  fun genLabel() {
    [sprintf("L%d", nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
  }
  
  -- Adds a new function
  fun rememberFun(fLabel, args, body) {
    makeCompEnv(nLabels,
      scopeDepth,
      state,
      nLocals,
      nArgs,
      Fun(fLabel, args, body, state):functions)
  }
  
  -- Enters a local scope
  fun beginScope() {
    makeCompEnv(nLabels, scopeDepth + 1, enterScope(state), nLocals, nArgs, functions)
  }
  
  -- Leaves a local scope
  fun endScope() {
    makeCompEnv(nLabels, scopeDepth - 1, leaveScope(state), nLocals, nArgs, functions)
  }
  
  -- Adds an argument for the current function
  fun addArg(name) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Arg(nArgs)), nLocals, nArgs + 1, functions)
  }
  
  -- Adds a local variable for the current function
  fun addVar(name) {
    if scopeDepth == 1
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals)), nLocals + 1, nArgs, functions)
    fi
  }
  
  -- Adds a binding for a function
  fun addFun(name, fLabel, nargs) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Fun(fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun(state) {
    makeCompEnv(nLabels, 1, enterFunction(state), 0, 0, functions)
  }
  
  -- Get functions and empty functions list
  fun getFuns() {
    [functions, makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, { })]
  }
  
  -- Lookups a name of a variable
  fun lookupVar(name) {
    case lookup(state, name) of
        Fun (_, _) -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
      | x          -> x
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun(name) {
    case lookup(state, name) of
        x@Fun (_, _) -> x
      | _            -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
    esac
  }
  
  -- Gets the number of local variables
  fun getLocals() {
    nLocals
  }
  
  -- Generates an intrinsic function name
  fun genFunLabel(name) {
    if scopeDepth == 1
      then [sprintf("L%s", name), makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions)]
      else [sprintf("L%s_%d", name, nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
    fi
  }
  
  -- Checks if the current scope is a global
  fun isGlobal() {
    scopeDepth == 1
  }
  
  [genLabel,
    rememberFun,
    beginScope,
    endScope,
    addArg,
    addVar,
    beginFun,
    getFuns,
    lookupVar,
    lookupFun,
    getLocals,
    genFunLabel,
    addFun,
    isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv() {
  makeCompEnv(0, 0, emptyState(), 0, 0, { })
}

-- Accessor functions
fun genLabel(env) {
  env [0]()
}

fun rememberFun(env, name, args, body) {
  env [1](name, args, body)
}

fun beginScope(env) {
  env [2]()
}

fun endScope(env) {
  env [3]()
}

fun addArg(env, name) {
  env [4](name)
}

fun addVar(env, name) {
  env [5](name)
}

fun beginFun(env, state) {
  env [6](state)
}

fun getFuns(env) {
  env [7]()
}

fun lookupVar(env, name) {
  env [8](name)
}

fun lookupFun(env, name) {
  env [9](name)
}

fun getLocals(env) {
  env [10]()
}

fun genFunLabel(env, name) {
  env [11](name)
}

fun addFun(env, name, fLabel, nargs) {
  env [12](name, fLabel, nargs)
}

fun isGlobal(env) {
  env [13]()
}

-- Helper function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case genLabel(env) of
             [lab, env] -> lab:inner(env, n - 1)
           esac
    fi
  }
  
  listArray(inner(env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs(env, names) {
  foldl(fun (env, name) { addArg(env, name) }, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars(env, names) {
  foldl(fun (env, name) { addVar(env, name) }, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }
  
  fun compile(lab, env, stmt) {
    case stmt of
        Skip                 -> [false, env, emptyBuffer()]
      | Var    (x)           -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
      | Ref    (x)           -> [false, env, singletonBuffer(LDA(lookupVar(env, x)))]
      | Const  (n)           -> [false, env, singletonBuffer(CONST(n))]
      | Read (x)             -> [false, env, singletonBuffer(READ) <+ ST(lookupVar(env, x)) <+ DROP]
      | Write (e)            ->
        case genLabel(env) of
          [write_lab, env] ->
            case compile(write_lab, env, e) of
              [lab_used, env, code] -> [false, env, code <+> label(write_lab, lab_used) <+ WRITE]
            esac
        esac
      | Binop (op, e1, e2)   ->
        case genLabels(env, 2) of
          [e1_lab, e2_lab, env] ->
            case compile(e1_lab, env, e1) of
              [e1_used, env, e1_code] ->
                case compile(e2_lab, env, e2) of
                  [e2_used, env, e2_code] -> [
                    false,
                    env,
                    e1_code
                      <+> label(e1_lab, e1_used)
                      <+> e2_code
                      <+> label(e2_lab, e2_used)
                      <+ BINOP(op)
                  ]
                esac
            esac
        esac
      | Ignore (e)           ->
        case genLabel(env) of
          [drop_lab, env] ->
            case compile(drop_lab, env, e) of
              [drop_used, env, code] -> [false, env, code <+> label(drop_lab, drop_used) <+ DROP]
            esac
        esac
      | Assn (r, e)          ->
        case genLabels(env, 2) of
          [r_lab, e_lab, env] ->
            case compile(r_lab, env, r) of
              [r_used, env, r_code] ->
                case compile(e_lab, env, e) of
                  [e_used, env, e_code] -> [
                    false,
                    env,
                    r_code
                      <+> label(r_lab, r_used)
                      <+> e_code
                      <+> label(e_lab, e_used)
                      <+ STI
                  ]
                esac
            esac
        esac
      | Seq (s1, s2)         ->
        case genLabel(env) of
          [s2_lab, env] ->
            case compile(s2_lab, env, s1) of
              [s2_used, env, s1_code] ->
                case compile(lab, env, s2) of
                  [lab_used, env, s2_code] -> [
                    lab_used,
                    env,
                    s1_code <+> label(s2_lab, s2_used) <+> s2_code
                  ]
                esac
            esac
        esac
      | While (cond, body)   ->
        case genLabels(env, 3) of
          [cond_lab, body_lab, cjmp_lab, env] ->
            case compile(cond_lab, env, body) of
              [_, env, body_code] ->
                case compile(cjmp_lab, env, cond) of
                  [cjmp_used, env, cond_code] ->
                    [
                      false,
                      env,
                      singletonBuffer(JMP(cond_lab))
                        <+ LABEL(body_lab)
                        <+> body_code
                        <+ LABEL(cond_lab)
                        <+> cond_code
                        <+> label(cjmp_lab, cjmp_used)
                        <+ CJMP("nz", body_lab)
                    ]
                esac
            esac
        esac
      | DoWhile (body, cond) ->
        case genLabels(env, 3) of
          [cond_lab, body_lab, cjmp_lab, env] ->
            case compile(cond_lab, env, body) of
              [cond_used, env, body_code] ->
                case compile(cjmp_lab, env, cond) of
                  [cjmp_used, env, cond_code] ->
                    [
                      false,
                      env,
                      singletonBuffer(LABEL(body_lab))
                        <+> body_code
                        <+> label(cond_lab, cond_used)
                        <+> cond_code
                        <+> label(cjmp_lab, cjmp_used)
                        <+ CJMP("nz", body_lab)
                    ]
                esac
            esac
        esac
      | If (cond, s1, s2)    ->
        case genLabels(env, 2) of
          [cjmp_lab, s2_lab, env] ->
            case compile(cjmp_lab, env, cond) of
              [cjmp_used, env, cond_code] ->
                case compile(lab, env, s1) of
                  [_, env, s1_code] ->
                    case compile(lab, env, s2) of
                      [_, env, s2_code] ->
                        [
                          true,
                          env,
                          cond_code
                            <+> label(cjmp_lab, cjmp_used)
                            <+ CJMP("z", s2_lab)
                            <+> s1_code
                            <+ JMP(lab)
                            <+ LABEL(s2_lab)
                            <+> s2_code
                        ]
                    esac
                esac
            esac
        esac
      | Call (func, args)    ->
        case lookupFun(env, func) of
          Fun(func_lab, nargs) -> (
            if (nargs != args.size)
              then failure("Function %s expected %d arguments, but passed %d", func, nargs, args.size)
              else case genLabel(env) of
                     [call_lab, env] ->
                       case compile(call_lab, env, foldr(fun (e, a) { Seq(a, e) }, Skip, args)) of
                         [call_used, env, code] -> [
                           false,
                           env,
                           code
                             <+> label(call_lab, call_used)
                             <+ CALL(func_lab, nargs)
                         ]
                       esac
                   esac
            fi
          )
        esac
      | Scope (defs, e)      ->
        case
          foldl(
            fun ([env, funcs, globals], def) {
              case def of
                  Var (x)          -> [
                    addVars(env, x),
                    funcs,
                    if isGlobal(env)
                      then foldl(fun (gs, n) {
                        gs <+ GLOBAL(n)
                      }, globals, x)
                      else globals
                    fi
                  ]
                | Fun (f, args, b) ->
                  case genFunLabel(env, f) of
                    [f_lab, env] -> [
                      addFun(env, f, f_lab, args.size),
                      [f_lab, args, b]:funcs,
                      globals
                    ]
                  esac
              esac
            },
            [beginScope(env), { }, emptyBuffer()],
            defs
          )
        of
          [env, funcs, globs] ->
            case compile(lab, foldr(fun (env, [f_lab, args, body]) {
              rememberFun(env, f_lab, args, body)
            }, env, funcs), e) of
              [lab_used, env, scope_code] ->
                [
                  lab_used,
                  endScope(env),
                  globs <+> scope_code
                ]
            esac
        esac
      | _                    -> failure("Unexpected instruction for stack machine")
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, env, mainCode] ->
          fun compileFuns(env, fs) {
            case fs of
                { }                      -> emptyBuffer()
              | Fun(fLab, as, b, s) : fs ->
                case genLabel(addArgs(beginFun(env, s), as)) of
                  [endLab, env] ->
                    case compile(endLab, env, b) of
                      [endLabUsed, env, bCode] ->
                        singletonBuffer(LABEL(fLab)) <+ BEGIN(fLab, size(as), getLocals(env)) <+> bCode <+> label(endLab, endLabUsed) <+ END <+> compileFuns(env, fs)
                    esac
                esac
            esac
          }
        
          getBuffer $
            case getFuns(env) of
              [fs, env] ->
                singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> mainCode <+> label(endLab, endLabUsed) <+ END <+> compileFuns(env, fs)
            esac
      esac
  esac
}

