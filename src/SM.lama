-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  fun helper(c @ [stack, state, world], insns) {
    case insns of
      READ        -> case readWorld(world) of [value, world] -> [value:stack, state, world] esac
      | WRITE     -> case stack of hd : tl -> [tl, state, writeWorld(hd, world)] esac
      | BINOP (x) -> case stack of hd1 : hd2 : tl -> [evalBinop(x, hd2, hd1):tl, state, world] esac
      | LD (x)    -> [state(x):stack, state, world]
      | ST (x)    -> case stack of hd : tl -> [tl, state <- [x, hd], world] esac
      | CONST (x) -> [x:stack, state, world]
    esac
  }

  case insns of
    { }       -> c
    | hd : tl -> eval(helper(c, hd), tl)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var(x)                    -> { LD(x) }
    | Const(x)                -> { CONST(x) }
    | Binop(op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ { BINOP(op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (value, expr)   -> compileExpr(expr) +++ { ST(value) }
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Read(value)        -> { READ, ST(value) }
    | Write (expr)       -> compileExpr(expr) +++ { WRITE }
    | Skip               -> { }
  esac
}
