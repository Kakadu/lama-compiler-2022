-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
  case insns of
    insn : insns ->
      case insn of
        CONST (n) -> eval([n : st, cst, s, w], insns)
      | READ ->  
      case readWorld (w) of 
        [v, nw] -> eval ([v : st, cst, s, nw], insns)
      esac
      | WRITE -> 
        case st of 
          v : nst -> eval ([nst, cst, s, writeWorld (v, w)], insns)
        esac
      | BINOP (op) -> 
      case st of 
        r : l : nst -> eval ([evalOp (op, l, r) : nst, cst, s, w], insns)
      esac
      | LD (x) -> eval ([lookup (s, x) : st, cst, s, w], insns)
      | LDA (x) -> eval ([Ref (x) : st, cst, s, w], insns)
      | ST (x) -> assign (s, x, hd (st)); eval (c, insns)
      | STI ->
        case st of 
          v : Ref (x) : nst -> assign (s, x, v); eval ([v : nst, cst, s, w], insns)
        esac
      | DROP -> eval ([tl (st), cst, s, w], insns)

      | LABEL (_) -> eval (c, insns)
      | JMP   (l) -> eval (c, env.fromLabel(l))
      | CJMP  (cond, l) -> 
        case st of 
          v : nst -> 
            fun evalCJMP () {
              case [cond, v] of
                ["z", 0]  -> fromLabel (env, l)
              | ["z", _]  -> insns
              | ["nz", 0] -> insns
              | ["nz", _] -> fromLabel (env, l)
              esac
            }
            eval ([nst, cst, s, w], evalCJMP ())
        esac
      | BEGIN (_, countArgs, countLoc) ->
        case take(st, countArgs) of
          [st, args] ->
            var s = makeState(countArgs, countLoc);
            foldl(fun (n, arg) { s.assign(Arg(n), arg); n + 1 }, 0, args);
            eval([st, cst, s, w], insns)
        esac
      | END ->
        case cst of
          [s, insns] : cst -> eval ([st, cst, s, w], insns)
        | {} -> c
        esac
      | CALL (f, _) -> eval ([st, [s, insns] : cst, s, w], fromLabel (env, f))
      | GLOBAL (x) -> assign (s, Glb (x), 0); eval (c, insns)
      esac
  | {} -> c
  esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

fun addDefs (env, defs) {
  foldl (fun ([env, funs, globalDefs], def) {
    case def of 
      Fun (name, args, body) -> 
      case genFunLabel (env, name) of
        [flabel, env] -> 
          [
          addFun (env, name, flabel, size (args)),
          [flabel, args, body] : funs,
          globalDefs
          ]
      esac
    | Var (name) ->
      [addVar (env, name),
      funs,
      if isGlobal (env)
      then globalDefs <+ GLOBAL (name)
      else globalDefs
      fi]
    esac
  }, 
  [env, {}, emptyBuffer ()], defs)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    fun compileList(env, exprs) {
      case foldl (fun ([env, codes], e) {
                    case compile (lab, env, e) of
                      [_, env, code] -> [env, code : codes]
                    esac
                  },
                  [env, {}],
                  exprs) of
        [env, codes] -> [env, reverse (codes)]
      esac
    }

    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read   (x)        -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]
    | Scope (defs, expr) -> 
      case addDefs (beginScope (env), defs) of 
        [env, funs, globalDefs] -> 
        case foldl (
        fun (env, [flabel, args, body]) {
          rememberFun (env, flabel, args, body)
        }, 
        env, 
        funs) of
          env -> 
          case compile (lab, env, expr) of
            [_, env, code] -> [false, endScope (env), globalDefs <+> code]
          esac
        esac
      esac
      | Call (f, args) ->
        case lookupFun (env, f) of
          Fun (fLabel, countArgs) ->
            case compile (
              lab, 
              env, 
              foldl (fun (acc, arg) {Seq (acc, arg)}, Skip, args)
            ) of
              [_, env, code] -> [false, env, code <+ CALL (fLabel, countArgs)]
            esac
        esac
    | Ignore (x)        -> 
      case compile (lab, env, x) of
        [_, env, code] -> [false, env, code <+ DROP]
      esac
    | Binop  (op, l, r) -> 
      case compileList (env, {l, r}) of
        [env, {lcode, rcode}] -> [false, env, lcode <+> rcode <+ BINOP (op)]
      esac
    | Write  (e)        -> 
        case compile (lab, env, e) of
          [_, env, code] -> [false, env, code <+ WRITE]
        esac
    | Assn   (l, r)     -> 
      case compileList (env, {l, r}) of
        [env, {lcode, rcode}] -> [false, env, lcode <+> rcode <+ STI]
      esac
    | Seq    (s1, s2)   -> 
      case compileList (env, {s1, s2}) of
        [env, {s1Code, s2Code}] -> [false, env, s1Code <+> s2Code]
      esac
    | While (cond, body)      -> 
      case env.genLabels (2) of
        [lcond, lcode, env] ->
          case compileList (env, {cond, body}) of
            [env, {condCode, bodyCode}] -> 
              [false, env, singletonBuffer (LABEL (lcond)) <+> condCode <+ CJMP ("z", lcode) 
              <+> bodyCode <+ JMP (lcond) <+ LABEL (lcode)]
          esac
      esac
    | DoWhile (body, cond) -> 
      case env.genLabel of
        [lbody, env] ->
          case compileList (env, {body, cond}) of
            [env, {bodyCode, condCode}] -> [false, env, 
              singletonBuffer (LABEL (lbody)) <+> bodyCode <+> condCode <+ CJMP ("nz", lbody)]
          esac
      esac
    | If (cond, thenBody, elseBody) -> 
      case env.genLabels (2) of
        [lelse, lcode, env] -> 
        case compileList (env, {cond, thenBody, elseBody}) of
          [env, {condCode, thenCode, elseCode}] -> 
            [false, env, condCode <+ CJMP ("z", lelse) <+> thenCode <+ JMP (lcode) <+ LABEL (lelse) <+> elseCode <+ LABEL (lcode)]
        esac
      esac
    esac
  }


  fun compileFuns (env, funs) {
    case funs of
      Fun (fLabel, args, body, s) : funs ->
      case genLabel (addArgs (beginFun (env, s), args)) of
        [lab, env] ->
        case compile (lab, env, body) of
          [_, env, bCode] ->
            singletonBuffer (LABEL (fLabel)) <+ BEGIN (fLabel, size (args), getLocals (env)) 
            <+> bCode <+ END <+> compileFuns (env, funs)
        esac
      esac
    | { } -> emptyBuffer()
    esac
  }

  case genLabel (initCompEnv ()) of
    [lab, env] ->
    case compile (lab, env, stmt) of
      [_, env, mainCode] ->
      case getFuns (env) of
        [funs, env] ->
        getBuffer $ singletonBuffer (LABEL ("main")) <+ BEGIN ("main", 0, getLocals (env)) 
                    <+> mainCode <+ END <+> compileFuns (env, funs)
      esac
    esac
  esac
}

