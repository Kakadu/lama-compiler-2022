-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s, f)    -> sprintf ("LABEL %s, %d", s, f)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  | TAG (t, n)       -> sprintf ("TAG %s, %d", t, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab, _) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun evalOneI (c@[stack, cstack, state, world], i) {
    case i of
      READ       -> case readWorld(world) of [n, world] ->
                      [n:stack, cstack, state, world]
                    esac
    | WRITE      -> case stack of n:stack ->
                      [stack, cstack, state, writeWorld(n, world)]
                    esac
    | BINOP (s)  -> case stack of y:x:stack ->
                      [evalOp(s, x, y):stack, cstack, state, world]
                    esac
    | LD    (x)  -> [lookup(state, x):stack, cstack, state, world]
    | ST    (x)  -> case stack of n:stack ->
                      assign(state, x, n);
                      [n:stack, cstack, state, world]
                    esac
    | CONST (n)  -> [n:stack, cstack, state, world]
    | LDA   (x)  -> [x:stack, cstack, state, world]
    | STI        -> case stack of v:x:stack ->
                      assign(state, x, v);
                      [v:stack, cstack, state, world]
                    esac
    | DROP       -> case stack of n:stack ->
                      [stack, cstack, state, world]
                    esac
    | DUP        -> case stack of n : stack ->
                     [n : n : stack, cstack, state, world]
                    esac
    | GLOBAL (x) -> assign(state, Glb (x), 0); [stack, cstack, state, world]
    | LABEL (_, _)  -> c
    | BEGIN (_, na, nl) -> case take(stack, na) of [stack, args] ->
                             var newState = makeState(na, nl);

                             for var i; i := 0, i < na, i := i + 1 do
                               case args of arg : tail ->
                                 assign(newState, Arg (i), arg);
                                 args := tail
                               esac
                             od;

                             [stack, cstack, newState, world]
                           esac
    | STRING (s) -> [s : stack, cstack, state, world]
    | ARRAY (n)  -> case take(stack, n) of [stack, elems] ->
                      [listArray(elems) : stack, cstack, state, world]
                    esac
    | STA        -> case stack of v : smth : stack ->
                      case smth of
                        i@#val -> case stack of
                                    Sexp (_, a) : stack ->
                                      [(a[i] := v) : stack, cstack, state, world]
                                  | a : stack ->
                                      [(a[i] := v) : stack, cstack, state, world]
                                  esac
                      | x -> assign(state, x, v); [v : stack, cstack, state, world]
                      esac
                    esac
    | ELEM       -> case stack of i : a : stack ->
                      case a of
                        Sexp (_, a) -> [a[i] : stack, cstack, state, world]
                      | a -> [a[i] : stack, cstack, state, world]
                      esac
                    esac
    | BUILTIN (name, n) -> case take(stack, n) of [stack, args] ->
                             case evalBuiltin (name, args, world) of [v, world] ->
                               [v : stack, cstack, state, world]
                             esac
                           esac
    | SEXP (tag, n) -> case take(stack, n) of [stack, args] ->
                         [Sexp (tag, listArray(args)) : stack, cstack, state, world]
                       esac
    | TAG (tag, n) -> case stack of a : stack ->
                        case a of
                          Sexp (newTag, args) ->
                            [(compare(tag, newTag) == 0 && length(args) == n) : stack, cstack, state, world]
                          | _ -> [0 : stack, cstack, state, world]
                        esac
                      esac
    | PATT (n) -> case stack of a : stack ->
                    case a of
                      #array -> [(length(a) == n) : stack, cstack, state, world]
                    | _ -> [0 : stack, cstack, state, world]
                    esac
                  esac
    esac
  }

  fun eval (c@[stack, cstack, state, world], insns) {
    case insns of
      {} -> c
    | JMP (l) : _ -> eval(c, fromLabel(env, l))
    | CJMP (cond, l) : insns -> case stack of n : stack ->
                                  c := [stack, cstack, state, world];

                                  if (compare(cond, "z") == 0 && n == 0) !! (compare(cond, "nz") == 0 && n != 0)
                                  then eval(c, fromLabel(env, l))
                                  else eval(c, insns)
                                  fi
                                esac
    | END : _ -> case cstack of
                   {} -> c
                 | [lstate, q] : cstack -> eval([stack, cstack, lstate, world], q)
                 esac
    | CALL (f, _) : insns -> eval([stack, [state, insns] : cstack, state, world], fromLabel(env, f))
    | curI : insns -> eval(evalOneI(c, curI), insns)
    esac
  }
  

  -- printf ("%s\n", showSM (insns));
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab, false))
    else emptyBuffer ()
    fi
  }

  -- Compiles zero or more expressions
  fun compileAny (lab, env, exprs) {
    case exprs of
      {} -> [false, env, emptyBuffer()]
    | {e} -> compile (lab, env, e)
    | e : exprs -> case genLabel(env) of [newL, env] ->
                     case compile(newL, env, e) of [newLUsed, env, eCode] ->
                       case compileAny(lab, env, exprs) of [labUsed, env, exprsCode] ->
                         [labUsed, env, eCode <+> label(newL, newLUsed) <+> exprsCode]
                       esac
                     esac
                   esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read   (x)        -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write  (e)        ->
        case genLabel(env) of [eL, env] ->
          case compile(eL, env, e) of [eLUsed, env, eCode] ->
            [false, env,
             eCode <+> label(eL, eLUsed) <+ WRITE]
          esac
        esac
    | Assn (e1, e2) ->
        case genLabels(env, 2) of [e1L, e2L, env] ->
          case compile(e1L, env, e1) of [e1LUsed, env, e1Code] ->
            case compile(e2L, env, e2) of [e2LUsed, env, e2Code] ->
              [false, env,
               e1Code <+> label(e1L, e1LUsed) <+> e2Code <+> label(e2L, e2LUsed)
               <+ STA
              ]
            esac
          esac
        esac
    | Seq (s1, s2)   ->
        case genLabel(env) of [s2Lab, env] ->
          case compile (s2Lab, env, s1) of [s2LabUsed, env, s1Code] ->
            case compile (lab, env, s2) of [labUsed, env, s2Code] ->
              [labUsed, env,
               s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
            esac
          esac
        esac
    | If (e, s1, s2) ->
        case genLabels(env, 3) of [eL, s1L, elseL, env] ->
          case compile(eL, env, e) of [eLUsed, env, eCode] ->
            case compile(s1L, env, s1) of [s1LUsed, env, s1Code] ->
              case compile(lab, env, s2) of [labUsed, env, s2Code] ->
                [true, env,
                 eCode <+> label(eL, eLUsed) <+ CJMP ("z", elseL) <+> s1Code <+>
                 label(s1L, s1LUsed) <+ JMP (lab) <+ LABEL (elseL, false) <+> s2Code]
              esac
            esac
          esac
        esac
    | While (e, s) ->
        case genLabels(env, 3) of [eL, loopL, stmtL, env] ->
          case compile(eL, env, e) of [eLUsed, env, eCode] ->
            case compile(stmtL, env, s) of [stmtLUsed, env, sCode] ->
              [true, env,
               singletonBuffer(LABEL (loopL, true)) <+> eCode <+> label(eL, eLUsed)
               <+ CJMP ("z", lab) <+> sCode <+> label(stmtL, stmtLUsed) <+ JMP (loopL)]
            esac
          esac
        esac
    | DoWhile (s, e) ->
      case genLabels(env, 3) of [eL, beforeL, afterL, env] ->
        case compile(eL, env, e) of [eLUsed, env, eCode] ->
          case compile(afterL, env, s) of [afterLUsed, env, sCode] ->
            [false, env,
             singletonBuffer(LABEL (beforeL, true)) <+> sCode <+> label(afterL, afterLUsed) <+>
             eCode <+> label(eL, eLUsed) <+ CJMP("nz", beforeL)]
          esac
        esac
      esac
    | Binop (op, e1, e2) ->
        case genLabels(env, 2) of [e1L, e2L, env] ->
          case compile(e1L, env, e1) of [e1LUsed, env, e1Code] ->
            case compile(e2L, env, e2) of [e2LUsed, env, e2Code] ->
              [false, env,
               e1Code <+> label(e1L, e1LUsed) <+> e2Code <+> label(e2L, e2LUsed) <+
               BINOP (op)]
            esac
          esac
        esac
    | Ignore (e) ->
        case genLabel(env) of [eL, env] ->
          case compile (eL, env, e) of [eLUsed, env, eCode] ->
            [false, env,
             eCode <+> label(eL, eLUsed) <+ DROP]
          esac
        esac
    | Scope (defs, expr) ->
        fun genGlobalCode (env, vNames, globalsCode) {
          if isGlobal(env)
          then foldl(fun (code, vName) {code <+ GLOBAL (vName)}, globalsCode, vNames)
          else globalsCode
          fi
        }

        case foldl(fun ([env, funs, globalsCode], def) {
                     case def of
                       Var (vNames) ->
                         [addVars(env, vNames), funs, genGlobalCode(env, vNames, globalsCode)]
                     | Val (vNames) ->
                         [addVars(env, vNames), funs, genGlobalCode(env, vNames, globalsCode)]
                     | Fun (name, args, body) ->
                         case genFunLabel(env, name) of [l, env] ->
                           [addFun(env, name, l, size(args)), [l, args, body] : funs, globalsCode]
                         esac
                     esac
                   },
                   [beginScope(env), {}, emptyBuffer()],
                   defs)
        of [env, funs, globalsCode] ->
          var newEnv = foldl(fun (env, [l, args, body]) {
                               rememberFun(env, l, args, body)
                             },
                             env,
                             funs);

          case compile(lab, newEnv, expr) of [labUsed, env, code] ->
            [labUsed, endScope(env), globalsCode <+> code]
          esac
        esac
    | Call (f, args) ->
        case lookupFun(env, f) of Fun (fL, nArgs) ->
          case genLabel(env) of [argsL, env] ->
            case compileAny(argsL, env, args) of [argsLUsed, env, argsCode] ->
              [false, env,
               argsCode <+> label(argsL, argsLUsed) <+
               case f of
                 "read" -> BUILTIN ("read", nArgs)
               | "write" -> BUILTIN ("write", nArgs)
               | "length" -> BUILTIN ("length", nArgs)
               | _ -> CALL (fL, nArgs)
               esac
              ]
            esac
          esac
        esac
    | Set (s, e) ->
        compile(lab, env, Assn (Ref (s), e))
    | String (s) ->
        [false, env, singletonBuffer(STRING (s))]
    | Array (exprs) ->
        case genLabel(env) of [exprsL, env] ->
          case compileAny(exprsL, env, exprs) of [exprsLUsed, env, code] ->
            [false, env, code <+> label(exprsL, exprsLUsed) <+ ARRAY (size(exprs))]
          esac
        esac
    | Sexp (tag, exprs) ->
        case genLabel(env) of [exprsL, env] ->
          case compileAny(exprsL, env, exprs) of [exprsLUsed, env, code] ->
            [false, env, code <+> label(exprsL, exprsLUsed) <+ SEXP (tag, size(exprs))]
          esac
        esac
        -- compile(lab, env, SEXP (tag, size(exprs)))
    | Elem (e, idx) ->
        case genLabel(env) of [l, env] ->
          case compileAny(l, env, {e, idx}) of [lUsed, env, code] ->
            [false, env, code <+> label(l, lUsed) <+ ELEM]
          esac
        esac
    | ElemRef (e, idx) -> compileAny(lab, env, {e, idx})
    | Case (scr, brs) ->
        case compile(lab, env, scr) of [_, env, scrCode] ->
          case foldl(compileBranch, [env, lab, scrCode], brs) of [env, _, code] ->
            [true, env, code]
          esac
        esac
    esac
  }

  fun compileBranch([env, endL, code], [p, br]) {
    fun dropL(l, depth) {
      sprintf("%s_drop_%d", l, depth)
    }

    fun compileArrayCheckElem([env, code, maxDepth, depth, failL, idx], p) {
      case compileMatch(env, code <+ DUP <+ CONST (idx) <+ ELEM, p, failL, depth) of
        [env, code, maxDepthNew] ->
          [env, code, if maxDepth > maxDepthNew then maxDepth else maxDepthNew fi, depth, failL, idx + 1]
      esac
    }

    fun compileMatch(env, code, p, failL, depth) {
      case p of
        Wildcard -> [env, code <+ DROP, depth]
      | Named (_, p) -> compileMatch(env, code, p, failL, depth)
      | Const (n) -> [env, code <+ CONST (n) <+ BINOP ("==") <+ CJMP ("z", dropL(failL, depth)), depth]
      | Array (exprs) ->
          case foldl (compileArrayCheckElem,
                      [
                        env,
                        code <+ DUP <+ PATT (size(exprs)) <+ CJMP ("z", dropL(failL, depth)), depth, depth + 1, failL,
                        0
                      ],
                      exprs)
            of [env, code, maxDepth, _, _, _] ->
              [env, code <+ DROP, maxDepth]
          esac
      | Sexp (tag, exprs) ->
          case foldl (compileArrayCheckElem,
                      [
                        env,
                        code <+ DUP <+ TAG (tag, size(exprs)) <+ CJMP ("z", dropL(failL, depth)), depth, depth + 1, failL,
                        0
                      ],
                      exprs)
            of [env, code, maxDepth, _, _, _] ->
              [env, code <+ DROP, maxDepth]
          esac
      esac
    }

    fun compileDrops(failL, depth, maxDepth) {
      if depth == maxDepth
      then singletonBuffer(LABEL (dropL(failL, depth), false)) <+ DROP
      else compileDrops(failL, depth + 1, maxDepth) <+ LABEL (dropL(failL, depth), false) <+ DROP
      fi
    }

    case genLabel(env) of [failL, env] ->
      case compile(endL, env, br) of [_, env, brCode] ->
        case compileMatch(env, code <+ DUP, p, failL, 1) of [env, code, maxDepth] ->
          [env, endL, code <+ DROP <+> brCode <+ JMP (endL) <+> compileDrops(failL, 1, maxDepth + 1)]
        esac
      esac
    esac
  }

  fun compileFuns(env, mainCode) {
    fun iterate(env, acc, funs) {
      case funs of
        {} ->
          case getFuns(env) of
            [{}, env] -> acc
          | [funs, env] -> iterate(env, acc, funs)
          esac
      | Fun (fL, args, body, state) : funs ->
          case genLabel(addArgs(beginFun(env, state), args)) of [lab, env] ->
            case compile(lab, env, body) of [labUsed, env, funCode] ->
              iterate(env,
                      acc <+ LABEL (fL, false) <+ BEGIN (fL, size(args), getLocals(env)) <+>
                      funCode <+> label(lab, labUsed) <+ END,
                      funs)
            esac
          esac
      esac
    }

    iterate(env, mainCode, {})
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of [endLabUsed, env, code] ->
        var mainCode = singletonBuffer(LABEL ("main", false)) <+ BEGIN ("main", 0, getLocals(env)) <+>
                      code <+> label(endLab, endLabUsed) <+ END;

        getBuffer(compileFuns(env, mainCode))
      esac
  esac
}
