-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
-- Shows a location (a reference to function argument, local or global variable)
  fun showLoc(d) {
    case d of
      Arg (i)   -> sprintf("arg[%d]", i)
      | Loc (i) -> sprintf("loc[%d]", i)
      | Glb (x) -> x
    esac
  }

  case i of
    READ               -> "READ"
    | WRITE            -> "WRITE"
    | BINOP  (s)       -> sprintf("BINOP %s", s)
    | LD     (x)       -> sprintf("LD %s", showLoc(x))
    | LDA    (x)       -> sprintf("LDA %s", showLoc(x))
    | ST     (x)       -> sprintf("ST %s", showLoc(x))
    | STI              -> "STI"
    | CONST  (n)       -> sprintf("CONST %d", n)
    | LABEL  (s)       -> sprintf("LABEL %s", s)
    | JMP    (l)       -> sprintf("JMP %s", l)
    | CJMP   (c, l)    -> sprintf("CJMP %s, %s", c, l)
    | CALL   (f, n)    -> sprintf("CALL %s, %d", f, n)
    | BEGIN  (f, a, l) -> sprintf("BEGIN %s, %d, %d", f, a, l)
    | GLOBAL (x)       -> sprintf("GLOBAL %s", x)
    | END              -> sprintf("END")
    | DUP              -> "DUP"
    | DROP             -> "DROP"
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
          { }                -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval(env, w, insns) {
-- Global state maps names of global variables to values
  var globalState = ref(fun (x) { error(sprintf("name ""%s"" is undefined", x), getLoc(x)) });

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState(a, l) {
    [initArray(a, fun (_) { 0 }), initArray(l, fun (_) { 0 })]
  }

  -- Lookups a location in local/global states
  fun lookup(a, loc) {
    case a of
      [args, locs] -> (
        case loc of
          Arg (i)   -> args[i]
          | Loc (i) -> locs[i]
          | Glb (x) -> deref(globalState)(x)
        esac
      )
    esac
  }

  -- Assigns a value to a location
  fun assign(env@[args, locs], loc, v) {
    case loc of
      Arg (i)   -> args[i] := v
      | Loc (i) -> locs[i] := v
      | Glb (x) -> var g = deref(globalState);
      globalState ::= fun (y) { if compare(x, y) == 0 then v else g(y) fi }
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take(list, n) {
    fun inner(n, acc, list) {
      if n == 0
        then [list, acc]
        else inner(n - 1, list.hd:acc, list.tl)
      fi
    }

    inner(n, { }, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval(c@[st, cst, s, w], insns) {
    case insns of
      insn : tail ->
        case evalCommand(c, insn, tail) of
          [c, insns] -> eval(c, insns)
        esac
      | _         -> c
    esac
  }

  fun evalCommand(c@[stack, callStack, state, world], insn, insnTail) {
    case insn of
      READ                 ->
        case readWorld(world) of
          [x, new_world] ->
            [
              [x:stack, callStack, state, new_world],
              insnTail
            ]
        esac
      | WRITE              ->
        case stack of
          h : t ->
            [
              [t, callStack, state, writeWorld(h, world)],
              insnTail
            ]
        esac
      | BINOP (s)          ->
        case stack of
          a : b : t ->
            [
              [evalOp(s, b, a):t, callStack, state, world],
              insnTail
            ]
        esac
      | LD (x)             ->
        [
          [lookup(state, x):stack, callStack, state, world],
          insnTail
        ]
      | ST (x)             ->
        case stack of
          h : t ->
            (
              assign(state, x, h);
              [c, insnTail]
            )
        esac
      | CONST (s)          ->
        [
          [s:stack, callStack, state, world],
          insnTail
        ]
      | LABEL (s)          -> [c, insnTail]
      | JMP (label)        -> [c, fromLabel(env, label)]
      | CJMP (cond, label) -> (
        case stack of
          head : tail -> (
            if ((compare(cond, "z") == 0) == (head == 0)) then
              [
                [tail, callStack, state, world],
                fromLabel(env, label)
              ]
              else
                [[tail, callStack, state, world], insnTail]
            fi
          )
        esac
      )
      | DROP               ->
        case stack of
          _ : tail ->
            [
              [tail, callStack, state, world],
              insnTail
            ]
        esac
      | LDA (x)            ->
        [
          [x:stack, callStack, state, world],
          insnTail
        ]
      | STI                ->
        case stack of
          v : x : tail -> (
            assign(state, x, v);
            [
              [v:tail, callStack, state, world],
              insnTail
            ]
          )
        esac
      | CALL (f, n)        ->
        [
          [stack, [state, insnTail]:callStack, state, world],
          fromLabel(env, f)
        ]
      | BEGIN (f, n, m)    ->
        case take(stack, n) of
          [stack, args] -> (
            var newState = makeState(n, m);
            foldl(
              fun (i, arg) {
                assign(newState, Arg(i), arg);
                i + 1
              },
              0,
              args
            );
            [
              [stack, callStack, newState, world],
              insnTail
            ]
          )
        esac
      | END                ->
        case callStack of
          [prevState, insnTail] : prevCallStack ->
            [
              [stack, prevCallStack, prevState, world],
              insnTail
            ]
          | _                                   -> [c, { }]
        esac
      | GLOBAL (name)      -> (
        assign(state, Glb(name), 0);
        [c, insnTail]
      )
    esac
  }
  (* End *)

  eval([{ }, { }, makeState(0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), createWorld(input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions) {
-- Generates a new label
  fun genLabel() {
    [sprintf("L%d", nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun(fLabel, args, body) {
    makeCompEnv(nLabels,
      scopeDepth,
      state,
      nLocals,
      nArgs,
      Fun(fLabel, args, body, state):functions)
  }

  -- Enters a local scope
  fun beginScope() {
    makeCompEnv(nLabels, scopeDepth + 1, enterScope(state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope() {
    makeCompEnv(nLabels, scopeDepth - 1, leaveScope(state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg(name) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Arg(nArgs)), nLocals, nArgs + 1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar(name) {
    if scopeDepth == 1
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun(name, fLabel, nargs) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Fun(fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun(state) {
    makeCompEnv(nLabels, 1, enterFunction(state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns() {
    [functions, makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, { })]
  }

  -- Lookups a name of a variable
  fun lookupVar(name) {
    case lookup(state, name) of
      Fun (_, _) -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
      | x        -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun(name) {
    case lookup(state, name) of
      x@Fun (_, _) -> x
      | _          -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals() {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel(name) {
    if scopeDepth == 1
      then [sprintf("L%s", name), makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions)]
      else [sprintf("L%s_%d", name, nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
    fi
  }

  -- Checks if the current scope is a global
  fun isGlobal() {
    scopeDepth == 1
  }

  [genLabel,
    rememberFun,
    beginScope,
    endScope,
    addArg,
    addVar,
    beginFun,
    getFuns,
    lookupVar,
    lookupFun,
    getLocals,
    genFunLabel,
    addFun,
    isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv() {
  makeCompEnv(0, 0, emptyState(), 0, 0, { })
}

-- Accessor functions
fun genLabel(env) {
  env [0]()
}

fun rememberFun(env, name, args, body) {
  env [1](name, args, body)
}

fun beginScope(env) {
  env [2]()
}

fun endScope(env) {
  env [3]()
}

fun addArg(env, name) {
  env [4](name)
}

fun addVar(env, name) {
  env [5](name)
}

fun beginFun(env, state) {
  env [6](state)
}

fun getFuns(env) {
  env [7]()
}

fun lookupVar(env, name) {
  env [8](name)
}

fun lookupFun(env, name) {
  env [9](name)
}

fun getLocals(env) {
  env [10]()
}

fun genFunLabel(env, name) {
  env [11](name)
}

fun addFun(env, name, fLabel, nargs) {
  env [12](name, fLabel, nargs)
}

fun isGlobal(env) {
  env [13]()
}

-- Helper function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case genLabel(env) of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs(env, names) {
  foldl(fun (env, name) { addArg(env, name) }, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars(env, names) {
  foldl(fun (env, name) { addVar(env, name) }, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun compile(lab, env, stmt) {
    case stmt of
      Skip                       -> [false, env, emptyBuffer()]
      | Var    (x)               -> [false, env, singletonBuffer(LD(env.lookupVar(x)))]
      | Ref    (x)               -> [false, env, singletonBuffer(LDA(env.lookupVar(x)))]
      | Const  (n)               -> [false, env, singletonBuffer(CONST(n))]
      | Read  (x)                -> [false, env, singletonBuffer(READ) <+ ST(env.lookupVar(x)) <+ DROP]
      | Write (e)                ->
        case env.genLabel of
          [labEnd, env] ->
            case compile(labEnd, env, e) of
              [used, env, code] ->
                [
                  false,
                  env,
                  code
                    <+> label(labEnd, used)
                    <+ WRITE
                ]
            esac
        esac
      | Ignore (e)               ->
        case env.genLabel of
          [lab, env] ->
            case compile(lab, env, e) of
              [labUsed, env, code] ->
                [
                  false,
                  env,
                  code
                    <+> label(lab, labUsed)
                    <+ DROP
                ]
            esac
        esac
      | Binop (op, expr1, expr2) ->
        case env.genLabels(2) of
          [labEnd1, labEnd2, env] ->
            case compile(labEnd1, env, expr1) of
              [used1, env, code1] ->
                case compile(labEnd2, env, expr2) of
                  [used2, env, code2] ->
                    [
                      false,
                      env,
                      code1
                        <+> label(labEnd1, used1)
                        <+> code2
                        <+> label(labEnd2, used2)
                        <+ BINOP(op)
                    ]
                esac
            esac
        esac
      | Assn (x, e)              ->
        case env.genLabels(2) of
          [labEndX, labEndE, env] ->
            case compile(labEndX, env, x) of
              [usedX, env, codeX] ->
                case compile(labEndE, env, e) of
                  [usedE, env, codeE] ->
                    [
                      false,
                      env,
                      codeX
                        <+> label(labEndX, usedX)
                        <+> codeE
                        <+> label(labEndE, usedE)
                        <+ STI
                    ]
                esac
            esac
        esac
      | Seq (s1, s2)             ->
        case env.genLabel of
          [s2l, env] ->
            case compile(s2l, env, s1) of
              [s2lused, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] ->
                    [
                      labUsed,
                      env,
                      s1Code
                        <+> label(s2l, s2lused)
                        <+> s2Code
                    ]
                esac
            esac
        esac
      | If (cond, t, f)          ->
        case env.genLabels(2) of
          [cl, fl, env] ->
            case compile(cl, env, cond) of
              [clused, env, condcode] ->
                case compile(lab, env, t) of
                  [_, env, tcode] ->
                    case compile(lab, env, f) of
                      [_, env, fcode] ->
                        [
                          true,
                          env,
                          condcode
                            <+> label(cl, clused)
                            <+ CJMP("z", fl)
                            <+> tcode
                            <+ JMP(lab)
                            <+ LABEL(fl)
                            <+> fcode
                        ]
                    esac
                esac
            esac
        esac
      | While (c, body)          ->
        case env.genLabels(3) of
          [labE, labS, labEnd, env] ->
            case compile(labE, env, body) of
              [_, env, bodyCode] ->
                case compile(labEnd, env, c) of
                  [used, env, condcode] ->
                    [
                      false,
                      env,
                      singletonBuffer(JMP(labE))
                        <+ LABEL(labS)
                        <+> bodyCode
                        <+ LABEL(labE)
                        <+> condcode
                        <+> label(labEnd, used)
                        <+ CJMP("nz", labS)
                    ]
                esac
            esac
        esac
      | DoWhile (body, c)        ->
        case env.genLabels(3) of
          [labS, labE, labEnd, env] ->
            case compile(labE, env, body) of
              [usedE, env, bodyCode] ->
                case compile(labEnd, env, c) of
                  [usedEnd, env, condCode] ->
                    [
                      false,
                      env,
                      singletonBuffer(LABEL(labS))
                        <+> bodyCode
                        <+> label(labE, usedE)
                        <+> condCode
                        <+> label(labEnd, usedEnd)
                        <+ CJMP("nz", labS)
                    ]
                esac
            esac
        esac
      | Scope (defs, expr)       -> (
        fun compileDef([e, g, fs], def) {
          case def of
            Var (names)           ->
              [
                addVars(e, names),
                if isGlobal(e) then
                  names +++ g
                  else
                    { } +++ g
                fi,
                fs
              ]
            | Fun (f, args, body) ->
              case genFunLabel(e, f) of
                [l, e] ->
                  [
                    addFun(e, f, l, size(args)),
                    g,
                    Fun(l, args, body):fs
                  ]
              esac
          esac
        }
        fun compileDefs(env, defs) {
          var collected = foldl(compileDef, [env, { }, { }], defs);
          case collected of
            [env, gs, fs] -> (
              [foldl(
                fun (e, Fun (f, args, body)) {
                  rememberFun(e, f, args, body)
                },
                env,
                fs
              ),
                gs
              ]
            )
          esac
        }
        case compileDefs(env.beginScope, defs) of
          [env, gs] ->
            case compile(lab, env, expr) of
              [lUsed, env, code] -> (
                var compiledG = listBuffer(map(
                  fun (g) {
                    GLOBAL(g)
                  },
                  gs));
                [
                  lUsed,
                  env.endScope,
                  compiledG
                    <+> code
                ]
              )
            esac
        esac
      )
      | Call (f, args)           -> (
        fun compileArgs(env, args) {
          foldl(
            fun ([e, c], a) {
              case genLabel(e) of
                [l, e] ->
                  case compile(l, e, a) of
                    [lused, e, argcode] ->
                      [e, c <+> argcode <+> label(l, lused)]
                  esac
              esac
            },
            [env, emptyBuffer()],
            args
          )
        }
        case lookupFun(env, f) of
          Fun (label, argCount) ->
            case compileArgs(env, args) of
              [env, code] ->
                [
                  false,
                  env,
                  code
                    <+ CALL(label, argCount)
                ]
            esac
        esac
      )
    esac
  }
  fun compileFuns(env, code) {
    fun compileFun(env, Fun (f, args, body, state)) {
      case env.beginFun(state).addArgs(args).genLabel of
        [lab, env] ->
          case compile(lab, env, body) of
            [labUsed, env, code] -> (
              var funcode =
                singletonBuffer(LABEL(f))
                  <+ BEGIN(f, args.size, env.getLocals)
                  <+> code
                  <+> label(lab, labUsed)
                  <+ END;
              compileFuns(env, funcode)
            )
          esac
      esac
    }
    case env.getFuns of
      [funs, env] ->
        foldl(
          fun (funcodes, f) {
            funcodes
              <+> compileFun(env, f)
          },
          code,
          funs
        )
    esac
  }
  case genLabel(initCompEnv()) of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, env, code] ->
          getBuffer $ emptyBuffer() <+ LABEL("main")
            <+ BEGIN("main", 0, env.getLocals)
            <+> code
            <+> label(endLab, endLabUsed)
            <+ END
            <+> compileFuns(env, emptyBuffer())
      esac
  esac
}