-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun help_eval ([stack, state, world], insn) {
    case insn of
      ST    (v)  -> (
      case stack of hd : tl -> [tl, state <- [v, hd], world] esac
    )
    | LD    (v)  -> [state (v) : stack, state, world]
    | BINOP (op) -> (
      case stack of 
      hd1 : hd2 : tl -> [evalBinOp (op, hd2, hd1) : tl, state, world]
      esac
    )
    | CONST (v)  -> [v : stack, state, world]
    | READ       -> (
      case readWorld (world) of
      [v, world1] -> [v : stack, state, world1]
      esac)
    | WRITE      -> (
      case stack of
      hd : tl -> [tl, state, writeWorld (hd, world)]
      esac
    )
    | LABEL (_)  -> [stack, state, world] 
    esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of
    { }     -> c
  | hd : tl -> case hd of 
      CJMP (c, lab) -> case stack of 
        h : t -> eval (env, [t, state, world], if h == c then fromLabel(env, lab) else tl fi)
      esac
    | JMP  (lab)    -> eval (env, c, fromLabel(env, lab))
    | _             -> eval (env, help_eval (c, hd), tl)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (v)          -> singletonBuffer (LD (v)) 
  | Const (c)          -> singletonBuffer (CONST (c))
  | Binop (op, e1, e2) -> compileExpr (e1) <+> compileExpr (e2) <+> singletonBuffer (BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)         -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)      -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (p, s)      -> 
      case env.genLabel of 
        [sLab, env] -> 
          case env.genLabel of [lab1, env] ->
            case compile (lab1, env, s) of
              [lab1Used, env, sCode] ->
                [true, env, 
                  label(sLab, true) 
                    <+> compileExpr(p) 
                    <+ CJMP(0, lab) 
                    <+> sCode 
                    <+> label(lab1, lab1Used)
                    <+ JMP(sLab)
                  ]
            esac
          esac
      esac
    | If    (p, s1, s2) ->
      case env.genLabel of
          [elseLab, env] -> 
            case env.genLabel of [lab1, env] ->
              case compile(lab1, env, s1) of
                [lab1Used, env, s1Code] ->
                  case compile(lab, env, s2) of
                    [_, env, s2Code] ->
                      [true, env,
                        compileExpr(p)
                          <+ CJMP(0, elseLab)
                          <+> s1Code
                          <+> label(lab1, lab1Used)
                          <+ JMP(lab)
                          <+> label(elseLab, true)
                          <+> s2Code
                      ]
                  esac
              esac
            esac 
      esac
    | DoWhile (s, p)    -> 
      case env.genLabel of
          [sLab, env] -> 
            case env.genLabel of [lab1, env] ->
              case compile(lab1, env, s) of
                [lab1Used, env, sCode] ->
                  [true, env,
                    label(sLab, true)
                      <+> sCode
                      <+> label(lab1, lab1Used)
                      <+> compileExpr(p)
                      <+ CJMP(0, lab)
                      <+ JMP(sLab)
                  ]
              esac
            esac 
      esac
    | _                 -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}