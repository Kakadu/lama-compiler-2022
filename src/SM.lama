-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun condSatisfied (value, suf) {
    case [suf, value] of
      ["z",  0] -> true
    | ["z",  _] -> false
    | ["nz", 0] -> false
    | ["nz", _] -> true
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, controlStack, state, w], insns) {
    var res, done = 0;
    while done == 0 do
      case insns of
        {} -> done := 1
      | ins : insnsNew ->
          case ins of
            READ         -> case readWorld(w) of [v, wNew] -> stack := (v : stack); w := wNew esac
          | WRITE        -> case stack of v : stackNew -> stack := stackNew; w := writeWorld(v, w) esac
          | BINOP (s)    ->
              case stack of r : l : stackNew ->
                stack := (evalOp(s, l, r) : stackNew)
              esac
          | LD    (x)    -> stack := (lookup(state, x) : stack)
          | ST    (x)    ->
              case stack of v : stack ->
                assign(state, x, v)
              esac
          | CONST (n)    -> stack := (n : stack)
          | LABEL (s)    -> skip
          | JMP   (l)    -> insnsNew := fromLabel(env, l)
          | CJMP  (s, l) ->
              case stack of v : stackNew ->
                if condSatisfied(v, s) then
                  insnsNew := fromLabel(env, l)
                fi;
                stack := stackNew
              esac
          | LDA   (x)    -> stack := (x : stack)
          | STI          ->
              case stack of v : x : stackNew ->
                assign(state, x, v);
                stack := (v : stackNew)
              esac
          | DUP          -> case stack of v : stackNew -> stack := (v : v : stackNew) esac
          | DROP         -> case stack of v : stackNew -> stack := stackNew esac
          | BEGIN (_, nargs, nlocs) ->
              case take(stack, nargs) of [stackNew, args] ->
                var cnt = 0;
                fun putArg (state, arg) {
                  cnt := cnt + 1; assign(state, Arg (cnt - 1), arg); state
                }

                state := foldl(putArg, makeState(nargs, nlocs), args);
                stack := stackNew
              esac
          | CALL (name, _) ->
              controlStack := ([state, insnsNew] : controlStack);
              insnsNew := fromLabel(env, name)
          | END ->
              case controlStack of
                {} -> done := 1
              | [stateNew, insnsN] : controlStackNew ->
                  controlStack := controlStackNew;
                  state := stateNew;
                  insnsNew := insnsN
              esac
          | GLOBAL (x) -> assign(state, Glb (x), 0)
          | STRING (s) -> stack := (s : stack)
          | ARRAY (n) ->
              case take(stack, n) of [stackNew, args] ->
                stack := listArray(args) : stackNew
              esac
          | STA ->
              case stack of v : i : a : stackNew ->
                a[i] := v; stack := (v : stackNew)
              esac
          | ELEM ->
              case stack of i : a : stackNew ->
                stack := (a[i] : stackNew)
              esac
          | BUILTIN (name, n) ->
              case take(stack, n) of [stackNew, args] ->
                case evalBuiltin(name, args, w) of [v, newW] ->
                  w := newW; stack := (v : stackNew)
                esac
              esac
          esac;
          insns := insnsNew
      esac
    od;
    [stack, controlStack, state, w]
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    fun compileList (l, env, code) {
      fun compileSingle([env, code], arg) {
        case genLabel(env) of [argEnd, env] ->
          case compile(argEnd, env, arg) of [argEndUsed, env, argCode] ->
            [env, code <+> argCode <+> label(argEnd, argEndUsed)]
          esac
        esac
      }

      foldl(compileSingle, [env, code], l)
    }

    fun callCode(fname, args, insConstructor) {
      case compileList(args, env, emptyBuffer()) of [env, code] ->
        case lookupFun(env, fname) of Fun(fLab, _) ->
          [false, env, code <+ insConstructor(fLab, size(args))]
        esac
      esac
    }

    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Assn (e1, e2) ->
        case e1 of
          ElemRef(e, ind) ->
            case compileList({e, ind, e2}, env, emptyBuffer()) of [env, code] ->
              [false, env, code <+ STA]
            esac
        | e1 ->
            case genLabels(env, 2) of [e1End, e2End, env] ->
              case compile(e1End, env, e1) of [e1EndUsed, env, e1Code] ->
                case compile(e2End, env, e2) of [e2EndUsed, env, e2Code] ->
                  [false, env, e1Code <+> label(e1End, e1EndUsed) <+> e2Code <+> label(e2End, e2EndUsed) <+ STI]
                esac
              esac
            esac
        esac
    | Seq (e1, e2) ->
        case genLabel(env) of [e1End, env] ->
          case compile(e1End, env, e1) of [e1EndUsed, env, e1Code] ->
            case compile(lab, env, e2) of [labUsed, env, e2Code] ->
              [labUsed, env, e1Code <+> label(e1End, e1EndUsed) <+> e2Code]
            esac
          esac
        esac
    | If (e, e1, e2) ->
        case genLabels(env, 3) of [eEnd, e1End, e2Start, env] ->
          case compile (eEnd, env, e) of [eEndUsed, env, eCode] ->
            case compile (e1End, env, e1) of [e1EndUsed, env, e1Code] ->
              case compile (lab, env, e2) of [_, env, e2Code] ->
                [true, env, eCode <+> label(eEnd, eEndUsed) <+ CJMP ("z", e2Start) <+> e1Code <+> label(e1End, e1EndUsed)
                            <+ JMP(lab) <+ LABEL(e2Start) <+> e2Code]
              esac
            esac
          esac
        esac
    | While (cond, body) ->
        case genLabels(env, 3) of [startLab, condLab, condEnd, env] ->
          case compile(condEnd, env, cond) of [condEndUsed, env, condCode] ->
            case compile(condLab, env, body) of [_, env, bodyCode] ->
              [false, env, listBuffer({JMP (condLab), LABEL (startLab)}) <+> bodyCode <+ LABEL (condLab)
                           <+> condCode <+> label(condEnd, condEndUsed) <+ CJMP ("nz", startLab)]

            esac
          esac
        esac
    | DoWhile (body, cond) ->
        case genLabels(env, 3) of [bodyLab, bodyEnd, condEnd, env] ->
          case compile(bodyEnd, env, body) of [bodyEndUsed, env, bodyCode] ->
            case compile(condEnd, env, cond) of [condEndUsed, env, condCode] ->
              [false, env, singletonBuffer(LABEL (bodyLab)) <+> bodyCode <+> label(bodyEnd, bodyEndUsed)
                           <+> condCode <+> label(condEnd, condEndUsed) <+ CJMP ("nz", bodyLab)]
            esac
          esac
        esac
    | Binop (op, l, r) ->
        case genLabels(env, 2) of [lEnd, rEnd, env] ->
          case compile(lEnd, env, l) of [lEndUsed, env, lCode] ->
            case compile(rEnd, env, r) of [rEndUsed, env, rCode] ->
              [false, env, lCode <+> label(lEnd, lEndUsed) <+> rCode <+> label(rEnd, rEndUsed) <+ BINOP(op)]
            esac
          esac
        esac
    | Ignore (e) ->
        case genLabel(env) of [eEnd, env] ->
          case compile(eEnd, env, e) of [eEndUsed, env, eCode] ->
            [false, env, eCode <+> label(eEnd, eEndUsed) <+ DROP]
          esac
        esac
    | Scope (ds, e) ->
        fun addDecl(env, d) {
          case d of
            Var (ds) -> foldl(addVar, env, ds)
          | Fun (name, args, _) ->
              case genFunLabel(env, name) of [fLab, env] -> addFun(env, name, fLab, size(args)) esac
          esac
        }

        fun addDef(env, d) {
          case d of
            Var (_) -> env
          | Fun (name, args, body) ->
              case lookupFun(env, name) of Fun (fLab, _) ->
                rememberFun(env, fLab, args, body)
              esac
          esac
        }

        fun globalVarsDef(env, ds) {
          fun addDef (code, v) {
            case v of
              Fun (_, _, _) -> code
            | Var (ds) -> foldl(fun (code, d) {code <+ GLOBAL (d)}, code, ds)
            esac
          }

          if isGlobal(env) then foldl(addDef, emptyBuffer(), ds) else emptyBuffer() fi
        }

        fun compileFun([env, code], Fun(fLab, args, body, state)) {
          case genLabel(foldl(addArg, beginFun(env, state), args)) of [funEnd, env] ->
            case compile(funEnd, env, body) of [funEndUsed, env, funCode] ->
              [env, code
                    <+  LABEL (fLab)
                    <+  BEGIN (fLab, size(args), getLocals(env))
                    <+> funCode
                    <+> label(funEnd, funEndUsed)
                    <+  END]
            esac
          esac
        }

        var code;

        case genLabel(foldl(addDef, foldl(addDecl, beginScope(env), ds), ds)) of [eEnd, newEnv] ->
          case compile(eEnd, newEnv, e) of [eEndUsed, newEnv, eCode] ->
            env := newEnv; code := globalVarsDef(env, ds) <+> eCode <+> label(eEnd, eEndUsed)
          esac
        esac;

        if isGlobal(env) then
          var funs, pair;
          code := singletonBuffer(BEGIN("main", 0, getLocals(env))) <+> code <+ END;
          while
            pair := getFuns(env);
            funs := case pair of [funs, newEnv] -> env := newEnv; funs esac;
            size(funs) > 0
          do
            case foldl(compileFun, [env, code], funs) of [newEnv, newCode] ->
              env := newEnv; code := newCode
            esac
          od
        else
          env := endScope(env)
        fi;
        [false, env, code]

    | Array (els) ->
        case compileList(els, env, emptyBuffer()) of [env, code] ->
          [false, env, code <+ ARRAY (size(els))]
        esac
    | String (s) -> [false, env, singletonBuffer(STRING (s))]
    | Sexp (_, els) ->
        case compileList(els, env, emptyBuffer()) of [env, code] ->
          [false, env, code <+ ARRAY (size(els))]
        esac
    | Set (ident, e) -> compile(lab, env, Assn(Ref(ident), e))
    | Elem (e, ind) ->
        case compileList({e, ind}, env, emptyBuffer()) of [env, code] ->
          [false, env, code <+ ELEM]
        esac
    | ElemRef (e, ind) -> failure ("got an unexpected elemref, e = %s, ind = %s\n", e.string, ind.string)
    | Call (fname, args) -> callCode(fname, args, fun(lab, nargs) {CALL (lab, nargs)})
    | Builtin (fname, args) -> callCode(fname, args, fun(lab, nargs) {BUILTIN (fname, nargs)})
    | x                 ->  failure ("compileSM for %s not implemented\n", x.string)
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
