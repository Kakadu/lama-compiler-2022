-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s, f)    -> sprintf ("LABEL %s, %d", s, f)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab, _) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      {} -> c
    | JMP (lab):_ -> eval (c, fromLabel (env, lab))
    | CJMP (cond, lab):insns ->
        case st of
          value:st ->
            if case cond of "z" -> value == 0 | _ -> value != 0 esac then
              eval ([st, cst, s, w], fromLabel (env, lab))
            else
              eval ([st, cst, s, w], insns)
            fi
        esac
    | CALL (f, _):insns -> eval ([st, [s, insns]:cst, s, w], fromLabel (env, f))
    | END:insns ->
        case cst of
          {} -> c
        | [s2, insns]:cst -> eval ([st, cst, s2, w], insns)
        esac
    | i:insns ->
      eval (
        case i of
          BINOP (op) -> case st of x:y:st -> [evalOp (op, y, x):st, cst, s, w] esac
        | CONST (value) -> [value:st, cst, s, w]
        | LD (x) -> [lookup (s, x):st, cst, s, w]
        | LDA (x) -> [x:st, cst, s, w]
        | ST (x) -> case st of value:_ -> assign (s, x, value); [st, cst, s, w] esac
        | STI -> case st of value:x:st -> assign (s, x, value); [value:st, cst, s, w] esac
        | DUP -> [st.fst:st, cst, s, w]
        | DROP -> [st.snd, cst, s, w]
        | LABEL (_, _) -> c
        | BEGIN (_, a, l) ->
            case take (st, a) of
              [st, args] ->
                var s2 = makeState (a, l);
                foldl (fun (i, arg) {assign (s2, Arg (i), arg); i + 1}, 0, args);
                [st, cst, s2, w]
            esac
        | GLOBAL (x) -> assign (s, Glb (x), 0); [st, cst, s, w]
        | SEXP (x, n) ->
            case take (st, n) of
              [st, values] -> [Sexp (x, listArray (values)):st, cst, s, w]
            esac
        | STRING (x) -> [x:st, cst, s, w]
        | ARRAY (n) ->
            case take (st, n) of
              [st, values] -> [listArray (values):st, cst, s, w]
            esac
        | STA ->
            case st of
              v:i:xs:st ->
                  [
                    ((case xs of
                        Sexp (_, values) -> values[i] := v
                      | values@#array -> values[i] := v
                      | values@#str -> values[i] := v
                      | x -> assign (s, x, v)
                      esac)
                    ):st, cst, s, w
                  ]
            esac
        | ELEM ->
            case st of
              i:x:st -> 
                [
                  (case x of
                    Sexp (_, values) -> values
                  | values @#str -> values
                  | values@#array -> values
                  esac
                  )[i]:st, cst, s, w
                ]
            esac
        | BUILTIN (f, n) ->
            case take (st, n) of
              [st, args] ->
                  case evalBuiltin (f, args, w) of
                    [v, w] -> [v:st, cst, s, w]
                  esac
            esac
        | META (m) ->
            case m of
              MF(loc) ->
                  case st of
                    v : _ -> error(sprintf("match failure, value %s", string(v)), loc)
                  esac
            esac
        | PATT (pat) ->
            case [pat, st] of
                [Sexp(x1, n), Sexp(x2, vs) : st] -> [(compare(x1, x2) == 0 && length(vs) == n):st, cst, s, w]
              | [Array(n), vs@#array : st] -> [(length(vs) == n):st, cst, s, w]
              | [_, _ : st] -> [0:st, cst, s, w]
            esac
        esac,
        insns
      )
    esac
  }
  

  -- printf ("%s\n", showSM (insns));
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab, false))
      else emptyBuffer()
    fi
  }

  fun compile(lab, env, stmt) {
    case stmt of
        Skip               -> [false, env, emptyBuffer()]
      | Var (x)            -> [false, env, singletonBuffer(LD(lookupVal(env, x)))]
      | Ref (x)            -> [false, env, singletonBuffer(LDA(lookupVar(env, x))) <+ DUP]
      | Const (n)          -> [false, env, singletonBuffer(CONST(n))]
      | Assn (Ref(x), e)   ->
        case genLabel(env) of
          [stLab, env] ->
            case compile(stLab, env, e) of
              [stLabUsed, env, code] -> [false, env, code <+> label(stLab, stLabUsed) <+ ST(lookupVar(env, x))]
            esac
        esac
      | Assn (e1, e2)      ->
        case genLabels(env, 2) of
          [eLab, stLab, env] ->
            case compile(eLab, env, e1) of
              [eLabUsed, env, lCode] ->
                case compile(stLab, env, e2) of
                  [stLabUsed, env, eCode] -> [false, env, lCode <+> label(eLab, eLabUsed) <+> eCode <+> label(stLab, stLabUsed) <+ STA]
                esac
            esac
        esac
      | Set (x, e)         ->
        case genLabel(env) of
          [stLab, env] ->
            case compile(stLab, env, e) of
              [stLabUsed, env, code] -> [false, env, code <+> label(stLab, stLabUsed) <+ ST(lookupVal(env, x))]
            esac
        esac
      | Seq (e1, e2)       ->
        case genLabel(env) of
          [s2Lab, env] ->
            case compile(s2Lab, env, e1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, e2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | If (e, b1, b2)     ->
        case genLabels(env, 2) of
          [cjmpLab, elseLab, env] ->
            case compile(cjmpLab, env, e) of
              [cjmpLabUsed, env, condCode] ->
                case compile(lab, env, b1) of
                  [_, env, mainCode] ->
                    case compile(lab, env, b2) of
                      [_, env, elseCode] ->
                        [
                          true,
                          env,
                          condCode <+> label(cjmpLab, cjmpLabUsed) <+ CJMP("z", elseLab) <+> mainCode <+ JMP(lab) <+ LABEL(elseLab, false) <+> elseCode
                        ]
                    esac
                esac
            esac
        esac
      | Case (x, brs, loc)      ->
        fun genDropLabel(baseLab, depth) {
          if depth > 0 then sprintf("%s_drop_%d", baseLab, depth) else baseLab fi
        }

        fun compilePatt(p, lab) {
          fun compileOne(p, depth, maxDepth) {
            var maxDepth = if maxDepth > depth then maxDepth else depth fi;
            case p of
                Wildcard    -> [maxDepth, emptyBuffer()]
              | Const(n)    -> [maxDepth, singletonBuffer(DUP) <+ CONST(n) <+ BINOP("==") <+ CJMP("z", genDropLabel(lab, depth))]
              | Array(ps)   ->
                case compileMany(ps, depth, maxDepth) of
                  [maxDepth, code] -> [maxDepth, singletonBuffer(DUP) <+ PATT(Array(size(ps))) <+ CJMP("z", genDropLabel(lab, depth)) <+> code]
                esac
              | Sexp(x, ps) ->
                case compileMany(ps, depth, maxDepth) of
                  [maxDepth, code] -> [maxDepth, singletonBuffer(DUP) <+ PATT(Sexp(x, size(ps))) <+ CJMP("z", genDropLabel(lab, depth)) <+> code]
                esac
              | Named(_, p) -> compileOne(p, depth, maxDepth)
            esac
          }

          fun compileMany(ps, depth, maxDepth) {
            foldl(
              fun ([i, [maxDepth, code]], p) {
                case compileOne(p, depth + 1, maxDepth) of
                  [maxDepth, pCode] -> [i + 1, [maxDepth, code <+ DUP <+ CONST(i) <+ ELEM <+> pCode <+ DROP]]
                esac
              },
              [0, [maxDepth, emptyBuffer()]],
              ps
            ).snd
          }

          compileOne(p, 0, 0)
        }

        fun compileDrops(baseLab, depth) {
          fix(fun (rec) {
            fun (code, depth) {
              if depth == 0 then code else rec(code <+ LABEL(genDropLabel(baseLab, depth), false) <+ DROP, depth - 1) fi
            }
          })(emptyBuffer(), depth)
        }

        case genLabel(env) of
          [mfLab, env] ->
            case foldr(
              fun ([nextBrLab, env, code], [p, br]) {
                case genLabel(env) of
                  [thisBrLab, env] ->
                    case compilePatt(p, nextBrLab) of
                      [depth, pattCode] ->
                        case compile(lab, env, br) of
                          [_, env, brCode] ->
                            [
                              thisBrLab,
                              env,
                              singletonBuffer(LABEL(thisBrLab, false)) <+> pattCode <+ DROP <+> brCode <+ JMP(lab) <+> compileDrops(nextBrLab, depth) <+> code
                            ]
                        esac
                    esac
                esac
              },
              [mfLab, env, emptyBuffer()],
              brs
            ) of
              [_, env, code] ->
                [
                  true,
                  env,
                  singletonBuffer(LD(lookupVal(env, x))) <+> code <+ LABEL(mfLab, false) <+ META(MF(loc))
                ]
            esac
        esac
      | While (e, b)       ->
        case genLabels(env, 3) of
          [condLab, bodyLab, cjmpLab, env] ->
            case compile(condLab, env, b) of
              [_, env, bodyCode] ->
                case compile(cjmpLab, env, e) of
                  [cjmpLabUsed, env, condCode] ->
                    [
                      false,
                      env,
                      singletonBuffer(JMP(condLab)) <+ LABEL(bodyLab, true) <+> bodyCode <+ LABEL(condLab, false) <+> condCode <+> label(cjmpLab, cjmpLabUsed) <+ CJMP("nz", bodyLab)
                    ]
                esac
            esac
        esac
      | DoWhile (b, e)     ->
        case genLabels(env, 3) of
          [condLab, bodyLab, cjmpLab, env] ->
            case compile(condLab, env, b) of
              [condLabUsed, env, bodyCode] ->
                case compile(cjmpLab, env, e) of
                  [cjmpLabUsed, env, condCode] ->
                    [
                      false,
                      env,
                      singletonBuffer(LABEL(bodyLab, true)) <+> bodyCode <+> label(condLab, condLabUsed) <+> condCode <+> label(cjmpLab, cjmpLabUsed) <+ CJMP("nz", bodyLab)
                    ]
                esac
            esac
        esac
      | Binop (op, e1, e2) ->
        case genLabels(env, 2) of
          [rLab, opLab, env] ->
            case compile(rLab, env, e1) of
              [rLabUsed, env, lCode] ->
                case compile(opLab, env, e2) of
                  [opLabUsed, env, rCode] ->
                    [
                      false,
                      env,
                      lCode <+> label(rLab, rLabUsed) <+> rCode <+> label(opLab, opLabUsed) <+ BINOP(op)
                    ]
                esac
            esac
        esac
      | Call (f, as)       ->
        case genLabel(env) of
          [callLab, env] ->
            case compile(callLab, env, foldr(fun (e, a) { Seq(a, e) }, Skip, as)) of
              [callLabUsed, env, argsCode] ->
                case lookupFun(env, f) of
                  Fun (fLab, na) ->
                    if (compare(fLab[0], '$') == 0)
                      then
                        case compile(lab, env, Builtin(f, as)) of
                          [labUsed, env, builtinCode] -> [labUsed, env, argsCode <+> label(callLab, callLabUsed) <+> builtinCode]
                        esac
                      else
                        [false, env, argsCode <+> label(callLab, callLabUsed) <+ CALL(fLab, na)]
                    fi
                esac
            esac
        esac
      | Scope (ds, e)      ->
        case
          foldl(
            fun ([env, fs, gs], d) {
              case d of
                  Val (ns)       -> [addVals(env, ns), fs, if isGlobal(env) then foldl(fun (gs, n) { gs <+ GLOBAL(n) }, gs, ns) else gs fi]
                | Var (ns)       -> [addVars(env, ns), fs, if isGlobal(env) then foldl(fun (gs, n) { gs <+ GLOBAL(n) }, gs, ns) else gs fi]
                | Fun (n, as, b) -> case genFunLabel(env, n) of [fLab, env] -> [addFun(env, n, fLab, size(as)), [fLab, as, b]:fs, gs] esac
              esac
            },
            [beginScope(env), { }, emptyBuffer()],
            ds
          )
        of
          [env, fs, gs] ->
            case compile(lab, foldr(fun (env, [fLab, as, b]) { rememberFun(env, fLab, as, b) }, env, fs), e) of
              [labUsed, env, code] -> [labUsed, endScope(env), gs <+> code]
            esac
        esac
      | Ignore (e)         ->
        case genLabel(env) of
          [dropLab, env] ->
            case compile(dropLab, env, e) of
              [dropLabUsed, env, code] -> [false, env, code <+> label(dropLab, dropLabUsed) <+ DROP]
            esac
        esac
      | String (x)         -> [false, env, singletonBuffer(STRING(x))]
      | Array (es)         ->
        case genLabel(env) of
          [arrayLab, env] ->
            case compile(arrayLab, env, foldr(fun (e, a) { Seq(a, e) }, Skip, es)) of
              [arrayLabUsed, env, elemsCode] -> [false, env, elemsCode <+> label(arrayLab, arrayLabUsed) <+ ARRAY(size(es))]
            esac
        esac
      | Sexp (x, es)       ->
        case genLabel(env) of
          [sexpLab, env] ->
            case compile(sexpLab, env, foldr(fun (e, a) { Seq(a, e) }, Skip, es)) of
              [sexpLabUsed, env, elemsCode] -> [false, env, elemsCode <+> label(sexpLab, sexpLabUsed) <+ SEXP(x, size(es))]
            esac
        esac
      | Elem (e, i)        ->
        case genLabel(env) of
          [elemLab, env] ->
            case compile(elemLab, env, ElemRef(e, i)) of
              [elemLabUsed, env, code] -> [false, env, code <+> label(elemLab, elemLabUsed) <+ ELEM]
            esac
        esac
      | ElemRef (e, i)     ->
        case genLabel(env) of
          [iLab, env] ->
            case compile(iLab, env, e) of
              [iLabUsed, env, eCode] ->
                case compile(lab, env, i) of
                  [labUsed, env, iCode] -> [labUsed, env, eCode <+> label(iLab, iLabUsed) <+> iCode]
                esac
            esac
        esac
      | Builtin (f, as)    ->
        case lookupFun(env, f) of
          Fun (fLab, na) -> [false, env, singletonBuffer(BUILTIN(substring(fLab, 1, length(fLab) - 1), na))]
        esac
    esac
  }

  case initCompEnv().beginScope.addFun("read", "$read", 0)
    .addFun("write", "$write", 1)
    .addFun("length", "$length", 1).genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, env, mainCode] ->
          fun compileFuns(env, fs) {
            case fs of
                { }                      -> emptyBuffer()
              | Fun(fLab, as, b, s) : fs ->
                case genLabel(addArgs(beginFun(env, s), as)) of
                  [endLab, env] ->
                    case compile(endLab, env, b) of
                      [endLabUsed, env, bCode] ->
                        singletonBuffer(LABEL(fLab, false)) <+ BEGIN(fLab, size(as), getLocals(env)) <+> bCode <+> label(endLab, endLabUsed) <+ END <+> compileFuns(env, fs)
                    esac
                esac
            esac
          }

          getBuffer $
            case getFuns(env) of
              [fs, env] ->
                singletonBuffer(LABEL("main", false)) <+ BEGIN("main", 0, getLocals(env)) <+> mainCode <+> label(endLab, endLabUsed) <+ END <+> compileFuns(endScope(env), fs)
            esac
      esac
  esac
}