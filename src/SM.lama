-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}
fun evalSMSingleIns([stack, state, w], i) {
  case i of
    READ      -> case readWorld(w) of [v, w] -> [v : stack, state, w] esac
  | WRITE     -> case stack of v : stack -> [stack, state, writeWorld(v, w)] esac
  | BINOP (s) -> case stack of r : l : stack -> [evalBinop(s, l, r) : stack, state, w] esac
  | LD    (x) -> [state(x) : stack, state, w]
  | ST    (x) -> case stack of v : stack -> [stack, state <- [x, v], w] esac
  | CONST (n) -> [n : stack, state, w]
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, [stack, state, world], insns) {
  case insns of
    instr : prog -> 
      case instr of
        JMP (l) -> eval(env, [stack, state, world], fromLabel(env, l))
        | CJMP (c, l) ->
          case stack of
            v : vals -> eval(env, [vals, state, world], if v == c then fromLabel(env, l) else prog fi)
          esac
        | _ ->  eval(env, evalInstr([stack, state, world], instr), prog)
      esac
    | {} -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}
fun readInstr ([stack, state, world]) {
  case readWorld(world) of
    [v, newWorld]-> [v:stack, state, newWorld]
  esac
}

fun evalInstr([stack, st, world], instr) {
  case instr of
    READ      -> 
      case readWorld(world) of
        [v, newWorld] -> [v:stack, st, newWorld]
      esac                                      
    | WRITE     -> 
      case stack of
        v : vals -> [vals, st, writeWorld(v, world)]
      esac
    | BINOP (op) -> 
      case stack of 
        a : b : vals -> [evalBinop(op, b, a) : vals, st, world]
      esac
    | LD (x) -> [st(x): stack, st, world]
    | ST (x) -> 
      case stack of
        v : vals -> [vals, st <- [x, v], world] 
      esac 
    | CONST (n) -> [n:stack, st, world]
    | LABEL (s) -> [stack, st, world]
  esac
}
-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v) -> singletonBuffer(LD(v))                        |
    Const (c) -> singletonBuffer(CONST(c))                   |
    Binop (op, x, y) -> compileExpr(x) <+> compileExpr(y) <+> singletonBuffer(BINOP(op))
  esac 
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (c, a, b) ->
        case env.genLabels(2) of
          [thenLab, elseLab, env] ->
            case compile(thenLab, env, a) of 
              [thenLabUsed, env, aCode] ->
                case compile(lab, env, b) of
                  [_, env, bCode] ->
                    [true, env, 
                    compileExpr(c) <+ CJMP (0, elseLab) <+> aCode <+> label(thenLab, thenLabUsed) <+ JMP(lab) <+> label(elseLab, true) <+> bCode]
                esac
            esac
        esac
    | While (c, b) -> 
        case env.genLabels(2) of
          [startLab, bodyLab, env] ->
            case compile(bodyLab, env, b) of
              [bodyLabUsed, env, bCode] -> 
                [true, env,
                label(startLab, true) <+> compileExpr(c) <+ CJMP (0, lab) <+> bCode <+> label(bodyLab, bodyLabUsed) <+ JMP (startLab)]
            esac
        esac
    | DoWhile (b, c) -> 
        case env.genLabels(2) of
          [bodyLab, startLab, env] -> 
            case compile(bodyLab, env, b) of
              [bodyLabUsed, env, bCode] ->
                [true, env,
                label(startLab, true) <+> bCode <+> label(bodyLab, bodyLabUsed) <+> compileExpr(c) <+ CJMP(0, lab) <+ JMP(startLab)]
            esac
        esac
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
