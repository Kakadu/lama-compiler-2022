-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun createLocal (st, a, l) {
    case take (st, a) of
      [st, a] ->
        [st, [listArray (a), initArray (l, fun (_) { 0 })]]
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
fun eval (c@[st, cst, s, w], insns) {
  case insns of
    {} -> c
    | insn : insnsT -> 
      case insn of
        JMP (lab) -> eval (c, fromLabel(env, lab))
        | CJMP (cond, lab) -> 
          case st of
            h : t -> eval ([t, cst, s, w], 
                          if (case cond of 
                              "nz" -> h == true
                              | "z" -> h == false 
                              esac)
                          then fromLabel(env, lab)
                          else insnsT
                          fi
                          )
          esac
        | LABEL (lab) -> eval (c, insnsT)
        | CALL (f, _) -> eval ([st, [s, insnsT] : cst, s, w], fromLabel (env, f))
        | END ->
            case cst of
                {}-> c
              | [s, insn] : cst -> eval ([st, cst, s, w], insn) 
            esac
        | _ ->   eval (evalInsn([st, cst, s, w], insn), insnsT)
      esac
  esac
}

fun evalInsn (c@[st, cst, s, w], insn) {
  case insn of
  READ -> 
    case readWorld(w) of
      [v, nwrld] -> [v : st, cst, s, nwrld]
    esac
  | ST (v) -> 
    case st of 
      h : _ -> 
        assign (s, v, h); 
        [st, cst, s, w]
    esac
  | STI -> 
      case st of
        v : Ref(x) : st -> 
        assign (s, x, v);
        [v : st, cst, s, w]
      esac
  | LD (v) -> [lookup (s, v) : st, cst, s, w]
  | LDA (x) -> [Ref (x) : st, cst, s, w]
  | BINOP (op) -> 
      case st of
        h1 : h2 : t -> [evalOp(op, h2, h1) : t, cst, s, w]
      esac
  | CONST (v) -> [v : st, cst, s, w]
  | WRITE ->
      case st of
        h : t -> [t, cst, s, writeWorld(h, w)]
      esac
  | DROP ->
      case st of
        _ : stT -> [stT, cst, s, w]
      esac
  -- | END ->
  --   case cst of
  --       {} -> [st, cst, s, w]
  --     | [s, insns] : cst -> [st, cst, s, w]
  --   esac
  | BEGIN (_, a, l) ->
    case createLocal (st, a, l) of
      [st, s] -> [st, cst, s, w]
    esac
  | GLOBAL (x) -> 
    assign (s, Glb (x), 0);
    [st, cst, s, w]
  esac
}
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}
-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (v) -> {LD(v)}
    |Const (c) -> {CONST (c)}
    |Binop (op,e1,e2)-> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP(op)}
  esac
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (v) -> {LD(v)}
    |Const (c) -> {CONST (c)}
    |Binop (op,e1,e2)-> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]
    | Write (e)      -> 
        case genLabel(env) of
          [l, env] ->
            case compile (l, env, e) of
              [lUsed, env, code] -> [false, env, code <+> label (l, lUsed) <+ WRITE]
            esac
        esac    
    | Var (x)        -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Const (n)      -> [false, env, singletonBuffer (CONST (n))]
    | Ref (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Assn  (x, e)   -> 
        case genLabels(env, 2) of
          [l1, l2, env] -> 
            case compile (l1, env, x) of
              [l1Used, env, xCode] -> 
                  case compile (l2, env, e) of
                    [l2Used, env, eCode] -> [false, env, xCode <+> label (l1, l1Used) <+> eCode <+> label (l2, l2Used) <+ STI]
                  esac
            esac
        esac
    | Seq (s1, s2) ->
        case genLabel(env) of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | Binop (op, e1, e2) ->
        case genLabels (env, 2) of
          [l1, l2, env] ->
            case compile (l1, env, e1) of
              [l1Used, env, e1Code] ->
                case compile (l2, env, e2) of
                  [l2Used, env, e2Code] -> [
                    false,
                    env,
                    e1Code <+> label (l1, l1Used) <+> e2Code 
                    <+> label (l2, l2Used) <+ BINOP (op)
                  ]
                esac
            esac
        esac
    | While (cond, body) -> 
      case env.genLabels(3) of
        [bodyL, condL, postCondL, env] ->
          case compile (condL, env, body) of 
            [_, env, bodyCode] -> 
              case compile (postCondL, env, cond) of
                [postCondLUsed, env, condCode] ->
                  [false, env, singletonBuffer (JMP (condL)) <+> label (bodyL, true) <+> bodyCode <+> label(condL, true) 
                  <+> condCode <+> label(postCondL, postCondLUsed) <+ CJMP("nz", bodyL)]
              esac
          esac
      esac
    | DoWhile (body, cond) ->
      case env.genLabels(3) of
        [bodyL, condL, postCondL, env] ->
          case compile (condL, env, body) of 
            [condLUsed, env, bodyCode] -> 
            case compile (postCondL, env, cond) of
              [postCondLUsed, env, condCode] ->
                [false, env, label (bodyL, true) <+> bodyCode <+> label(condL, condLUsed) 
                <+> condCode <+> label(postCondL, postCondLUsed) <+ CJMP("nz", bodyL)]
            esac 
          esac 
      esac
    | If (cond, body1, body2) ->
        case env.genLabels(2) of
          [elseL, postCondL, env] -> 
          case compile (lab, env, body1) of
            [_, env, thenCode] -> 
              case compile (lab, env, body2) of
                [_, env, elseCode] -> 
                case compile (postCondL, env, cond) of
                  [postCondLUsed, env, condCode] ->
                    [true, env, condCode <+> label (postCondL, postCondLUsed) <+ CJMP ("z", elseL) 
                    <+> thenCode <+ JMP(lab) <+> label (elseL, true) <+> elseCode]
                esac
              esac
          esac
        esac
      | Ignore (e) ->
        case genLabel (env) of
          [dropL, env] ->
            case compile (dropL, env, e) of
              [dropLUsed, env, code] -> [false, env, code <+> label (dropL, dropLUsed) <+ DROP]
            esac
        esac
      | Call (f, args) ->
        case lookupFun (env, f) of
          Fun (fLab, nParams) ->
            if size (args) != nParams then
              error (sprintf ("expected %d arguments for function ""%s"", but found %d", nParams, f, size (args)), getLoc (f))
            fi;
            case genLabel (env) of
              [callLab, env] ->
                case compile (callLab, env, foldl (
                  fun (acc, arg) { Seq (acc, arg) },
                  Skip,
                  args
                )) of
                  [callLabUsed, env, code] -> [false, env, code <+> label (callLab, callLabUsed) <+ CALL (fLab, nParams)]
                esac
            esac
        esac
      | Scope (defs, expr) ->
        case foldl (fun ([env, funs, globals], def) {
          case def of
              Var (names) -> [addVars (env, names), funs, if isGlobal (env) then names +++ globals else globals fi]
            | Fun (name, params, body) ->
              case genFunLabel (env, name) of
                [fLab, env] -> [addFun (env, name, fLab, size (params)), [fLab, params, body]:funs, globals]
              esac
          esac
        }, [beginScope (env), {}, {}], defs) of
          [env, funs, globals] ->
            case compile (lab, foldl (fun (env, [fLab, params, body]) { rememberFun (env, fLab, params, body) }, env, funs), expr) of
              [labUsed, env, code] -> [labUsed, endScope (env), listBuffer (map (fun (name) { GLOBAL (name) }, globals)) <+> code]
            esac
        esac
    | _              -> failure ("SM insn not implemented %s \n", stmt.string)
    esac
  }

  fun compileFun (env, f) {
    case f of
      Fun(fLab, params, body, state) ->
        case genLabel (addArgs (beginFun (env, state), params)) of
          [endLab, env] ->
            case compile (endLab, env, body) of
              [endLabUsed, env, code] ->
                listBuffer ({ LABEL (fLab), BEGIN (fLab, size (params), getLocals (env)) }) <+> code <+> label (endLab, endLabUsed) <+ END
            esac
        esac
    esac
  }

    fun compileFuns (env) {
    fun helper (env, fs, codePrefix) {
      case fs of
          f : fs -> helper (env, fs, codePrefix <+> compileFun (env, f))
        | { } ->
          case getFuns (env) of
              [{ }, env] -> codePrefix
            | [fs, env] -> helper (env, fs, codePrefix)
          esac
      esac
    }
    helper (env, { }, emptyBuffer ())
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
             case compile (endLab, env, stmt) of
        [endLabUsed, env, code] ->
          getBuffer $
            listBuffer ({ LABEL ("main"), BEGIN ("main", 0, getLocals (env)) }) <+> code <+> 
            label (endLab, endLabUsed) <+ END <+> compileFuns (env)
      esac
  esac
}
