-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluate binop. Takes string representation of the binop and operands.
fun evalBinop(binop, l, r) {
  case binop of
    "+" -> l + r
  | "-" -> l - r
  | "*" -> l * r
  | "/" -> l / r
  | "%" -> l % r
  | "<" -> l < r
  | ">" -> l > r
  | "<=" -> l <= r
  | ">=" -> l >= r
  | "==" -> l == r
  | "!=" -> l != r
  | "&&" -> l && r
  | "!!" -> l !! r
  esac
}

-- Evaluate a single instruction in the SM-configuration given.
-- Returns resulting configuration.
fun evalSMSingle([stack, state, w], i) {
  case i of
    READ      -> case readWorld(w) of [v, w] -> [v : stack, state, w] esac
  | WRITE     -> case stack of v : stack -> [stack, state, writeWorld(v, w)] esac
  | BINOP (s) -> case stack of r : l : stack -> [evalBinop(s, l, r) : stack, state, w] esac
  | LD    (x) -> [state(x) : stack, state, w]
  | ST    (x) -> case stack of v : stack -> [stack, state <- [x, v], w] esac
  | CONST (n) -> [n : stack, state, w]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | ins : insns -> eval(evalSMSingle(c, ins), insns)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v) -> {LD (v)}
  | Const (num) -> {CONST (num)}
  | Binop (binop, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP (binop)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (variable, e) -> compileExpr(e) +++ {ST (variable)}
  | Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
  | Skip -> {}
  | Read (variable) -> {READ, ST (variable)}
  | Write (e) -> compileExpr(e) +++ {WRITE}
  esac
}
