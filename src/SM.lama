-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- One stack machine's instruction interpreter. Takes an SM-configuration and an instruction,
-- returns a final configuration
fun evalInst (c, inst) {
  var stack = c[0], state = c[1], world = c[2];

  case inst of
    -- below num:stack is not a pattern matching, it's a list constructor
    READ      -> case readWorld (world) of [num, new_world] -> [num:stack, state, new_world] esac
    -- below num:tail is a pattern matching
  | WRITE     -> case stack of num:tail -> [tail, state, writeWorld (num, world)] esac
    -- note that x and y are swapped
  | BINOP (s) -> case stack of x:y:tail -> [evalBinop (s, y, x):tail, state, world] esac
  | LD    (x) -> [state (x):stack, state, world]
  | ST    (x) -> case stack of num:tail -> [tail, state <- [x, num], world] esac
  | CONST (n) -> [n:stack, state, world]
  | LABEL (s) -> c
  esac
}

fun evalJMP (l, env, c) {
  case env.fromLabel (l) of
    new_insns -> evalListOfInst (env, c, new_insns)
  esac
}

-- Checks if we should jump on CJMP inst.
-- Returns a [bool, configuration with one element popped from the stack]
fun isJump (c@[stack, state, world], cond)
{
  case stack of num:tail ->
    var new_c = [tail, state, world];
    case cond of
      "nz" -> if num then [true,  new_c] else [false, new_c] fi
    | "z"  -> if num then [false, new_c] else [true,  new_c] fi
    esac
  esac
}

fun evalListOfInst (env, c, insns) {
  case insns of
    {} -> c
  | inst:tail -> case inst of
                   JMP  (l)       -> l.evalJMP (env, c)
                 | CJMP (cond, l) -> case isJump (c, cond) of
                                       [jump, new_c] ->
                                         if jump then
                                           l.evalJMP (env, new_c) else
                                           evalListOfInst (env, new_c, tail)
                                         fi
                                     esac
                 | _              -> evalListOfInst (env, evalInst (c, inst), tail)
                 esac
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  -- insns is a stdlib's buffer of instructions, but we want to work with lists
  evalListOfInst (env, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (var_as_str)                       -> singletonBuffer (LD (var_as_str))
  | Const (num)                              -> singletonBuffer (CONST (num))
  | Binop (op_as_str, left_expr, right_expr) -> compileExpr (left_expr) <+> compileExpr (right_expr) <+ BINOP (op_as_str)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileDoWhile (loop_stmt, e, env) {
    case env.genLabels (2) of
      [loop_lab, loop_stmt_lab, env] ->
        case compile (loop_stmt_lab, env, loop_stmt) of
          [labUsed, env, loop_stmt_code] ->
            [env, singletonBuffer (LABEL (loop_lab)) <+>
                  loop_stmt_code                     <+>
                  label (loop_stmt_lab, labUsed)     <+>
                  compileExpr (e)                    <+
                  CJMP ("nz", loop_lab)]
        esac
    esac
  }

  -- We don't care if loop_stmt_lab is used by loop_stmt,
  -- we use it anyway to jump to the expression code
  fun compileWhile (loop_stmt, e, env) {
    case env.genLabels (2) of
      [loop_lab, loop_stmt_lab, env] ->
        case compile (loop_stmt_lab, env, loop_stmt) of
          [_, env, loop_stmt_code] ->
            [env, singletonBuffer (JMP (loop_stmt_lab)) <+
                  LABEL (loop_lab)                      <+>
                  loop_stmt_code                        <+
                  LABEL (loop_stmt_lab)                 <+>
                  compileExpr (e)                       <+
                  CJMP ("nz", loop_lab)]
        esac
    esac
  }

  -- compiled e
  -- jump if not 0 to if_lab
  -- compiled else_stmt
  -- else_stmt_lab: (optional)
  -- jmp to the end (JMP lab)
  -- if_lab:
  -- compiled if_stmt
  -- lab: (ending label)
  fun compileIf (if_stmt, else_stmt, e, env, lab) {
    case env.genLabels (2) of
       [else_stmt_lab, if_lab, env] ->
         case compile (else_stmt_lab, env, else_stmt) of
           [labUsed, env, else_stmt_code] ->
             case compile (lab, env, if_stmt) of
               [_, env, if_stmt_code] ->
                 [env, compileExpr (e)                <+
                       CJMP ("nz", if_lab)            <+>
                       else_stmt_code                 <+>
                       label (else_stmt_lab, labUsed) <+
                       JMP (lab)                      <+
                       LABEL (if_lab)                 <+>
                       if_stmt_code                   <+
                       LABEL (lab)]
             esac
          esac
      esac
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | DoWhile (loop_stmt, e)          -> case compileDoWhile (loop_stmt, e, env)
                                           of [env, code] -> [false, env, code]
                                         esac
    | While   (e, loop_stmt)          -> case compileWhile   (loop_stmt, e, env)
                                           of [env, code] -> [false, env, code]
                                         esac
    | If      (e, if_stmt, else_stmt) -> case compileIf      (if_stmt, else_stmt, e, env, lab)
                                           of [env, code] -> [true, env, code]
                                         esac
    | _ -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
