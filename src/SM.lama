-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  var stack = c[0];
  var state = c[1]; 
  var world = c[2];
  case insns of
    {} -> c
  | insn : insns ->
      case insn of
        JMP (l) -> eval (env, c, fromLabel (env, l))
      | CJMP (cond, l) ->
          case stack of
            v : stack -> if case cond of "z" -> v == 0 | _ -> v != 0 esac
                         then eval (env, [stack, state, world], env.fromLabel (l))
                         else eval (env, [stack, state, world], insns)
                         fi 
          esac
      | _ -> eval (env, evalInstruction (c, insn), insns)
      esac
  esac
}

fun evalInstruction ([stack, state, world], insn) {
  case insn of
    READ ->
      var resultPair = readWorld(world);
      var value = resultPair[0];
      var newWorld = resultPair[1];
      [value:stack, state, newWorld]
  | WRITE -> [stack.tl, state, writeWorld(stack.hd, world)]
  | BINOP (op) ->
      var y = stack.hd;
      var x = stack.tl.hd;
      var value = evalOp (op, x, y);
      [value:stack.tl.tl, state, world]  
  | LD (name) -> [state (name):stack, state, world]
  | LDA (x) -> [x : stack, state, world]
  | ST (name) -> [stack.tl, state <- [name, stack.hd], world]
  | STI -> 
      var v = stack.hd;
      var x = stack.tl.hd;
      [v:stack.tl.tl, state <- [x, v], world]
  | CONST (n) -> [n:stack, state, world]
  | LABEL (_) -> [stack, state, world]
  | DUP -> [stack.hd:stack, state, world]
  | DROP -> [stack.tl, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read   (x)        -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write  (e)        -> 
        case env.genLabel of [eEndLab, env] ->
          case compile (eEndLab, env, e) of [eEndLabUsed, env, eCode] -> 
            [false, env, eCode <+> label (eEndLab, eEndLabUsed) <+ WRITE]
          esac
        esac
    | Assn (l, r) ->
        case env.genLabels (2) of [lEndLab, rEndLab, env] ->
          case compile (lEndLab, env, l) of [lEndLabUsed, env, lCode] ->
            case compile (rEndLab, env, r) of [rEndLabUsed, env, eCode] ->
              [false, env, lCode <+> 
                          label (lEndLab, lEndLabUsed) <+> 
                          eCode <+> 
                          label (rEndLab, rEndLabUsed) <+ 
                          STI]
            esac
          esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of [s2EndLab, env] ->
          case compile (s2EndLab, env, s1) of [s2EndLabUsed, env, s1Code] ->
            case compile (lab, env, s2) of [labUsed, env, s2Code] -> 
              [labUsed, env, s1Code <+> label (s2EndLab, s2EndLabUsed) <+> s2Code]
            esac
          esac
        esac  
    | If (cond, thenStmt, elseStmt) -> 
        case env.genLabels (2) of [thenEndLab, elseEndLab, env] ->
          case compile (lab, env, thenStmt) of [thenEndLabUsed, env, thenCode] ->
            case compile (lab, env, elseStmt) of [elseEndLabUsed, env, elseCode] ->
              case compile (thenEndLab, env, cond) of [thenEndLabUsed, env, condCode] ->
                [true, env, condCode <+>
                            label (thenEndLab, thenEndLabUsed) <+
                            CJMP ("z", elseEndLab) <+>
                            thenCode <+
                            JMP (lab) <+
                            LABEL (elseEndLab) <+>
                            elseCode]
              esac
            esac
          esac
        esac    
    | Binop (op, l, r)  ->
        case env.genLabels (2) of [lEndLab, rEndLab, env] ->
          case compile (lEndLab, env, l) of [lEndLabUsed, env, lCode] ->
            case compile (rEndLab, env, r) of [rEndLabUsed, env, rCode] ->
              [false, env, lCode <+> 
                          label (lEndLab, lEndLabUsed) <+> 
                          rCode <+> 
                          label (rEndLab, rEndLabUsed) <+ 
                          BINOP (op)]
            esac
          esac
        esac
    | While (c, b) ->
        case env.genLabels (3) of [cStartLab, bEndLab, cEndLab, env] ->
          case compile (bEndLab, env, b) of [bEndLabUsed, env, bCode] ->
            case compile (cEndLab, env, c) of [cEndLabUsed, env, cCode] ->
                    [true, env, singletonBuffer (LABEL (cStartLab)) <+> 
                                cCode <+> 
                                label (cEndLab, cEndLabUsed) <+ 
                                CJMP ("z", lab) <+> 
                                bCode <+> 
                                label (bEndLab, bEndLabUsed) <+ 
                                JMP (cStartLab)]
            esac
          esac
        esac
    | DoWhile (b, c) ->
        case env.genLabels (3) of [bStartLab, bEndLab, cEndLab, env] ->
            case compile (bEndLab, env, b) of [bEndLabUsed, env, bCode] ->
                case compile (cEndLab, env, c) of [cEndLabUsed, env, cCode] ->
                    [false, env, singletonBuffer (LABEL (bStartLab)) <+> 
                                 bCode <+> 
                                 label (bEndLab, bEndLabUsed) <+> 
                                 cCode <+> 
                                 label (cEndLab, cEndLabUsed) <+ 
                                 CJMP ("nz", bStartLab)]
                esac
            esac
        esac
    | Ignore (e) ->
        case env.genLabel of [eEndLab, env] ->
          case compile (eEndLab, env, e) of [eEndLabUsed, env, eCode] ->
            [false, env, eCode <+> label (eEndLab, eEndLabUsed) <+ DROP]
          esac
        esac    
    | _ ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
