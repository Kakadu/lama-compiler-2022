-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                      -> m
            | LABEL (lbl) : tl        -> rec ([addMap (m, lbl, insns), tl])
            | BEGIN (name, _, _) : tl -> rec ([addMap (m, name, insns), tl])
            | _ : tl                  -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lbl) {
  env [0] (lbl)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun condSatisfied (value, suf) {
    case [suf, value] of
      ["z",  0] -> true
    | ["z",  _] -> false
    | ["nz", 0] -> false
    | ["nz", _] -> true
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, control_stack, state, world], insns) {
    var res, done = 0;
    while done == 0 do
      case insns of
        {} -> done := 1
      | ins : other ->
          case ins of
            READ ->
              case readWorld(world) of [value, new_world] ->
                stack := (value:stack);
                world := new_world
              esac
          | WRITE ->
              case stack of value:tail ->
                stack := tail;
                world := writeWorld(value, world)
              esac
          | BINOP (s) ->
              case stack of r:l:tail ->
                stack := (evalOp(s, l, r):tail)
              esac
          | LD (x) ->
              stack := (lookup(state, x) : stack)
          | ST (x) ->
              case stack of value:tail ->
                assign(state, x, value)
              esac
          | CONST (n) ->
              stack := (n:stack)
          | LABEL (s) ->
              skip
          | JMP (lbl) ->
              other := fromLabel(env, lbl)
          | CJMP (cond, lbl) ->
              case stack of n:tail ->
                if  (case cond of 
                      "z" -> n == 0
                    | "nz" -> n != 0 esac)
                then
                  other := fromLabel(env, lbl)
                fi;
                stack := tail
              esac
          | LDA (x) ->
              stack := (x:stack)
          | STI ->
              case stack of value:var_name:tail ->
                assign(state, var_name, value);
                stack := (value:tail)
              esac
          | DUP ->
              case stack of value:tail ->
                stack := (value:value:tail)
              esac
          | DROP ->
              case stack of value:tail ->
                stack := tail
              esac
          | BEGIN (_, nargs, nlocs) ->
              case take(stack, nargs) of [tail, args] ->
                var idx = 0;
                fun putArg(state, arg) {
                  idx := idx + 1; assign(state, Arg (idx - 1), arg); state
                }

                state := foldl(putArg, makeState(nargs, nlocs), args);
                stack := tail
              esac
          | CALL (name, _) ->
              control_stack := ([state, other]:control_stack);
              other := fromLabel(env, name)
          | END ->
              case control_stack of
                {} -> done := 1
              | [new_state, new_insns]:new_tail ->
                  control_stack := new_tail;
                  state := new_state;
                  other := new_insns
              esac
          | GLOBAL (x) -> assign(state, Glb (x), 0)
          esac;
          insns := other
      esac
    od;
    [stack, control_stack, state, world]
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lbl, env] -> lbl : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lbl, lblUsed) {
    if lblUsed
    then singletonBuffer (LABEL (lbl))
    else emptyBuffer ()
    fi
  }

  fun compile (lbl, env, stmt) {
    case stmt of
      Skip ->
        [false, env, emptyBuffer ()]
    | Var (x) ->
        [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref (x) ->
        [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const (n) ->
        [false, env, singletonBuffer (CONST (n))]
    | Assn (e1, e2) ->
        case genLabels(env, 2) of [lbl1End, lbl2End, env] ->
          case compile(lbl1End, env, e1) of [lbl1EndUsed, env, lbl1Code] ->
            case compile(lbl2End, env, e2) of [lbl2EndUsed, env, lbl2Code] ->
              [false, env, lbl1Code <+> label(lbl1End, lbl1EndUsed) <+> lbl2Code <+> label(lbl2End, lbl2EndUsed) <+ STI]
            esac
          esac
        esac
    | Seq (e1, e2) ->
        case genLabel(env) of [lbl1End, env] ->
          case compile(lbl1End, env, e1) of [lbl1EndUsed, env, lbl1Code] ->
            case compile(lbl, env, e2) of [lblUsed, env, lbl2Code] ->
              [lblUsed, env, lbl1Code <+> label(lbl1End, lbl1EndUsed) <+> lbl2Code]
            esac
          esac
        esac
    | Read (x) ->
        [false, env, listBuffer({LDA (lookupVar(env, x)), READ, STI, DROP})]
    | Write (e) ->
        case genLabel(env) of [lblEnd, env] ->
          case compile(lblEnd, env, e) of [lblEndUsed, env, eCode] ->
            [false, env, eCode <+> label(lblEnd, lblEndUsed) <+ WRITE]
          esac
        esac
    | If (e, e1, e2) ->
        case genLabels(env, 3) of [lblEnd, lbl1End, e2Start, env] ->
          case compile (lblEnd, env, e) of [lblEndUsed, env, eCode] ->
            case compile (lbl1End, env, e1) of [lbl1EndUsed, env, lbl1Code] ->
              case compile (lbl, env, e2) of [_, env, lbl2Code] ->
                [true, env, eCode <+> label(lblEnd, lblEndUsed) <+ CJMP ("z", e2Start) <+> lbl1Code <+> label(lbl1End, lbl1EndUsed)
                            <+ JMP(lbl) <+ LABEL(e2Start) <+> lbl2Code]
              esac
            esac
          esac
        esac
    | While (cond, body) ->
        case genLabels(env, 3) of [startLbl, condLbl, condEnd, env] ->
          case compile(condEnd, env, cond) of [condEndUsed, env, condCode] ->
            case compile(condLbl, env, body) of [_, env, bodyCode] ->
              [false, env, listBuffer({JMP (condLbl), LABEL (startLbl)}) <+> bodyCode <+ LABEL (condLbl)
                           <+> condCode <+> label(condEnd, condEndUsed) <+ CJMP ("nz", startLbl)]

            esac
          esac
        esac
    | DoWhile (body, cond) ->
        case genLabels(env, 3) of [bodyLbl, bodyEnd, condEnd, env] ->
          case compile(bodyEnd, env, body) of [bodyEndUsed, env, bodyCode] ->
            case compile(condEnd, env, cond) of [condEndUsed, env, condCode] ->
              [false, env, singletonBuffer(LABEL (bodyLbl)) <+> bodyCode <+> label(bodyEnd, bodyEndUsed)
                           <+> condCode <+> label(condEnd, condEndUsed) <+ CJMP ("nz", bodyLbl)]
            esac
          esac
        esac
    | Binop (op, l, r) ->
        case genLabels(env, 2) of [lEnd, rEnd, env] ->
          case compile(lEnd, env, l) of [lEndUsed, env, lCode] ->
            case compile(rEnd, env, r) of [rEndUsed, env, rCode] ->
              [false, env, lCode <+> label(lEnd, lEndUsed) <+> rCode <+> label(rEnd, rEndUsed) <+ BINOP(op)]
            esac
          esac
        esac
    | Ignore (e) ->
        case genLabel(env) of [lblEnd, env] ->
          case compile(lblEnd, env, e) of [lblEndUsed, env, eCode] ->
            [false, env, eCode <+> label(lblEnd, lblEndUsed) <+ DROP]
          esac
        esac
    | Scope (ds, e) ->
        fun addDecl(env, d) {
          case d of
            Var (ds) -> foldl(addVar, env, ds)
          | Fun (name, args, _) ->
              case genFunLabel(env, name) of [funcLbl, env] -> addFun(env, name, funcLbl, size(args)) esac
          esac
        }

        fun addDef(env, d) {
          case d of
            Var (_) -> env
          | Fun (name, args, body) ->
              case lookupFun(env, name) of Fun (funcLbl, _) ->
                rememberFun(env, funcLbl, args, body)
              esac
          esac
        }

        fun globalVarsDef(env, ds) {
          fun addDef (code, v) {
            case v of
              Fun (_, _, _) -> code
            | Var (ds) -> foldl(fun (code, d) {code <+ GLOBAL (d)}, code, ds)
            esac
          }

          if isGlobal(env) then foldl(addDef, emptyBuffer(), ds) else emptyBuffer() fi
        }

        fun compileFun([env, code], Fun(funcLbl, args, body, state)) {
          case genLabel(foldl(addArg, beginFun(env, state), args)) of [funEnd, env] ->
            case compile(funEnd, env, body) of [funEndUsed, env, funCode] ->
              [env, code
                    <+  BEGIN (funcLbl, size(args), getLocals(env))
                    <+> funCode
                    <+> label(funEnd, funEndUsed)
                    <+  END]
            esac
          esac
        }

        var code;

        case genLabel(foldl(addDef, foldl(addDecl, beginScope(env), ds), ds)) of [lblEnd, newEnv] ->
          case compile(lblEnd, newEnv, e) of [lblEndUsed, newEnv, eCode] ->
            env := newEnv; code := globalVarsDef(env, ds) <+> eCode <+> label(lblEnd, lblEndUsed)
          esac
        esac;

        if isGlobal(env) then
          var funs, pair;
          code := singletonBuffer(BEGIN("main", 0, getLocals(env))) <+> code <+ END;
          while
            pair := getFuns(env);
            funs := case pair of [funs, newEnv] -> env := newEnv; funs esac;
            size(funs) > 0
          do
            case foldl(compileFun, [env, code], funs) of [newEnv, newCode] ->
              env := newEnv; code := newCode
            esac
          od
        else
          env := endScope(env)
        fi;
        [false, env, code]

    | Call (funcName, args) ->
        fun loadArg([env, code], arg) {
          case genLabel(env) of [argEnd, env] ->
            case compile(argEnd, env, arg) of [argEndUsed, env, argCode] ->
              [env, code <+> argCode <+> label(argEnd, argEndUsed)]
            esac
          esac
        }

        case foldl(loadArg, [env, emptyBuffer()], args) of [env, code] ->
          case lookupFun(env, funcName) of Fun(funcLbl, _) ->
            [false, env, code <+ CALL (funcLbl, size(args))]
          esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}