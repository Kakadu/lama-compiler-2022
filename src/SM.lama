-- Stack machine.

import List;
import World;
import Array;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun evalBinop ([x:y:stack, state, world], op) {
  [evalOp (op, y, x):stack, state, world]
}

fun evalRead ([stack, state, world]) {
  var res;
  res := readWorld(world);
  [res[0]:stack, state, res[1]]
}

fun evalWrite([x:stack, state, world]) {
  [stack, state, writeWorld(x, world)]
}

fun evalSt([v:stack, state, world], x) {
  [stack, state <- [x, v], world]
}

fun eval (c, insns) {
  var insns_arr;
  insns_arr := listArray (insns);
  for var i; i := 0, i < length (insns_arr), i := i + 1 do
    case insns_arr[i] of
      BINOP (op) -> c := evalBinop (c, op)
    | CONST (v) -> c:= [v:c[0], c[1], c[2]]
    | READ -> c := evalRead (c)
    | WRITE -> c := evalWrite (c)
    | LD (x) -> c := [c[1] (x):c[0], c[1], c[2]]
    | ST (x) -> c := evalSt (c, x)
    | _ -> failure("Unknown stack machine instruction")
    esac
  od;
  c
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (v, expr) -> compileExpr (expr) +++ {ST (v)}
  | Seq (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Read (v) -> {READ, ST (v)}
  | Write (expr) -> compileExpr (expr) +++ {WRITE}
  esac
}
