-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, st, w], insns) {
    case insns of
      {}                       -> [stack, cst, st, w]
    | JMP (lab) : _            -> eval ([stack, cst, st, w], env.fromLabel (lab))
    | CJMP (cond, lab) : insns ->
      case stack of
        n : stack -> if case cond of "z" -> n == 0 | _ -> n != 0 esac
                     then eval ([stack, cst, st, w], env.fromLabel (lab))
                     else eval ([stack, cst, st, w], insns)
                     fi
      esac
    | CALL (f, _) : insn -> eval ([stack, [st, insn] : cst, st, w], fromLabel (env, f))
    | END : insn ->
      case cst of
        {}              -> [stack, cst, st, w]
      | [st, insn] : cst -> eval ([stack, cst, st, w], insn) 
      esac
    | ins : insns              ->
      eval (
        case ins of
          LD (x)     -> [lookup (st, x) : stack, cst, st, w]
        | LDA (x)    -> [x : stack, cst, st, w]
        | CONST (n)  -> [n : stack, cst, st, w]
        | BINOP (op) -> case stack of h : m : stack -> [evalOp (op, m, h) : stack, cst, st, w] esac
        | ST (x)     -> case stack of h : _ -> assign (st, x, h); [stack, cst, st, w] esac
        | STI        -> case stack of h : m : stack -> assign (st, m, h); [h : stack, cst, st, w] esac
        | LABEL (_)  -> [stack, cst, st, w]
        | DROP       -> [stack.tl, cst, st, w]
        | DUP        -> [stack.fst : stack, cst, st, w]
        | GLOBAL (x) -> assign (st, Glb (x), 0); [stack, cst, st, w]
        | BEGIN (_, a, l) -> case take (stack, a) of
                              [stack, args] ->
                                var st = makeState (a, l);
                                foldl (fun (ins, arg) {assign (st, Arg (ins), arg); ins + 1}, 0, args);
                                [stack, cst, st, w]
                             esac
         | BUILTIN (f, n) -> case take (stack, n) of
                              [stack, a] -> case evalBuiltin (f, a, w) of
                                              [v, w] -> [v : stack, cst, st, w] 
                                            esac
                             esac
        | STA       -> case stack of
                        v : (i@#val) : (a@#array) : stack -> a[i] := v; [v : stack, cst, st, w]
                      | v : (i@#val) : (a@#str) : stack -> a[i] := v; [v : stack, cst, st, w]
                      | v : (i@#val) : (Sexp (_, a)) : stack -> a[i] := v; [v : stack, cst, st, w]
                      esac
        | ELEM      -> case stack of
                         (i@#val) : (a@#array) : stack -> [a[i] : stack, cst, st, w]
                       | (i@#val) : (a@#str) : stack -> [a[i] : stack, cst, st, w]
                       | (i@#val) : (Sexp (_, a)) : stack -> [a[i] : stack, cst, st, w]
                       esac
        | SEXP (t, n) -> case take (stack, n) of
                          [stack, a] -> [Sexp (t, listArray $ a) : stack, cst, st, w]
                         esac
        | ARRAY (n) -> case take (stack, n) of
                        [stack, a] -> [listArray (a) : stack, cst, st, w]
                       esac
        | STRING (x) -> [x : stack, cst, st, w]
        esac,
        insns
      )
    esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileMany (lab, env, exprs) {
    case exprs of
        {e}    -> compile (lab, env, e)
      | e : es ->
        case env.genLabel of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eUsed, env, eCode] ->
                case compileMany (lab, env, es) of
                  [labUsed, env, esCode] -> [labUsed, env, eCode <+>
                                                           label (eLab, eUsed) <+>
                                                           esCode
                                            ]
                esac
            esac
        esac
    esac
  }
  
  fun compile (lab, env, expr) {
    case expr of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Seq (e1, e2)      -> compileMany (lab, env, {e1, e2})
    | Assn (ElemRef (a, i), e) -> 
      case genLabel (env) of
        [opLabel, env] ->
          case compileMany (opLabel, env, {a, i, e}) of
            [opUsed, env, lrCode] ->
              [false, env, lrCode <+>
                           label (opLabel, opUsed) <+
                           STA
              ]
          esac
      esac
    | Assn (Ref (x), e) ->
      case genLabel (env) of
        [aLabel, env] ->
          case compile (aLabel, env, e) of
            [aUsed, env, eCode] ->
              [false, env, eCode <+>
                           label (aLabel, aUsed) <+
                           ST (lookupVar (env, x))
              ]
          esac
      esac
    | Assn (l, r) ->
      case genLabel (env) of
        [opLabel, env] ->
          case compileMany (opLabel, env, {l, r}) of
            [opUsed, env, lrCode] -> [false, env, lrCode <+>
                                                  label (opLabel, opUsed) <+
                                                  STI
                                     ]
          esac
      esac
    | DoWhile (body, cond) ->
      case genLabels (env, 3) of
        [condLabel, bodyLabel, jumpLabel, env] ->
          case compile (condLabel, env, body) of
            [condLabelUsed, env, bodyCode] ->
              case compile (jumpLabel, env, cond) of
                [jumpLabelUsed, env, condCode] ->
                  [false, env, singletonBuffer (LABEL (bodyLabel)) <+>
                              bodyCode <+>
                              label (condLabel, condLabelUsed) <+>
                              condCode <+>
                              label (jumpLabel, jumpLabelUsed) <+                              
                              CJMP ("nz", bodyLabel)
                  ]
              esac
          esac
      esac
    | If (cond, th, el) -> 
      case genLabels (env, 2) of
       [jumpLabel, elseLabel, env] ->
        case compile (lab, env, th) of
          [labUsedInThen, env, thenCode] ->
            case compile (lab, env, el) of
              [labUsedInElse, env, elseCode] ->
                case compile (jumpLabel, env, cond) of
                  [jumpLabelUsed, env, condCode] ->
                    [true, env, condCode <+>
                                label (jumpLabel, jumpLabelUsed) <+>
                                singletonBuffer (CJMP ("z", elseLabel)) <+>
                                thenCode <+
                                JMP (lab) <+
                                LABEL (elseLabel) <+>
                                elseCode
                    ]
                esac
            esac
        esac
      esac
    | While (cond, body) ->
      case genLabels (env, 3) of
        [bodyLabel, condLabel, jumpLabel, env] ->
          case compile (condLabel, env, body) of
            [_, env, bodyCode] ->
              case compile (jumpLabel, env, cond) of
                [jumpLabelUsed, env, condCode] ->
                  [false, env, singletonBuffer (JMP (condLabel)) <+
                              LABEL (bodyLabel) <+>
                              bodyCode <+
                              LABEL (condLabel) <+>
                              condCode <+>
                              label (jumpLabel, jumpLabelUsed) <+
                              CJMP ("nz", bodyLabel)
                  ]
              esac
          esac
      esac
    | Ignore (e) ->
      case genLabel (env) of
        [iLabel, env] ->
          case compile (iLabel, env, e) of
            [iUsed, env, eCode] ->
              [false, env, eCode <+>
                           label (iLabel, iUsed) <+>
                           singletonBuffer (DROP)
              ]
          esac
      esac
    | Binop (op, l, r)  ->
      case genLabel (env) of 
        [opLabel, env] ->
          case compileMany(opLabel, env, {l, r}) of
            [opUsed, env, lrCode] ->
              [false, env, lrCode <+>
                            label (opLabel, opUsed) <+>
                            singletonBuffer (BINOP (op))
              ]
          esac
      esac
    | Call (f, args) -> 
      case genLabel (env) of
        [callLabel, env] ->
          case compile (callLabel, env, foldr (fun (e, a) { Seq(a, e) }, Skip, args)) of
            [callLabelUsed, env, argsCode] ->
                case lookupFun (env, f) of
                  Fun (fLabel, na) ->
                    if (compare (fLabel[0], '$') == 0)
                      then
                        case compile (lab, env, Builtin(f, args)) of
                          [labUsed, env, builtinCode] -> [labUsed, env, argsCode <+> label (callLabel, callLabelUsed) <+> builtinCode]
                        esac
                      else
                        [false, env, argsCode <+> label (callLabel, callLabelUsed) <+ CALL (fLabel, na)]
                    fi
                esac
          esac
      esac
    | Scope (defs, e) ->
      case foldl (fun ([env, funs, globalDefs], def) {
                    case def of
                        Var (ds)  -> [addVars (env, ds), funs, if env.isGlobal
                                                               then foldl (fun (globalDefs, name) {globalDefs <+ GLOBAL (name)}, globalDefs, ds)
                                                               else globalDefs
                                                               fi
                                      ]
                      | Fun (name, args, body) ->
                        case genFunLabel (env, name) of
                          [fLabel, env] -> [addFun (env, name, fLabel, args.size), [fLabel, args, body] : funs, globalDefs]
                        esac
                    esac
                  }, [beginScope (env), {}, {}], defs) of
        [env, funs, globalDefs] ->
          case compile (lab, foldl (fun (env, [fLabel, args, body]) {rememberFun (env, fLabel, args, body)}, env, funs), e) of
            [flag, env, code] -> [flag, endScope (env), globalDefs <+> code]
          esac 
      esac
    | Builtin (name, args)    ->
      case lookupFun(env, name) of
        Fun (fLabel, n) -> [false, env, singletonBuffer(BUILTIN(substring(fLabel, 1, length(fLabel) - 1), n))]
      esac
    | Array (es) ->
      case genLabel (env) of
        [aLabel, env] ->
          case compileMany (aLabel, env, es) of
            [aUsed, env, esCode] -> [false, env, esCode <+>
                                                 label (aLabel, aUsed) <+
                                                 ARRAY (es.size)
                                    ]
          esac
      esac
    | Sexp (s, es) ->
      case genLabel (env) of
        [aLabel, env] ->
          case compile (aLabel, env, foldr (fun (e, a) { Seq (a, e) }, Skip, es)) of
            [aUsed, env, esCode] -> [false, env, esCode <+>
                                                 label (aLabel, aUsed) <+
                                                 SEXP (s, es.size)
                                    ]
          esac
      esac
    | String (s) -> [false, env, singletonBuffer (STRING (s))]
    | Elem (a, i) ->
      case genLabel (env) of
        [eLabel, env] ->
          case compileMany (eLabel, env, {a, i}) of
            [eUsed, env, code] -> [false, env, code <+> 
                                               label (eLabel, eUsed) <+
                                               ELEM
                                  ]
          esac
      esac
    | Set (x, e) ->
      case genLabel (env) of
        [aLabel, env] ->
          case compile (aLabel, env, e) of
            [aUsed, env, eCode] -> [false, env, eCode <+> label (aLabel, aUsed) <+ ST (lookupVal (env, x))]
          esac
      esac
    | _ -> failure ("CompileSM not implemented for %s\n", expr.string)
    esac
  }

  fun compileFunctions (env, main) {
    fun iterate (env, acc, funList) {
      case funList of
        {} -> case getFuns (env) of
                [{}, env] -> acc
              | [fs, env] -> iterate (env, acc, fs)
              esac
      | Fun (f, args, body, state) : fs ->
        case genLabel (addArgs (beginFun (env, state), args)) of
          [endLab, env] ->
            case compile (endLab, env, body) of
              [endUsed, env, code] ->
                iterate (env,
                         acc <+
                         LABEL (f) <+
                         BEGIN (f, args.size, getLocals (env)) <+>
                         code <+>
                         label (endLab, endUsed) <+>
                         singletonBuffer (END), fs)
            esac
        esac
      esac
    }

    iterate (env, main, {})
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, expr) of
         [endLabUsed, env, code] -> 
          getBuffer (compileFunctions (env,
                            singletonBuffer (LABEL ("main")) <+
                            BEGIN ("main", 0, getLocals (env)) <+>
                            code <+>
                            label (endLab, endLabUsed) <+>
                            singletonBuffer (END)
                    ))
       esac
  esac
}
