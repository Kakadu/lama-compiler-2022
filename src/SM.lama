-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, world], insns) {
  fun evalInsn(c @ [stack, state, world], insn) {
    case insn of
      CONST (value) -> [value:stack, state, world]
      | READ        -> case readWorld(world) of [value, nwrld] -> [value:stack, state, nwrld] esac
      | WRITE       -> case stack of hd : tl -> [tl, state, writeWorld(hd, world)] esac
      | ST (value)  -> case stack of hd : tl -> [tl, state <- [value, hd], world] esac
      | LD (value)  -> [state(value):stack, state, world]
      | BINOP (op)  -> case stack of hd1 : hd2 : tl -> [evalBinOp(op, hd2, hd1):tl, state, world] esac
    esac
  }

  case insns of
    { }       -> c
    | hd : tl ->
      case hd of
        JMP (lab)          -> eval(env, c, env.fromLabel(lab))
        | CJMP (cond, lab) ->
          case stack of shd : stl ->
            eval(env, [stl, state, world], if (case cond of "nz" -> shd == true | "z" -> shd == false esac) then env.fromLabel(lab) else tl fi)
          esac
        | LABEL (lab)      -> eval(env, c, tl)
        | _                -> eval(env, evalInsn(c, hd), tl)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
    Const (n)                  -> singletonBuffer(CONST(n))
    | Var (x)                  -> singletonBuffer(LD(x))
    | Binop (op, expr1, expr2) -> compileExpr(expr1) <+> compileExpr(expr2) <+> singletonBuffer(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
-- Generates a buffer with an optional label
--    lab     --- the name of the label
--    labUsed --- a flag if the lebel is needed
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile(lab, env, stmt) {
    case stmt of
      Skip                   -> [false, env, emptyBuffer()]
      | Read  (x)            -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write (e)            -> [false, env, compileExpr(e) <+ WRITE]
      | Assn  (x, e)         -> [false, env, compileExpr(e) <+ ST(x)]
      | Seq   (s1, s2)       ->
        case env.genLabel of [s2Lab, env] ->
          case compile(s2Lab, env, s1) of [s2LabUsed, env, s1Code] ->
            case compile(lab, env, s2) of [labUsed, env, s2Code] ->
              [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
            esac
          esac
        esac
      | If (cond, body, el)  ->
        case env.genLabel of [elseLab, env] ->
          case compile(lab, env, body) of [_, env, mainCode] ->
            case compile(lab, env, el) of [_, env, elseCode] ->
              [
                true,
                env,
                compileExpr(cond) <+ CJMP("z", elseLab) <+> mainCode <+ JMP(lab) <+ LABEL(elseLab) <+> elseCode
              ]
            esac
          esac
        esac
      | While (cond, body)   ->
        case env.genLabels(2) of [condLab, bodyLab, env] ->
          case compile(condLab, env, body) of [condLabUsed, env, bodyCode] ->
            [
              false,
              env,
              singletonBuffer(JMP(condLab)) <+ LABEL(bodyLab) <+> bodyCode <+ LABEL(condLab) <+> compileExpr(cond) <+ CJMP("nz", bodyLab)
            ]
          esac
        esac
      | DoWhile (body, cond) ->
        case env.genLabels(2) of [condLab, bodyLab, env] ->
          case compile(condLab, env, body) of [condLabUsed, env, bodyCode] ->
            [
              false,
              env,
              singletonBuffer(LABEL(bodyLab)) <+> bodyCode <+ LABEL(condLab) <+> compileExpr(cond) <+ CJMP("nz", bodyLab)
            ]
          esac
        esac
      | _                    -> failure("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
