-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stck, st, wrld], insns) {
  case insns of
    {} -> c
    | insn : insnsT -> 
      case insn of
        JMP (lab) -> eval (env, c, env.fromLabel(lab))
        | CJMP (cond, lab) -> 
          case stck of
            h : t -> eval (env, [t, st, wrld], 
                          if (case cond of 
                              "nz" -> h == true
                              | "z" -> h == false 
                              esac)
                          then env.fromLabel(lab)
                          else insnsT
                          fi
                          )
          esac
        | LABEL (lab) -> eval (env, c, insnsT)
        | _ ->   eval (env, evalInsn(c, insn), insnsT)
      esac
  esac
}

fun evalInsn (c@[stck, st, wrld], insn) {
  case insn of
  READ -> 
    case readWorld(wrld) of
    [v,nwrld] -> [v : stck, st, nwrld]
    esac
  |ST (v) -> 
    case stck of 
    h : t -> [t, st <- [v, h], wrld]
    esac
  |LD (v) -> [st(v) : stck, st, wrld]
  |BINOP (op) -> 
    case stck of
    h1 : h2 : t -> [evalBinop(op, h2, h1) : t, st, wrld]
    esac
  |CONST (v) -> [v : stck, st, wrld]
  |WRITE ->
    case stck of
    h : t -> [t, st, writeWorld(h, wrld)]
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {

  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (v) -> {LD(v)}
    |Const (c) -> {CONST (c)}
    |Binop (op,e1,e2)-> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, listBuffer(compileExpr (e)) <+ WRITE]
    | Assn  (x, e)   -> [false, env, listBuffer(compileExpr (e)) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (cond, body) -> 
      case env.genLabels(2) of
        [bodyL, condL, env] ->
          case compile (condL, env, body) of 
            [_, env, bodyCode] -> 
              [false, env, singletonBuffer (JMP (condL)) <+> label (bodyL, true) <+> bodyCode <+> label(condL, true) 
              <+> listBuffer(compileExpr(cond)) <+ CJMP("nz", bodyL)]
          esac
      esac
    | DoWhile (body, cond) ->
      case env.genLabels(2) of
        [bodyL, condL, env] ->
          case compile (condL, env, body) of 
            [_, env, bodyCode] -> 
              [false, env, label (bodyL, true) <+> bodyCode <+> label(condL, true) 
              <+> listBuffer(compileExpr(cond)) <+ CJMP("nz", bodyL)]
          esac 
      esac
    | If (cond, body1, body2) ->
        case env.genLabel of
          [elseL, env] -> 
          case compile (lab, env, body1) of
            [_, env, thenCode] -> 
              case compile (lab, env, body2) of
                [_, env, elseCode] -> 
                [true, env, listBuffer(compileExpr(cond)) <+ CJMP ("z", elseL) <+> thenCode <+ JMP(lab) <+> label (elseL, true) <+> elseCode]
              esac
          esac
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
