-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c @ [stack, state, world], insns) {
   case insns of
     {} -> c
   | READ : p  ->
     case readWorld (world) of
     [v, newWorld] -> eval (env, [v : stack, state, newWorld], p)
     esac
   | WRITE : p  ->
     case stack of
     v : tl -> eval (env, [tl, state, writeWorld (v, world)], p)
     esac
   | CONST (n) : p -> eval (env, [n : stack, state, world], p)
   | BINOP (s) : p ->
     case stack of
     y : x : tl -> eval (env, [evalOp (s, x, y) : tl, state, world], p)
     esac
   | LD (x) : p -> eval (env, [state (x) : stack, state, world], p)
   | LDA (x) : p -> eval (env, [LValue (x) : stack, state, world], p)
   | JMP (l) : _ -> eval (env, c, env.fromLabel (l))
   | CJMP (c, l) : p ->
     case [c, stack] of
       ["z", 0 : tl]  -> eval (env, [tl, state, world], env.fromLabel (l))
     | ["z", _ : tl]  -> eval (env, [tl, state, world], p)
     | ["nz", 0 : tl] -> eval (env, [tl, state, world], p)
     | ["nz", _ : tl] -> eval (env, [tl, state, world], env.fromLabel (l))
     esac
   | ST (x) : p ->
     case stack of
     v : tl -> eval (env, [stack, state <- [x, v], world], p)
     esac
   | STI : p ->
     case stack of
     z : LValue(x) : tl ->
       eval (env, [z : tl, state <- [x, z], world], p)
     esac
   | LABEL (s) : p -> eval (env, c, p)
   | DROP : p -> case stack of _ : tl -> eval (env, [tl, state, world], p) esac
   esac
 }

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
fun compile (lab, env, stmt) {
    case stmt of
      Skip -> [false, env, emptyBuffer ()]
    | Var (x) -> [false, env, singletonBuffer (LD (x))]
    | Ref (x) -> [false, env, singletonBuffer (LDA (x))]
    | Const (n) -> [false, env, singletonBuffer (CONST (n))]
    | Binop (op, e1, e2) ->
      case env.genLabels (2) of
      [rLab, opLab, env] ->
        case compile (rLab, env, e1) of
        [rLabUsed, env, lCode] ->
          case compile (opLab, env, e2) of
          [opLabUsed, env, rCode] -> [false, env,
            lCode
              <+> label (rLab, rLabUsed)
              <+> rCode
              <+> label (opLab, opLabUsed)
              <+ BINOP (op)
          ]
          esac
        esac
      esac
    | Ignore (e) ->
      case env.genLabel of
      [dropLab, env] ->
        case compile (dropLab, env, e) of
        [dropLabUsed, env, code] -> [false, env,
          code
            <+> label (dropLab, dropLabUsed)
            <+ DROP
        ]
        esac
      esac
    | Read (x) -> [false, env, listBuffer ({READ, ST (x), DROP})]
    | Write (e) ->
      case env.genLabel of
      [writeLab, env] ->
        case compile (writeLab, env, e) of
        [writeLabUsed, env, code] -> [false, env,
          code
            <+> label (writeLab, writeLabUsed)
            <+ WRITE
        ]
        esac
      esac
    | Assn (x, e) ->
      case env.genLabels (2) of
      [rLab, stLab, env] ->
        case compile (rLab, env, x) of
        [rLabUsed, env, lCode] ->
          case compile (stLab, env, e) of
          [stLabUsed, env, rCode] -> [false, env,
            lCode
              <+>
              label (rLab, rLabUsed)
              <+> rCode
              <+> label (stLab, stLabUsed)
              <+ STI
          ]
          esac
        esac
      esac
    | Seq (s1, s2) ->
      case env.genLabel of
      [s2Lab, env] ->
        case compile (s2Lab, env, s1) of
        [s2LabUsed, env, s1Code] ->
          case compile (lab, env, s2) of
          [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
          esac
        esac
      esac
    | While (e, s) ->
      case env.genLabels (3) of
      [condLab, bodyLab, cjmpLab, env] ->
        case compile (condLab, env, s) of
        [condLabUsed, env, bodyCode] ->
          case compile (cjmpLab, env, e) of
          [cjmpLabUsed, env, condCode] -> [false, env,
            singletonBuffer (JMP (condLab))
              <+ LABEL (bodyLab)
              <+> bodyCode
              <+ LABEL (condLab)
              <+> condCode
              <+> label (cjmpLab, cjmpLabUsed)
              <+ CJMP ("nz", bodyLab)
          ]
          esac
        esac
      esac
    | DoWhile (s, e) ->
      case env.genLabels (3) of
      [condLab, bodyLab, cjmpLab, env] ->
        case compile (condLab, env, s) of
        [condLabUsed, env, bodyCode] ->
          case compile (cjmpLab, env, e) of
          [cjmpLabUsed, env, condCode] -> [false, env,
            singletonBuffer (LABEL (bodyLab))
              <+> bodyCode
              <+> label (condLab, condLabUsed)
              <+> condCode
              <+> label (cjmpLab, cjmpLabUsed)
              <+ CJMP ("nz", bodyLab)
          ]
          esac
        esac
      esac
    | If (e, s1, s2) ->
      case env.genLabels (2) of
      [cjmpLab, elseLab, env] ->
        case compile (cjmpLab, env, e) of
        [cjmpLabUsed, env, condCode] ->
          case compile (lab, env, s1) of
          [labUsed, env, mainCode] ->
            case compile (lab, env, s2) of
            [labUsed, env, elseCode] -> [true, env,
              condCode
                <+> label (cjmpLab, cjmpLabUsed)
                <+ CJMP ("z", elseLab)
                <+> mainCode
                <+ JMP (lab)
                <+ LABEL (elseLab)
                <+> elseCode
            ]
            esac
          esac
        esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
