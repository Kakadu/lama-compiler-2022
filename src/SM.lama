-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(evalSingleInstruction, c, insns)
}

fun evalSingleInstruction ([stack, state, world], insn) {
  case insn of 
    BINOP (operation) -> 
      var leftNode = stack.hd;
      var rightNode = stack.tl.hd;
      [evalBinOperations (operation, rightNode, leftNode) : stack.tl.tl, state, world]
    | CONST (n) -> [n : stack, state, world]
    | WRITE -> [stack.tl, state, writeWorld (stack.hd, world)]
    | READ -> 
      var result = readWorld (world);
      var value = result[0];
      var newWorld = result[1];
      [value : stack, state, newWorld]
    | LD (x) -> [state (x) : stack, state, world]
    | ST (x) -> [stack.tl, state <- [x, stack.hd], world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> { LD (x) }
  | Const (n) -> { CONST (n) }
  | Binop (operation, leftExpr, rightExpr)
      -> compileExpr (leftExpr) +++ compileExpr (rightExpr) +++ { BINOP (operation) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> compileExpr (expr) +++ { ST (x) }
  | Seq (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Read (x) -> { READ } +++ { ST (x) }
  | Skip -> {}
  | Write (expr) -> compileExpr (expr) +++ { WRITE }
  esac
}
