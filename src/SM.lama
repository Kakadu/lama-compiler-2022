-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun help_eval ([stack, state, world], insn) {
    case insn of
      ST    (v)  -> (
      case stack of hd : tl -> [tl, state <- [v, hd], world] esac
    )
    | LD    (v)  -> [state (v) : stack, state, world]
    | BINOP (op) -> (
      case stack of 
      hd1 : hd2 : tl -> [evalBinOp (op, hd2, hd1) : tl, state, world]
      esac
    )
    | CONST (v)  -> [v : stack, state, world]
    | READ       -> (
      case readWorld (world) of
      [v, world1] -> [v : stack, state, world1]
      esac)
    | WRITE      -> (
      case stack of
      hd : tl -> [tl, state, writeWorld (hd, world)]
      esac
    )
    esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    { }     -> c
  | hd : tl -> eval (help_eval (c, hd), tl)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (v)          -> { LD (v) }
  | Const (c)          -> { CONST (c) }
  | Binop (op, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (v, e)         -> compileExpr (e) +++ { ST (v) }
  | Seq   (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Skip                 -> []
  | Write (e)            -> compileExpr (e) +++ { WRITE }
  | Read  (v)            -> { READ, ST (v)}
  esac
}
