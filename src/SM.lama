-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalOneI (c@[stack, state, world], i) {
  case i of
    READ      -> case readWorld(world) of [n, world] -> [n:stack, state, world] esac
  | WRITE     -> case stack of n:stack -> [stack, state, writeWorld(n, world)] esac
  | BINOP (s) -> case stack of y:x:stack -> [evalBinOp(s, x, y):stack, state, world] esac
  | LD    (x) -> [state(x):stack, state, world]
  | ST    (x) -> case stack of n:stack -> [stack, state <- [x, n], world] esac
  | CONST (n) -> [n:stack, state, world]
  | LABEL (_) -> c
  esac
}

fun printList (l) {
  case l of
    {} -> skip
  | h : tl -> printf("%s\n", h.string); printList(tl)
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  -- printf("size = %d\n\n", insns.size);
  -- printList(insns);
  -- printf("\n\n\n");

  case insns of
    {} -> c
  | JMP (l) : _ -> eval(env, c, env.fromLabel(l))
  | CJMP (cond, l) : insns -> case stack of n : stack ->
                                c := [stack, state, world];

                                if (compare(cond, "z") == 0 && n == 0) !! (compare(cond, "nz") == 0 && n != 0)
                                then eval(env, c, env.fromLabel(l))
                                else eval(env, c, insns)
                                fi
                              esac
  | curI : insns -> eval(env, evalOneI(c, curI), insns)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v) -> singletonBuffer(LD (v))
  | Const (x) -> singletonBuffer(CONST (x))
  | Binop (op, e1, e2) -> compileExpr(e1) <+> compileExpr(e2) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) ->
        case env.genLabels(2) of [s1L, elseL, env] ->
          case compile(s1L, env, s1) of [s1LUsed, env, s1Code] ->
            case compile(lab, env, s2) of [labUsed, env, s2Code] ->
              [true, env,
               compileExpr(e) <+ CJMP ("z", elseL) <+> s1Code <+> label(s1L, s1LUsed) <+
               JMP (lab) <+ LABEL (elseL) <+> s2Code]
            esac
          esac
        esac
    | While (e, s) ->
        case env.genLabels(2) of [exprL, stmtL, env] ->
          case compile(stmtL, env, s) of [stmtLUsed, env, sCode] ->
            [true, env,
             singletonBuffer(LABEL (exprL)) <+> compileExpr(e) <+ CJMP ("z", lab) <+>
             sCode <+> label(stmtL, stmtLUsed) <+ JMP (exprL)]
          esac
        esac
    | DoWhile (s, e) ->
      case env.genLabels(2) of [beforeL, afterL, env] ->
        case compile(afterL, env, s) of [afterLUsed, env, sCode] ->
          [false, env,
           singletonBuffer(LABEL (beforeL)) <+> sCode <+> label(afterL, afterLUsed) <+>
           compileExpr(e) <+ CJMP("nz", beforeL)]
        esac
      esac
    -- | DoWhile (s, e) ->
    --     case env.genLabel of [stmtL, env] ->
    --       case compile(stmtL, env, s) of [stmtLUsed, env, sCode] ->
    --         case compile(lab, env, While (s, e)) of [labUsed, env, whileCode] ->
    --           [labUsed, env, sCode <+> whileCode]
    --         esac
    --       esac
    --     esac
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
