-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
-- Shows a location (a reference to function argument, local or global variable)
  fun showLoc(d) {
    fun varity(f) {
      if f then "var" else "val" fi
    }

    case d of
      Arg (i)   -> sprintf("arg[%d]", i)
      | Loc (i) -> sprintf("loc[%d]", i)
      | Glb (x) -> sprintf("%s", x)
    esac
  }

  case i of
    BINOP  (s)         -> sprintf("BINOP %s", s)
    | LD     (x)       -> sprintf("LD %s", showLoc(x))
    | LDA    (x)       -> sprintf("LDA %s", showLoc(x))
    | ST     (x)       -> sprintf("ST %s", showLoc(x))
    | SEXP   (s, n)    -> sprintf("SEXP ""%s"", %d", s, n)
    | CONST  (n)       -> sprintf("CONST %d", n)
    | LABEL  (s)       -> sprintf("LABEL %s", s)
    | JMP    (l)       -> sprintf("JMP %s", l)
    | CJMP   (c, l)    -> sprintf("CJMP %s, %s", c, l)
    | CALL   (f, n)    -> sprintf("CALL %s, %d", f, n)
    | BEGIN  (f, a, l) -> sprintf("BEGIN %s, %d, %d", f, a, l)
    | GLOBAL (x)       -> sprintf("GLOBAL %s", x)
    | END              -> sprintf("END")
    | DUP              -> "DUP"
    | DROP             -> "DROP"
    | STRING (s)       -> sprintf("STRING ""%s""", s)
    | ARRAY  (n)       -> sprintf("ARRAY %d", n)
    | STA              -> "STA"
    | ELEM             -> "ELEM"
    | BUILTIN (f, n)   -> sprintf("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
          { }                -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval(env, w, insns) {
-- Global state maps names of global variables to values
  var globalState = ref(fun (x) { error(sprintf("name ""%s"" is undefined", x), getLoc(x)) });

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState(a, l) {
    [initArray(a, fun (_) { 0 }), initArray(l, fun (_) { 0 })]
  }

  -- Lookups a location in local/global states
  fun lookup([args, locs], loc) {
    case loc of
      Arg (i)   -> args[i]
      | Loc (i) -> locs[i]
      | Loc (i) -> locs[i]
      | Glb (x) -> deref(globalState)(x)
    esac
  }

  -- Assigns a value to a location
  fun assign([args, locs], loc, vl) {
    case loc of
      Arg (i)   -> args[i] := vl
      | Loc (i) -> locs[i] := vl
      | Glb (x) -> var g = deref(globalState);
      globalState ::= fun (y) { if compare(x, y) == 0 then vl else g(y) fi }
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take(list, n) {
    fun inner(n, acc, list) {
      if n == 0
        then [list, acc]
        else inner(n - 1, list.hd:acc, list.tl)
      fi
    }

    inner(n, { }, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval(c, insns) {
    case insns of
      { }     -> c
      | h : t -> case evalInsn(c, h, t) of [c, t] -> eval(c, t) esac
    esac
  }

  fun evalInsn(c@[stack, cstack, st, w], insn, tail) {
    case insn of
      BINOP (op)              -> [case stack of x : y : tail -> [evalOp(op, y, x):tail, cstack, st, w] esac, tail]
      | DROP                  -> [[case stack of _ : tail -> tail esac, cstack, st, w], tail]
      | DUP                   -> [[case stack of value : tail -> value:value:tail esac, cstack, st, w], tail]
      | LD    (name)          -> [[lookup(st, name):stack, cstack, st, w], tail]
      | LDA   (name)          -> [[Ref(name):stack, cstack, st, w], tail]
      | ST    (name)          -> [case stack of head : tail -> assign(st, name, head); [stack, cstack, st, w] esac, tail]
      | CONST (value)         -> [[value:stack, cstack, st, w], tail]
      | LABEL (name)          -> [c, tail]
      | JMP   (lab)           -> [c, fromLabel(env, lab)]
      | CJMP  (f, lab)        -> case stack of
        h : t -> if h != 0 && compare("nz", f) == 0 !! h == 0 && compare("z", f) == 0
          then [[t, cstack, st, w], fromLabel(env, lab)]
          else [[t, cstack, st, w], tail]
        fi
      esac
      | CALL (f, n)           -> [[stack, [st, tail]:cstack, st, w], fromLabel(env, f)]
      | END                   -> case cstack of
        { }                -> [c, { }]
        | [st, tail] : cst -> [[stack, cst, st, w], tail]
      esac
      | GLOBAL (name)         -> st.assign(Glb(name), 0); [[stack, cstack, st, w], tail]
      | BEGIN (f, na, nl)     -> case take(stack, na) of [stack, args] ->
        case makeState(na, nl) of st ->
          case foldl(fun ([state, i], arg) {
            [state.assign(Arg(i), arg); state, i + 1]
          }, [st, 0], args) of [st, _] ->
            [[stack, cstack, st, w], tail]
          esac
        esac
      esac
      | BUILTIN (name, nargs) -> case take(stack, nargs) of [stack, args] ->
        case evalBuiltin(name, args, w) of [value, w] ->
          [[value:stack, cstack, st, w], tail]
        esac
      esac
      | STRING (s)            -> [[s:stack, cstack, st, w], tail]
      | ARRAY (n)             -> case take(stack, n) of [stack, elems] ->
        [[(listArray(elems)):stack, cstack, st, w], tail]
      esac
      | ELEM                  -> case take(stack, 2) of [stack, { arr, ind }] ->
        var value = case arr of
          Sexp (_, arr) -> arr[ind]
          | _           -> arr[ind]
        esac;
        [[value:stack, cstack, st, w], tail]
      esac
      | STA                   -> case stack of
        value : Ref (name) : stTail  -> assign(st, name, value);
        [[value:stTail, cstack, st, w], tail]
        | value : ind : arr : stTail ->
          case arr of
            Sexp (_, arr) -> arr[ind] := value
            | _           -> arr[ind] := value
          esac;
          [[value:stTail, cstack, st, w], tail]
      esac
      | SEXP (name, n)        -> case take(stack, n) of [stack, elems] ->
        [[(Sexp(name, listArray(elems))):stack, cstack, st, w], tail]
      esac
    esac
  }


  eval([{ }, { }, makeState(0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), createWorld(input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions) {
-- Generates a new label
  fun genLabel() {
    [sprintf("L%d", nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun(fLabel, args, body) {
    makeCompEnv(nLabels,
      scopeDepth,
      state,
      nLocals,
      nArgs,
      Fun(fLabel, args, body, state):functions)
  }

  -- Enters a local scope
  fun beginScope() {
    makeCompEnv(nLabels, scopeDepth + 1, enterScope(state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope() {
    makeCompEnv(nLabels, scopeDepth - 1, leaveScope(state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg(name) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Arg(nArgs)), nLocals, nArgs + 1, functions)
  }

  -- Adds a variable in the scope
  fun addVar(name) {
    if isGlobal()
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name, true)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals, true)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal(name) {
    if isGlobal()
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name, false)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals, false)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun(name, fLabel, nargs) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Fun(fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun(state) {
    makeCompEnv(nLabels, 2, enterFunction(state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns() {
    [functions, makeCompEnv(nLabels, scopeDepth, state, nArgs, nLocals, { })]
  }

  -- Lookups variable
  fun lookupVar(name) {
    case lookup(state, name) of
      Loc (i, true)   -> Loc(i)
      | Glb (x, true) -> Glb(x)
      | Arg (i)       -> Arg(i) -- **CK YOU
      | _             -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
    esac
  }

  -- Lookups value
  fun lookupVal(name) {
    case lookup(state, name) of
      Loc (i, _)   -> Loc(i)
      | Glb (x, _) -> Glb(x)
      | Arg (i)    -> Arg(i)
      | _          -> error(sprintf("the name ""%s"" does not designate a value", name), getLoc(name))
    esac
  }

  -- Lookups a name of a function
  fun lookupFun(name) {
    case lookup(state, name) of
      x@Fun (_, _) -> x
      | _          -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals() {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel(name) {
    if isGlobal()
      then [sprintf("L%s", name), makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions)]
      else [sprintf("L%s_%d", name, nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
    fi
  }

  -- Checks if the current scope is a global
  fun isGlobal() {
    scopeDepth == 2
  }

  [genLabel,
    rememberFun,
    beginScope,
    endScope,
    addArg,
    addVar,
    addVal,
    beginFun,
    getFuns,
    lookupVar,
    lookupVal,
    lookupFun,
    getLocals,
    genFunLabel,
    addFun,
    isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv() {
  makeCompEnv(0, 0, emptyState(), 0, 0, { })
}

-- Accessor functions
fun genLabel(env) {
  env [0]()
}

fun rememberFun(env, name, args, body) {
  env [1](name, args, body)
}

fun beginScope(env) {
  env [2]()
}

fun endScope(env) {
  env [3]()
}

fun addArg(env, name) {
  env [4](name)
}

fun addVar(env, name) {
  env [5](name)
}

fun addVal(env, name) {
  env [6](name)
}

fun beginFun(env, state) {
  env [7](state)
}

fun getFuns(env) {
  env [8]()
}

fun lookupVar(env, name) {
  env [9](name)
}

fun lookupVal(env, name) {
  env [10](name)
}

fun lookupFun(env, name) {
  env [11](name)
}

fun getLocals(env) {
  env [12]()
}

fun genFunLabel(env, name) {
  env [13](name)
}

fun addFun(env, name, fLabel, nargs) {
  env [14](name, fLabel, nargs)
}

fun isGlobal(env) {
  env [15]()
}

-- Helper function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case genLabel(env) of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs(env, names) {
  foldl(fun (env, name) { addArg(env, name) }, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars(env, names) {
  foldl(fun (env, name) { addVar(env, name) }, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals(env, names) {
  foldl(fun (env, name) { addVal(env, name) }, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun compile(lab, env, stmt) {
    case stmt of
      Skip                 -> [false, env, emptyBuffer()]
      | Var    (x)         -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
      | Ref    (x)         -> [false, env, singletonBuffer(LDA(lookupVar(env, x)))]
      | Ignore (e)         -> case genLabel(env) of [lab1, env] ->
        case compile(lab1, env, e) of
          [lab1Used, env, code] -> [false, env, code <+> label(lab1, lab1Used) <+ DROP]
        esac
      esac
      | Const  (n)         -> [false, env, singletonBuffer(CONST(n))]
      | Binop (op, l, r)   -> case genLabels(env, 2) of [lab1, lab2, env] ->
        case compile(lab1, env, l) of [lab1Used, env, code1] ->
          case compile(lab2, env, r) of [lab2Used, env, code2] ->
            [false,
              env,
              code1 <+> label(lab1, lab1Used)
                <+> code2 <+> label(lab2, lab2Used) <+ BINOP(op)
            ]
          esac
        esac
      esac
      | Set   (x, e)       -> compile(lab, env, Assn(Ref(x), e))
      | Assn  (x, e)       -> case genLabels(env, 2) of [lab1, lab2, env] ->
        case compile(lab1, env, x) of [lab1Used, env, xCode] ->
          case compile(lab2, env, e) of [lab2Used, env, eCode] ->
            [false,
              env,
              xCode <+> label(lab1, lab1Used) <+> eCode <+> label(lab2, lab2Used) <+ STA
            ]
          esac
        esac
      esac
      | Seq   (s1, s2)     ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | If (e, s1, s2)     -> case genLabels(env, 2) of [lab1, lab2, env] ->
        case compile(lab2, env, e) of [lab2Used, env, eCode] ->
          case compile(lab, env, s1) of [_, env, code1] ->
            case compile(lab, env, s2) of [_, env, code2] ->
              [true,
                env,
                eCode <+> label(lab2, lab2Used) <+ CJMP("z", lab1) <+> code1
                  <+ JMP(lab) <+ LABEL(lab1) <+> code2 -- <+ JMP (lab)
              ]
            esac
          esac
        esac
      esac
      | While (e, s)       -> case genLabels(env, 3) of [cond, st, expr, env] ->
        case compile(expr, env, e) of [exprLabUsed, env, eCode] ->
          case compile(cond, env, s) of [_, env, sCode] ->
            [false,
              env,
              singletonBuffer(JMP(cond))
                <+ LABEL(st) <+> sCode <+ LABEL(cond) <+> eCode
                <+> label(expr, exprLabUsed) <+ CJMP("nz", st)
            ]
          esac
        esac
      esac
      | DoWhile (s, e)     -> case genLabels(env, 2) of [lab1, lab2, env] ->
        case compile(lab1, env, s) of [_, env, sCode] ->
          case compile(lab2, env, e) of [lab2Used, env, eCode] ->
            [false,
              env,
              singletonBuffer(LABEL(lab1)) <+> sCode <+> eCode
                <+> label(lab2, lab2Used) <+ CJMP("nz", lab1)
            ]
          esac
        esac
      esac
      | Scope (defs, expr) -> case env.beginScope.compileDefs(defs) of [env, globals, funs] ->
        case map(fun (g) { GLOBAL(g) }, globals) of codeGlobals ->
          case foldl(fun (env, Fun (l, a, b)) { env.rememberFun(l, a, b) }, env, funs) of env ->
            case compile(lab, env, expr) of [labUsed, env, eCode] ->
              [labUsed, env.endScope, listBuffer(codeGlobals) <+> eCode]
            esac
          esac
        esac
      esac
      | Call (fname, args) -> case compileFunArgs(env, args) of [env, code] ->
        case fname of
          "read"     -> [false, env, code <+ BUILTIN(fname, 0)]
          | "write"  -> [false, env, code <+ BUILTIN(fname, 1)]
          | "length" -> [false, env, code <+ BUILTIN(fname, 1)]
          | _        -> case lookupFun(env, fname) of Fun (lab, nargs) ->
            [false, env, code <+ CALL(lab, nargs)]
          esac
        esac
      esac
      | Array (elems)      -> case compileStmts(env, elems) of [env, code] ->
        [false, env, code <+ ARRAY(elems.size)]
      esac
      | String (s)         -> [false, env, singletonBuffer(STRING(s))]
      | Elem (arr, ind)    -> case compileStmts(env, { arr, ind }) of [env, code] ->
        [false, env, code <+ ELEM]
      esac
      | ElemRef (arr, ind) -> case compileStmts(env, { arr, ind }) of [env, code] ->
        [false, env, code]
      esac
      | Sexp (name, elems) -> case compileStmts(env, elems) of [env, code] ->
        [false, env, code <+ SEXP(name, elems.size)]
      esac
    esac
  }

  fun compileDef([env, globals, funs], def) {
    case def of
      Var (names)              -> case addVars(env, names) of env ->
        if isGlobal(env)
          then [env, names +++ globals, funs]
          else [env, globals, funs]
        fi
      esac
      | Fun (name, args, body) -> case genFunLabel(env, name) of [lab, env] ->
        case env.addFun(name, lab, size(args)) of env ->
          [env, globals, Fun(lab, args, body):funs]
        esac
      esac
    esac
  }

  fun compileDefs(env, defs) {
    foldl(compileDef, [env, { }, { }], defs)
  }

  fun compileFunArg([env, code], arg) {
    case env.genLabel of [lab, env] ->
      case compile(lab, env, arg) of [labUsed, env, acode] ->
        [env, code <+> acode <+> label(lab, labUsed)]
      esac
    esac
  }

  fun compileFunArgs(env, args) {
    foldl(compileFunArg, [env, emptyBuffer()], args)
  }

  fun compileFun([env, code], Fun (flab, args, body, state)) {
    case env.beginFun(state).addArgs(args).genLabel of [lab, env] ->
      case compile(lab, env, body) of [labUsed, env, bcode] ->
        [env, code <+ LABEL(flab) <+ BEGIN(flab, args.size, getLocals(env)) <+> bcode <+> label(lab, labUsed) <+ END]
      esac
    esac
  }

  fun compileFuns(env, funs) {
    case foldl(compileFun, [env, emptyBuffer()], funs) of [env, code] ->
      case env.getFuns of
        [{ }, _]      -> [env, code]
        | [funs, env] -> case compileFuns(env, funs) of [env, newcode] ->
          [env, code <+> newcode]
        esac
      esac
    esac
  }

  fun compileStmts(env, stmts) {
    foldl(fun ([env, code], stmt) {
      case genLabel(env) of [lab, env] ->
        case compile(lab, env, stmt) of [labUsed, env, newCode] ->
          [env, code <+> newCode <+> label(lab, labUsed)]
        esac
      esac
    }, [env, emptyBuffer()], stmts)
  }

  case initCompEnv().beginScope.addFun("read", "$read", 0)
    .addFun("write", "$write", 1)
    .addFun("length", "$length", 1).genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, env, code] -> getBuffer $
          singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env))
          <+> code <+> label(endLab, endLabUsed) <+ END
          <+> (case env.getFuns of [funs, env] -> compileFuns(env, funs) [1] esac)
      esac
  esac
}