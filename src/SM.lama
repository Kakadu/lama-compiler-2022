-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
-- Shows a location (a reference to function argument, local or global variable)
  fun showLoc(d) {
    case d of
      Arg (i)   -> sprintf("arg[%d]", i)
      | Loc (i) -> sprintf("loc[%d]", i)
      | Glb (x) -> x
    esac
  }

  case i of
    READ               -> "READ"
    | WRITE            -> "WRITE"
    | BINOP  (s)       -> sprintf("BINOP %s", s)
    | LD     (x)       -> sprintf("LD %s", showLoc(x))
    | LDA    (x)       -> sprintf("LDA %s", showLoc(x))
    | ST     (x)       -> sprintf("ST %s", showLoc(x))
    | STI              -> "STI"
    | CONST  (n)       -> sprintf("CONST %d", n)
    | LABEL  (s)       -> sprintf("LABEL %s", s)
    | JMP    (l)       -> sprintf("JMP %s", l)
    | CJMP   (c, l)    -> sprintf("CJMP %s, %s", c, l)
    | CALL   (f, n)    -> sprintf("CALL %s, %d", f, n)
    | BEGIN  (f, a, l) -> sprintf("BEGIN %s, %d, %d", f, a, l)
    | GLOBAL (x)       -> sprintf("GLOBAL %s", x)
    | END              -> sprintf("END")
    | DUP              -> "DUP"
    | DROP             -> "DROP"
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
          { }                -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];

  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval(env, w, insns) {
-- Global state maps names of global variables to values
  var globalState = ref(fun (x) { error(sprintf("name ""%s"" is undefined", x), getLoc(x)) });

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState(a, l) {
    [initArray(a, fun (_) { 0 }), initArray(l, fun (_) { 0 })]
  }

  -- Lookups a location in local/global states
  fun lookup([args, locs], loc) {
    case loc of
      Arg (i)   -> args[i]
      | Loc (i) -> locs[i]
      | Glb (x) -> deref(globalState)(x)
    esac
  }

  -- Assigns a value to a location
  fun assign([args, locs], loc, v) {
    case loc of
      Arg (i)   -> args[i] := v
      | Loc (i) -> locs[i] := v
      | Glb (x) -> var g = deref(globalState);
      globalState ::= fun (y) { if compare(x, y) == 0 then v else g(y) fi }
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take(list, n) {
    fun inner(n, acc, list) {
      if n == 0
        then [list, acc]
        else inner(n - 1, list.hd:acc, list.tl)
      fi
    }

    inner(n, { }, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval(c@[st, cst, s, w], insns) {
    fun helper([st, cst, s, w], insn){
      case insn of
        READ         ->
          case readWorld(w) of
            [n, w] -> [n:st, cst, s, w]
          esac
        | WRITE      ->
          case st of
            n : tl -> [tl, cst, s, writeWorld(n, w)]
          esac
        | CONST (n)  -> [n:st, cst, s, w]
        | BINOP (op) ->
          case st of
            e2 : e1 : tl -> [evalOp(op, e1, e2):tl, cst, s, w]
          esac
        | LD (x)     -> [lookup(s, x):st, cst, s, w]
        | LDA (x)    -> [Ref(x):st, cst, s, w]
        | LABEL (l)  -> [st, cst, s, w]
        | DROP       ->
          case st of
            _ : tl -> [tl, cst, s, w]
          esac
      esac
    }
    case insns of
      { }            -> c
      | insn : insns ->
        case insn of
          ST (x)                     ->
            case st of
              v : _ -> assign(s, x, v); eval(c, insns)
            esac
          | STI                      ->
            case st of
              z : Ref(x) : stack -> assign(s, x, z); eval([z:stack, cst, s, w], insns)
            esac
          | CJMP (cond, l)           ->
            case st of
              v : stackRest -> eval([stackRest, cst, s, w], if (case cond of "nz" -> v | "z" -> v == false esac) then fromLabel(env, l) else insns fi)
            esac
          | JMP (l)                  -> eval(c, fromLabel(env, l))
          | CALL (func, argc)        -> eval([st, [s, insns]:cst, s, w], fromLabel(env, func))
          | GLOBAL (x)               -> assign(s, Glb(x), 0); eval(c, insns)
          | BEGIN (func, argc, varc) ->
            case take(st, argc) of [st, argv] ->
              eval([st, cst, foldl(fun ([s, i], arg) {
                assign(s, Arg(i), arg);
                [s, i + 1]
              }, [makeState(argc, varc), 0], argv)[0], w], insns)
            esac
          | END                      ->
            case cst of
              { }                -> c
              | [s, insns] : cst -> eval([st, cst, s, w], insns)
            esac
          | _                        -> eval(helper(c, insn), insns)
        esac
    esac
  }
  eval([{ }, { }, makeState(0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), createWorld(input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions) {
-- Generates a new label
  fun genLabel() {
    [sprintf("L%d", nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun(fLabel, args, body) {
    makeCompEnv(nLabels,
      scopeDepth,
      state,
      nLocals,
      nArgs,
      Fun(fLabel, args, body, state):functions)
  }

  -- Enters a local scope
  fun beginScope() {
    makeCompEnv(nLabels, scopeDepth + 1, enterScope(state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope() {
    makeCompEnv(nLabels, scopeDepth - 1, leaveScope(state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg(name) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Arg(nArgs)), nLocals, nArgs + 1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar(name) {
    if scopeDepth == 1
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun(name, fLabel, nargs) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Fun(fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun(state) {
    makeCompEnv(nLabels, 1, enterFunction(state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns() {
    [functions, makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, { })]
  }

  -- Lookups a name of a variable
  fun lookupVar(name) {
    case lookup(state, name) of
      Fun (_, _) -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
      | x        -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun(name) {
    case lookup(state, name) of
      x@Fun (_, _) -> x
      | _          -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals() {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel(name) {
    if scopeDepth == 1
      then [sprintf("L%s", name), makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions)]
      else [sprintf("L%s_%d", name, nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
    fi
  }

  -- Checks if the current scope is a global
  fun isGlobal() {
    scopeDepth == 1
  }

  [genLabel,
    rememberFun,
    beginScope,
    endScope,
    addArg,
    addVar,
    beginFun,
    getFuns,
    lookupVar,
    lookupFun,
    getLocals,
    genFunLabel,
    addFun,
    isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv() {
  makeCompEnv(0, 0, emptyState(), 0, 0, { })
}

-- Accessor functions
fun genLabel(env) {
  env [0]()
}

fun rememberFun(env, name, args, body) {
  env [1](name, args, body)
}

fun beginScope(env) {
  env [2]()
}

fun endScope(env) {
  env [3]()
}

fun addArg(env, name) {
  env [4](name)
}

fun addVar(env, name) {
  env [5](name)
}

fun beginFun(env, state) {
  env [6](state)
}

fun getFuns(env) {
  env [7]()
}

fun lookupVar(env, name) {
  env [8](name)
}

fun lookupFun(env, name) {
  env [9](name)
}

fun getLocals(env) {
  env [10]()
}

fun genFunLabel(env, name) {
  env [11](name)
}

fun addFun(env, name, fLabel, nargs) {
  env [12](name, fLabel, nargs)
}

fun isGlobal(env) {
  env [13]()
}

-- Helper function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case genLabel(env) of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs(env, names) {
  foldl(fun (env, name) { addArg(env, name) }, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars(env, names) {
  foldl(fun (env, name) { addVar(env, name) }, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun compile(lab, env, stmt) {
    case stmt of
      Skip                      -> [false, env, emptyBuffer()]
      | Var (x)                 -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
      | Ref (x)                 -> [false, env, singletonBuffer(LDA(lookupVar(env, x)))]
      | Const (n)               -> [false, env, singletonBuffer(CONST(n))]
      | Binop (op, e1, e2)      ->
        case genLabels(env, 2) of
          [e1Lab, e2Lab, env] ->
            case compile(e1Lab, env, e1) of
              [e1LabUsd, env, e1Code] ->
                case compile(e2Lab, env, e2) of
                  [e2LabUsd, env, e2Code] -> [
                    false,
                    env,
                    e1Code <+> label(e1Lab, e1LabUsd) <+> e2Code <+> label(e2Lab, e2LabUsd) <+ BINOP(op)
                  ]
                esac
            esac
        esac
      | Read  (x)               -> [false, env, singletonBuffer(READ) <+ ST(lookupVar(env, x)) <+ DROP]
      | Write (e)               ->
        case genLabel(env) of
          [writeLab, env] ->
            case compile(writeLab, env, e) of
              [writeLabUsed, env, eCode] -> [false, env, eCode <+> label(writeLab, writeLabUsed) <+ WRITE]
            esac
        esac
      | Assn  (x, e)            ->
        case genLabels(env, 2) of
          [l1, l2, env] ->
            case compile(l1, env, x) of
              [l1Usd, env, xCode] ->
                case compile(l2, env, e) of
                  [l2Usd, env, eCode] -> [false, env, xCode <+> label(l1, l1Usd) <+> eCode <+> label(l2, l2Usd) <+ STI]
                esac
            esac
        esac
      | Seq   (s1, s2)          ->
        case genLabel(env) of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsd, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsd, env, s2Code] -> [labUsd, env, s1Code <+> label(s2Lab, s2LabUsd) <+> s2Code]
                esac
            esac
        esac
      | While (cond, body)      ->
        case genLabels(env, 3) of
          [bodyLab, condLab, postCondLab, env] ->
            case compile(condLab, env, body) of
              [_, env, bodyCode] ->
                case compile(postCondLab, env, cond) of
                  [postCondLabUsed, env, condCode] -> [false, env, listBuffer({ JMP(condLab), LABEL(bodyLab) }) <+> bodyCode <+ LABEL(condLab) <+> condCode <+> label(postCondLab, postCondLabUsed) <+ CJMP("nz", bodyLab)]
                esac
            esac
        esac
      | DoWhile (body, cond)    ->
        case genLabels(env, 3) of
          [bodyLab, condLab, postCondLab, env] ->
            case compile(condLab, env, body) of
              [condLabUsed, env, bodyCode] ->
                case compile(postCondLab, env, cond) of
                  [postCondLabUsed, env, condCode] ->
                    [false, env, singletonBuffer(LABEL(bodyLab)) <+> bodyCode <+> label(condLab, condLabUsed) <+> condCode <+> label(postCondLab, postCondLabUsed) <+ CJMP("nz", bodyLab)]
                esac
            esac
        esac
      | If (cond, iBody, eBody) ->
        case genLabels(env, 2) of
          [elseLab, postCondLab, env] -> case compile(lab, env, iBody) of
            [iBodyUsd, env, iBodyCode] -> case compile(lab, env, eBody) of
              [eBodyUsd, env, eBodyCode] ->
                var elseIsNotEmpty = case getBuffer(eBodyCode) of { } -> false | _ -> true esac;
                case compile(postCondLab, env, cond) of
                  [postCondLabUsd, env, condCode] ->
                    [
                      iBodyUsd !! eBodyUsd !! elseIsNotEmpty,
                      env,
                      condCode <+> label(postCondLab, postCondLabUsd) <+ CJMP("z", elseLab) <+> iBodyCode <+> if elseIsNotEmpty then singletonBuffer(JMP(lab)) else emptyBuffer() fi <+ LABEL(elseLab) <+> eBodyCode
                    ]
                esac
            esac
          esac
        esac
      | Ignore (e)              ->
        case genLabel(env) of
          [dropLab, env] ->
            case compile(dropLab, env, e) of
              [dropLabUsed, env, code] -> [false, env, code <+> label(dropLab, dropLabUsed) <+ DROP]
            esac
        esac
      | Call (f, args)          ->
        case lookupFun(env, f) of
          Fun (fLab, nargs) ->
            if nargs != size(args) then
              error(sprintf("function ""%s"": expected %d arguments but found %d", nargs, f, size(args)), getLoc(f))
            fi;
            case genLabel(env) of
              [callLab, env] ->
                case compile(callLab, env, foldl(fun (seq, arg) { Seq(seq, arg) }, Skip, args)) of
                  [callLabUsed, env, code] -> [false, env, code <+> label(callLab, callLabUsed) <+ CALL(fLab, nargs)]
                esac
            esac
        esac
      | Scope (defs, e)         ->
        case foldl(fun ([env, funs, globals], def) {
          case def of
            Var (names)                -> [addVars(env, names), funs, if isGlobal(env) then names +++ globals else globals fi]
            | Fun (name, params, body) ->
              case genFunLabel(env, name) of [lab, env] ->
                [addFun(env, name, lab, size(params)), [lab, params, body]:funs, globals]
              esac
          esac
        }, [beginScope(env), { }, { }], defs) of
          [env, funs, globals] ->
            case compile(lab, foldl(fun (env, [fLab, params, body]) { rememberFun(env, fLab, params, body) }, env, funs), e) of
              [labUsed, env, code] -> [labUsed, endScope(env), listBuffer(map(fun (name) { GLOBAL(name) }, globals)) <+> code]
            esac
        esac
    esac
  }

  fun compileFuns(env) {
    fun compileFun(env, f) {
      case f of
        Fun(fLab, args, body, state) ->
          case genLabel(addArgs(beginFun(env, state), args)) of
            [endLab, env] ->
              case compile(endLab, env, body) of
                [endLabUsed, env, code] ->
                  listBuffer({ LABEL(fLab), BEGIN(fLab, size(args), getLocals(env)) }) <+> code <+> label(endLab, endLabUsed) <+ END
              esac
          esac
      esac
    }

    fun helper(env, fs, codePrefix) {
      case fs of
        f : fs -> helper(env, fs, codePrefix <+> compileFun(env, f))
        | { }  ->
          case getFuns(env) of
            [{ }, env]  -> codePrefix
            | [fs, env] -> helper(env, fs, codePrefix)
          esac
      esac
    }
    helper(env, { }, emptyBuffer())
  }

  case genLabel(initCompEnv()) of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, env, code] ->
          getBuffer $
            listBuffer({ LABEL("main"), BEGIN("main", 0, getLocals(env)) }) <+> code <+> label(endLab, endLabUsed) <+ END <+> compileFuns(env)
      esac
  esac
}
