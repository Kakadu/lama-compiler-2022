-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      {} -> c
    | JMP (lab):_ -> eval (c, fromLabel (env, lab))
    | CJMP (cond, lab):insns ->
        case st of
          value:st ->
            if case cond of "z" -> value == 0 | _ -> value != 0 esac then
              eval ([st, cst, s, w], fromLabel (env, lab))
            else
              eval ([st, cst, s, w], insns)
            fi
        esac
    | CALL (f, _):insns -> eval ([st, [s, insns]:cst, s, w], fromLabel (env, f))
    | END:insns ->
        case cst of
          {} -> c
        | [s2, insns]:cst -> eval ([st, cst, s2, w], insns)
        esac
    | i:insns ->
      eval (
        case i of
          READ -> case readWorld (w) of [value, w] -> [value:st, cst, s, w] esac
        | WRITE -> case st of value:st -> [st, cst, s, writeWorld (value, w)] esac
        | BINOP (op) -> 
          case st of 
            x:y:st -> [evalOp (op, y, x):st, cst, s, w] 
          esac
        | CONST (value) -> [value:st, cst, s, w]
        | LD (x) -> [lookup (s, x):st, cst, s, w]
        | LDA (x) -> [x:st, cst, s, w]
        | DUP -> [st.fst:st, cst, s, w]
        | DROP -> [st.snd, cst, s, w]
        | ST (x) -> 
          case st of 
            value:_ -> assign (s, x, value); [st, cst, s, w] 
          esac
        | STI -> 
          case st of 
            value:x:st -> assign (s, x, value); [value:st, cst, s, w] 
          esac
        | LABEL (_) -> c
        | BEGIN (_, a, l) ->
            case take (st, a) of
              [st, args] ->
                var s2 = makeState (a, l);
                foldl (fun (i, arg) {assign (s2, Arg(i), arg); i + 1}, 0, args);
                [st, cst, s2, w]
            esac
        | GLOBAL (x) -> assign (s, Glb (x), 0); [st, cst, s, w]
        esac,
        insns
      )
    esac    
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]
    | Write (e)      ->
      case env.genLabel of
        [new_lab, env] ->
        case compile (new_lab, env, e) of
          [new_lab_used, env, compiled_expr] ->
            [false, env, compiled_expr <+> label (new_lab, new_lab_used) <+ WRITE]
        esac
      esac
    | Assn (e1, e2)   ->
        case env.genLabels (2) of
          [new_lab1, new_lab2, env] ->
            case compile (new_lab1, env, e1) of
              [new_lab1_used, env, compiled_e1] ->
                case compile (new_lab2, env, e2) of
                  [new_lab2_used, env, compiled_e2] ->
                    [false, env, compiled_e1 <+> label (new_lab1, new_lab1_used) <+>
                                compiled_e2 <+> label (new_lab2, new_lab2_used) <+ STI]
                esac
            esac
        esac
    | Seq (e1, e2) ->
        case env.genLabel of
          [new_lab, env] ->
             case compile (new_lab, env, e1) of
               [new_lab_used, env, e1_code] ->
                  case compile (lab, env, e2) of
                    [lab_used, env, e2_code] -> [lab_used, env, e1_code <+>
                                            label (new_lab, new_lab_used) <+> e2_code]
                  esac
             esac
        esac
    | If (cond, true_stmt, false_stmt) ->
      case env.genLabels (3) of
        [new_lab1, new_lab2, else_label, env] ->
          case compile (new_lab1, env, true_stmt) of
            [new_lab1_used, env, true_stmt_code] ->
              case compile (lab, env, false_stmt) of
                [_, env, false_stmt_code] ->
                  case compile (new_lab2, env, cond) of
                    [new_lab2_used, env, compiled_cond] ->
                      [true, env, compiled_cond <+>
                              label (new_lab2, new_lab2_used) <+
                              CJMP ("z", else_label) <+>
                              true_stmt_code <+>
                              label (new_lab1, new_lab1_used) <+
                              JMP (lab) <+
                              LABEL (else_label) <+>
                              false_stmt_code]
                  esac
              esac
          esac
      esac
    | While (e, b)       ->
        case genLabels(env, 3) of
          [condLab, bodyLab, cjmpLab, env] ->
            case compile(condLab, env, b) of
              [_, env, bodyCode] ->
                case compile(cjmpLab, env, e) of
                  [cjmpLabUsed, env, condCode] ->
                    [
                      false,
                      env,
                      singletonBuffer(JMP(condLab)) <+ LABEL(bodyLab) <+> bodyCode <+ LABEL(condLab) <+> condCode <+> label(cjmpLab, cjmpLabUsed) <+ CJMP("nz", bodyLab)
                    ]
                esac
            esac
        esac
    | DoWhile (body, cond) ->
      case env.genLabels (3) of
        [new_lab1, new_lab2, body_lab, env] ->
          case compile (new_lab1, env, body) of
            [new_lab1_used, env, body_code] ->
              case compile (new_lab2, env, cond) of
                [new_lab2_used, env, cond_code] ->
                  [false, env, singletonBuffer (LABEL (body_lab)) <+>
                          body_code <+>
                          label (new_lab1, new_lab1_used) <+>
                          cond_code <+>
                          label (new_lab2, new_lab2_used) <+
                          CJMP ("nz", body_lab)]
              esac
          esac
      esac
    | Binop (op, e1, e2) ->
        case env.genLabels (2) of
          [new_lab1, new_lab2, env] ->
            case compile (new_lab1, env, e1) of
              [new_lab1_used, env, e1_code] ->
                case compile (new_lab2, env, e2) of
                  [new_lab2_used, env, e2_code] ->
                    [false, env, e1_code <+>
                                label (new_lab1, new_lab1_used) <+>
                                e2_code <+>
                                label (new_lab2, new_lab2_used)
                                <+ BINOP (op)]
                esac
            esac
        esac
    | Ignore (e) ->
        case env.genLabel of
          [new_lab, env] ->
            case compile (new_lab, env, e) of
              [new_lab_used, env, e_code] ->
                [false, env, e_code <+> label (new_lab, new_lab_used) <+ DROP]
            esac
        esac
    | Call (f, args)       ->
        case genLabel (env) of
          [call_lab, env] ->
            case compile (call_lab, env, foldr(fun (e, a) { Seq (a, e) }, Skip, args)) of
              [call_lab_used, env, args_code] ->
                [
                  false,
                  env,
                  args_code <+>
                    label (call_lab, call_lab_used) <+
                    case lookupFun(env, f) of
                      Fun (f_lab, na) -> CALL (f_lab, na)
                    esac
                ]
            esac
        esac
    | Scope (defs, e) ->
        case foldl (fun ([env, funcs, globals], def) {
          case def of
            Var (names) -> [addVars (env, names),
                            funcs,
                            if isGlobal (env) then
                              foldl (fun (globals, n) {globals <+ GLOBAL (n)}, globals, names)
                            else
                              globals
                            fi]
          | Fun (name, args, b) -> case genFunLabel (env, name) of
                                    [f_lab, env] -> [addFun (env, name, f_lab, size (args)), [f_lab, args, b]:funcs, globals]
                                   esac
          esac
        },
        [beginScope (env), {}, emptyBuffer ()],
        defs
        ) of
          [env, funcs, globals] ->
            case compile (lab, foldr (fun (env, [f_lab, args, b]) {
              rememberFun (env, f_lab, args, b)
            }, env, funcs), e) of
              [lab_used, env, code] -> [lab_used, endScope (env), globals <+> code]
            esac
        esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
        [endLabUsed, env, mainCode] ->
          fun compileFuns(env, fs) {
            case fs of
                { }                      -> emptyBuffer()
              | Fun(fLab, as, b, s) : fs ->
                case genLabel(addArgs(beginFun(env, s), as)) of
                  [endLab, env] ->
                    case compile(endLab, env, b) of
                      [endLabUsed, env, bCode] ->
                        singletonBuffer(LABEL(fLab)) <+ BEGIN(fLab, size(as), getLocals(env)) <+> bCode <+> label(endLab, endLabUsed) <+ END <+> compileFuns(env, fs)
                    esac
                esac
            esac
          }

          getBuffer $
            case getFuns(env) of
              [fs, env] ->
                singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> mainCode <+> label(endLab, endLabUsed) <+ END <+> compileFuns(env, fs)
            esac       
      esac
  esac
}

