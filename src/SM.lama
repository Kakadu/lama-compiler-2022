-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun help_eval ([stack, state, world], insn) {
  case insn of
    ST     (v)  -> case stack of
        h : t -> [stack, state <- [v, h], world]
      esac
  | STI         -> case stack of
        v : x : t -> [v:t, state <- [x, v], world]
      esac
  | LD     (v)  -> [state(v):stack, state, world]
  | LDA    (v)  -> [v:stack, state, world]
  | BINOP  (op) -> case stack of
        y : (x : t) -> [evalOp(op, x, y):t, state, world]
      esac
  | CONST  (v)  -> [v:stack, state, world]
  | READ        -> case readWorld(world) of
        [n, newWorld] -> [n:stack, state, newWorld]
      esac
  | WRITE       -> case stack of
        h : t -> [t, state, writeWorld(h, world)]
      esac
  | DROP        -> case stack of
        _ : t -> [t, state, world]
      esac
  | DUP         -> case stack of
        h : t -> [h:stack, state, world]
      esac
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of
      { }     -> c
    | hd : tl -> case hd of
        LABEL (_)   -> eval (env, c, tl)
      | JMP (l)     -> eval (env, c, fromLabel(env, l))
      | CJMP (c, l) -> case stack of
          h : t -> eval(env, [t, state, world], if (h == 0) == (compare(c, "z") == 0) then fromLabel(env, l) else tl fi)
        esac
      | _ -> eval (env, help_eval (c, hd), tl)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun compile(lab, env, stmt) {
    case stmt of
        Skip                          -> [false, env, emptyBuffer()]
      | Var    (x)                    -> [false, env, singletonBuffer(LD(x))]
      | Ref    (x)                    -> [false, env, singletonBuffer(LDA(x))]
      | Const  (n)                    -> [false, env, singletonBuffer(CONST(n))]
      | Read   (x)                    -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write  (e)                    -> case genLabel(env) of
          [lab, env] ->
            case compile(lab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ WRITE]
            esac
        esac
      | Assn  (Ref (x), e)            -> case genLabel(env) of
          [lab, env] ->
            case compile(lab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ ST(x)]
            esac
        esac
      | Assn (x, e)                   -> case genLabels(env, 2) of
          [xEndLab, eEndLab, env] ->
            case compile(xEndLab, env, x) of
              [xLabUsed, env, xCode] ->
                case compile(eEndLab, env, e) of
                  [eLabUsed, env, eCode] ->
                    [false, env, xCode <+> label(xEndLab, xLabUsed) <+> eCode <+> label(eEndLab, eLabUsed) <+ STI]
                esac
            esac
        esac
      | If (cond, thenStmt, elseStmt) -> case genLabel(env) of
          [elseLabel, env] ->
            case compile(lab, env, cond) of
              [_, env, condCode] ->
                case compile(lab, env, thenStmt) of
                  [_, env, thenCode] ->
                    case compile(lab, env, elseStmt) of
                      [_, env, elseCode] ->
                        [true, env,
                          condCode
                            <+ CJMP("z", elseLabel)
                            <+> thenCode
                            <+ JMP(lab)
                            <+ LABEL(elseLabel)
                            <+> elseCode
                        ]
                    esac
                esac
            esac
        esac
      | While (cond, act)             -> case genLabels(env, 2) of
          [checkLabel, actLabel, env] ->
            case compile(lab, env, cond) of
              [labUsed, env, condCode] ->
                case compile(checkLabel, env, act) of
                  [_, env, actCode] ->
                    [labUsed, env,
                      singletonBuffer(JMP(checkLabel))
                        <+ LABEL(actLabel)
                        <+> actCode
                        <+ LABEL(checkLabel)
                        <+> condCode
                        <+ CJMP("nz", actLabel)
                    ]
                esac
            esac
        esac
      | DoWhile (act, cond)           -> case genLabels(env, 2) of
          [actLabel, checkLabel, env] ->
            case compile(checkLabel, env, act) of
              [checkLabelUsed, env, actCode] ->
                case compile(lab, env, cond) of
                  [labUsed, env, condCode] ->
                    [false, env,
                      singletonBuffer(LABEL(actLabel))
                        <+> actCode
                        <+> label(checkLabel, checkLabelUsed)
                        <+> condCode
                        <+ CJMP("nz", actLabel)
                    ]
                esac
            esac
        esac
      | Seq   (s1, s2)                ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile(s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile(lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | Ignore (e)                    ->
        case env.genLabel of
          [lab, env] ->
            case compile(lab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ DROP]
            esac
        esac
      | Binop (op, a, b)              -> case genLabels(env, 2) of
          [aEndLab, bEndLab, env] ->
            case compile(aEndLab, env, a) of
              [aLabUsed, env, aCode] ->
                case compile(bEndLab, env, b) of
                  [bLabUsed, env, bCode] ->
                    [false, env, aCode <+> label(aEndLab, aLabUsed) <+> bCode <+> label(bEndLab, bLabUsed) <+ BINOP(op)]
                esac
            esac
        esac
      | _                             -> failure("compileSM not implemented\n")
    esac
  }

  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}