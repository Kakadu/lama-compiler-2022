-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalSMInsn (c, i) {
  var stack, state, world;
  stack := c[0];
  state := c[1];
  world := c[2];
  case i of
    READ      -> case readWorld(world) of [varname, world] -> [varname : stack, state, world] esac
  | WRITE     -> case stack of varname : stack -> [stack, state, writeWorld(varname, world)] esac
  | BINOP (s) -> case stack of ex2 : ex1 : stack -> [evalBinop(s, ex1, ex2) : stack, state, world] esac
  | LD    (x) -> [state(x) : stack, state, world]
  | ST    (x) -> case stack of varname : stack -> [stack, state <- [x, varname], world] esac
  | CONST (n) -> [n : stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | ins : insns -> eval(evalSMInsn(c, ins), insns)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (c) -> {CONST(c)}
  | Var (varname) -> {LD(varname)}
  | Binop (op, ex1, ex2) -> compileExpr(ex1) +++ compileExpr(ex2) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (varname, ex) -> compileExpr(ex) +++ {ST (varname)}
  | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> {}
  | Read (varname) -> {READ, ST (varname)}
  | Write (ex) -> compileExpr(ex) +++ {WRITE}
  esac
}
