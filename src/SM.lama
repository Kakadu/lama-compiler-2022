-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
    case insns of
  {} -> c
  | h : t -> eval (evalInsn(c, h), t)
  esac
}

fun evalInsn (c@[stck, st, wrld], insn) {
  case insn of
  READ -> 
    case readWorld(wrld) of
    [v,nwrld] -> [v : stck, st, nwrld]
    esac
  |ST (v) -> 
    case stck of 
    h : t -> [t, st <- [v, h], wrld]
    esac
  |LD (v) -> [st(v) : stck, st, wrld]
  |BINOP (op) -> 
    case stck of
    h1 : h2 : t -> [evalBinop(op, h2, h1) : t, st, wrld]
    esac
  |CONST (v) -> [v : stck, st, wrld]
  |WRITE ->
    case stck of
    h : t -> [t, st, writeWorld(h, wrld)]
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (v) -> {LD(v)}
    |Const (c) -> {CONST (c)}
    |Binop (op,e1,e2)-> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn (v,e) -> compileExpr(e) +++ {ST (v)}
    |Seq (stmt1,stmt2)-> compileSM(stmt1) +++ compileSM(stmt2)
    |Read (v)-> {READ, ST (v)}
    |Write(e)->compileExpr(e) +++ {WRITE}
    |Skip -> {}
  esac
}
