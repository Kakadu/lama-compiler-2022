-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      {} -> c
    | ins : insns ->
        case ins of
          LABEL (_) -> eval (c, insns)
        | JMP (l) -> eval (c, fromLabel (env, l))
        | CJMP (condition, l) ->
            case st of x : st ->
              if case condition of "z" -> x == 0 | _ -> x != 0 esac then
                eval ([st, cst, s, w], env.fromLabel (l))
              else
                eval ([st, cst, s, w], insns)
              fi
            esac
        | BINOP (op) ->
          case st of
            x : y : st -> eval ([evalOp (op, y, x) : st, cst, s, w], insns)
          esac
        | READ ->
            case readWorld (w) of [value, w] -> eval ([value : st, cst, s, w], insns) esac
        | WRITE ->
          case st of
            x : tail -> eval ([tail, cst, s, writeWorld (x, w)], insns)
          esac
        | LD (x) -> eval ([lookup (s, x) : st, cst, s, w], insns)
        | LDA (x) -> eval ([Ref (x) : st, cst, s, w], insns)
        | ST (x) -> case st of y : tail -> assign (s, x, y); eval ([tail, cst, s, w], insns) esac
        | STI ->
          case st of
            x : Ref (y) : st -> assign (s, y, x); eval ([x : st, cst, s, w], insns)
          esac
        | CONST (n) -> eval ([n : st, cst, s, w], insns)
        | DROP ->
          case st of
            x : st -> eval ([st, cst, s, w], insns)
          esac
        | END ->
          case cst of
              {} -> c
            | [s, insns] : cst -> eval ([st, cst, s, w], insns)
          esac
        | CALL (f, _) -> eval ([st, [s, insns] : cst, s, w], fromLabel (env, f))
        | BEGIN (_, args, locals) ->
            var l = case take (st, args) of
                        [st, args] ->
                          [st, [listArray (args), initArray (locals, fun (_) { 0 })]]
                      esac;
            case l of
              [st, s] -> eval ([st, cst, s, w], insns)
            esac
        | GLOBAL (x) -> assign (s, Glb (x), 0); eval (c, insns)
        esac
    esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
        Skip -> [false, env, emptyBuffer ()]
      | Var (x) -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
      | Ref (x) -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
      | Const (n) -> [false, env, singletonBuffer (CONST (n))]
      | Read  (x) -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) (* <+ DROP *)]
      | Write (e) ->
        case genLabel (env) of
          [l, env] ->
            case compile (l, env, e) of
              [lUsed, env, code] -> [false, env, code <+> label (l, lUsed) <+ WRITE]
            esac
        esac
      | Assn  (x, e) ->
        case genLabels (env, 2) of
          [l1, l2, env] ->
            case compile (l1, env, x) of
              [l1Used, env, xCode] ->
                case compile (l2, env, e) of
                  [l2Used, env, eCode] ->
                    [false, env,
                     xCode <+> label (l1, l1Used) <+> eCode <+> label (l2, l2Used) <+ STI]
                esac
            esac
        esac
      | Seq (s1, s2) ->
        case genLabel (env) of
          [ls2, env] ->
            case compile (ls2, env, s1) of
              [ls2Used, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (ls2, ls2Used) <+> s2Code]
                esac
            esac
        esac
      | If (e, s1, s2) ->
        case env.genLabels (2) of
          [ls1, ls2, env] ->
            case compile (lab, env, s1) of
              [_, env, s1Code] ->
                case compile (lab, env, s2) of
                  [_, env, s2Code] ->
                    case compile (ls1, env, e) of
                      [ls1Used, env, condCode] ->
                        [true, env,
                         condCode <+> label (ls1, ls1Used) <+ CJMP ("z", ls2)
                         <+> s1Code <+ JMP (lab) <+ LABEL (ls2) <+> s2Code]
                    esac
                esac
            esac
        esac
      | While (e, s) ->
        case env.genLabels (3) of
          [lbody, lcondBefore, lcondAfter, env] ->
            case compile (lcondAfter, env, e) of
              [lcondAfterUsed, env, condCode] ->
                case compile (lcondBefore, env, s) of
                  [_, env, sCode] ->
                    [false, env,
                     singletonBuffer (JMP (lcondBefore)) <+ LABEL (lbody) <+> sCode <+ LABEL (lcondBefore)
                     <+> condCode <+> label(lcondAfter, lcondAfterUsed) <+ CJMP ("nz", lbody)]
                esac
          esac
        esac
      | DoWhile (s, e) ->
        case env.genLabels (3) of
          [lbody, lcondBefore, lcondAfter, env] ->
            case compile (lcondBefore, env, s) of
            [lcondBeforeUsed, env, sCode] ->
              case compile (lcondAfter, env, e) of
                [lcondAfterUsed, env, condCode] ->
                  [false, env,
                   singletonBuffer (LABEL (lbody)) <+> sCode <+> label (lcondBefore, lcondBeforeUsed)
                   <+> condCode <+> label (lcondAfter, lcondAfterUsed) <+ CJMP ("nz", lbody)]
              esac
            esac
        esac
      | Binop (op, e1, e2) ->
        case env.genLabels (2) of
          [le1, le2, env] ->
            case compile (le1, env, e1) of
              [le1Used, env, e1Code] ->
                case compile (le2, env, e2) of
                  [le2Used, env, e2Code] ->
                  [false, env,
                   e1Code <+> label (le1, le1Used) <+> e2Code <+> label (le2, le2Used) <+ BINOP (op)]
                esac
            esac
        esac
      | Ignore (e) ->
      case env.genLabel of
        [le, env] ->
          case compile (le, env, e) of [leUsed, env, eCode] ->
            [false, env, eCode <+> label (le, leUsed) <+ DROP]
          esac
      esac
      | Call (f, args) ->
        case lookupFun (env, f) of
          Fun (fLab, nParams) ->
            if size (args) != nParams then
              error (sprintf ("expected %d arguments for function ""%s"", but found %d", nParams, f, size (args)), getLoc (f))
            fi;
            case genLabel (env) of
              [callLab, env] ->
                case compile (callLab, env, foldl (
                  fun (acc, arg) { Seq (acc, arg) },
                  Skip,
                  args
                )) of
                  [callLabUsed, env, code] -> [false, env, code <+> label (callLab, callLabUsed) <+ CALL (fLab, nParams)]
                esac
            esac
        esac
      | Scope (defs, e) ->
          fun adddGlobal (env, names, globals) {
              if isGlobal (env) then names +++ globals else globals fi
          }

          fun genFun (env, name, params, body, funs, globals) {
            case genFunLabel (env, name) of
              [lab, env] -> [addFun (env, name, lab, size (params)), [lab, params, body] : funs, globals]
            esac
          }

          fun remembered (env, funs) {
            foldl (fun (env, [fLab, params, body]) { rememberFun (env, fLab, params, body) }, env, funs)
          }

          var symstate = foldl (fun ([env, funs, globals], def) {
                                  case def of
                                    Var (names) -> [addVars (env, names), funs, adddGlobal (env, names, globals)]
                                  | Fun (name, params, body) -> genFun (env, name, params, body, funs, globals)
                                  esac
                                }, [beginScope (env), { }, { }], defs);

          case symstate of
            [env, funs, globals] ->
              case compile (lab, remembered (env, funs), e) of
                [labUsed, env, code] ->
                  [labUsed, endScope (env),
                   listBuffer (map (fun (name) { GLOBAL (name) }, globals)) <+> code]
              esac
          esac
    esac
  }


  fun compileFuns (env) {
    fun compileFun (env, Fun (fLab, params, body, state)) {
      case genLabel (addArgs (beginFun (env, state), params)) of
        [lab, env] ->
          case compile (lab, env, body) of
            [labUsed, env, code] ->
              listBuffer ({ LABEL (fLab), BEGIN (fLab, size (params), getLocals (env)) })
              <+> code <+> label (lab, labUsed) <+ END
          esac
      esac
    }

    fun helper (env, fs, codePrefix) {
      case fs of
          f : fs -> helper (env, fs, codePrefix <+> compileFun (env, f))
        | {} ->
          case getFuns (env) of
              [{}, _] -> codePrefix
            | [fs, env] -> helper (env, fs, codePrefix)
          esac
      esac
    }
    helper (env, {}, emptyBuffer ())
  }

  case initCompEnv ().genLabel of
    [lab, env] ->
      case compile (lab, env, stmt) of
        [labUsed, env, code] ->
          getBuffer $ listBuffer ({ LABEL ("main"), BEGIN ("main", 0, getLocals (env)) })
                      <+> code <+> label (lab, labUsed) <+ END <+> compileFuns (env)
      esac
  esac
}

