-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
      READ         -> "READ"
    | WRITE        -> "WRITE"
    | BINOP (s)    -> sprintf("BINOP %s", s)
    | LD    (x)    -> sprintf("LD %s", x)
    | LDA   (x)    -> sprintf("LDA %s", x)
    | ST    (x)    -> sprintf("ST %s", x)
    | STI          -> "STI"
    | CONST (n)    -> sprintf("CONST %d", n)
    | LABEL (s)    -> sprintf("LABEL %s", s)
    | JMP   (l)    -> sprintf("JMP %s", l)
    | CJMP  (c, l) -> sprintf("CJMP %s, %s", c, l)
    | DUP          -> "DUP"
    | DROP         -> "DROP"
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) ++ "\n" }, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv(insns) {
  var map =
    fix(fun (rec) {
      fun ([m, insns]) {
        case insns of
            { }              -> m
          | LABEL (lab) : tl -> rec([addMap(m, lab, insns), tl])
          | _ : tl           -> rec([m, tl])
        esac
      }
    }) $ [emptyMap(compare), insns];
  
  [fun (l) {
    case findMap(map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel(env, lab) {
  env [0](lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, s, w], insns) {
  case insns of
      { }   -> c
    | i : p ->
      case i of
          ST (x)      ->
            case stack of
              h : t -> eval(env, [stack, s <- [x, h], w], p)
            esac
        | STI         ->
          case stack of
            v : x : t -> eval(env, [v:t, s <- [x, v], w], p)
          esac
        | LD (x)      -> eval(env, [s(x):stack, s, w], p)
        | LDA (x)     -> eval(env, [x:stack, s, w], p)
        | CONST (n)   -> eval(env, [n:stack, s, w], p)
        | BINOP (op)  ->
          case stack of
            y : (x : t) -> eval(env, [evalOp(op, x, y):t, s, w], p)
          esac
        | READ        ->
          case readWorld(w) of
            [n, new_w] -> eval(env, [n:stack, s, new_w], p)
          esac
        | WRITE       ->
          case stack of
            h : t -> eval(env, [t, s, writeWorld(h, w)], p)
          esac
        | LABEL (l)   -> eval(env, c, p)
        | JMP (l)     -> eval(env, c, fromLabel(env, l))
        | CJMP (c, l) ->
          case stack of
            h : t -> eval(env, [t, s, w], if (h == 0) == (compare(c, "z") == 0) then fromLabel(env, l) else p fi)
          esac
        | DUP         ->
          case stack of
            h : t -> eval(env, [h:stack, s, w], p)
          esac
        | DROP        ->
          case stack of
            _ : t -> eval(env, [t, s, w], p)
          esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval(initEvalEnv(insns), [{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv(n) {
  [fun () {
    [sprintf("L%d", n), makeCompEnv(n + 1)]
  }]
}

fun initCompEnv() {
  makeCompEnv(0)
}

-- Accessor function: generates one label
fun genLabel(env) {
  env [0]()
}

-- Utility function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case env.genLabel of
             [lab, env] -> lab:inner(env, n - 1)
           esac
    fi
  }
  
  listArray(inner(env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }
  
  fun compile(lab, env, stmt) {
    case stmt of
        Skip                            -> [false, env, emptyBuffer()]
      | Var   (x)                       -> [false, env, singletonBuffer(LD(x))]
      | Ref   (x)                       -> [false, env, singletonBuffer(LDA(x))]
      | Const (n)                       -> [false, env, singletonBuffer(CONST(n))]
      | Read  (x)                       -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write (e)                       ->
        case genLabel(env) of
          [lab, env] ->
            case compile(lab, env, e) of
              [lab_used, env, code] -> [false, env, code <+> label(lab, lab_used) <+ WRITE]
            esac
        esac
      | Assn (Ref (x), e)               ->
        case genLabel(env) of
          [lab, env] ->
            case compile(lab, env, e) of
              [lab_used, env, code] -> [false, env, code <+> label(lab, lab_used) <+ ST(x)]
            esac
        esac
      | Assn (x, e)                     ->
        case genLabels(env, 2) of
          [x_lab, e_lab, env] ->
            case compile(x_lab, env, x) of
              [x_lab_used, env, x_code] ->
                case compile(e_lab, env, e) of
                  [e_lab_used, env, e_code] ->
                    [false, env, x_code <+> label(x_lab, x_lab_used) <+> e_code <+> label(e_lab, e_lab_used) <+ STI]
                esac
            esac
        esac
      | Binop (binop, e1, e2)           ->
        case env.genLabels(2) of
          [lab1, lab2, env] ->
            case compile(lab1, env, e1) of
              [lab1_used, env, code1] ->
                case compile(lab2, env, e2) of
                  [lab2_used, env, code2] -> [false, env, code1 <+> label(lab1, lab1_used) <+> code2 <+> label(lab2, lab2_used) <+ BINOP(binop)]
                esac
            esac
        esac
      | Ignore (e)                      ->
        case env.genLabel of
          [lab, env] ->
            case compile(lab, env, e) of
              [lab_used, env, code] -> [false, env, code <+> label(lab, lab_used) <+ DROP]
            esac
        esac
      | Seq   (e1, e2)                  ->
        case env.genLabel of
          [lab2, env] ->
            case compile(lab2, env, e1) of
              [lab2_used, env, e1_code] ->
                case compile(lab, env, e2) of
                  [lab_used, env, e2Code] -> [lab_used, env, e1_code <+> label(lab2, lab2_used) <+> e2Code]
                esac
            esac
        esac
      | If (cond, then_body, else_body) ->
        case genLabel(env) of
          [else_label, env] ->
            case compile(lab, env, cond) of
              [_, env, cond_code] ->
                case compile(lab, env, then_body) of
                  [_, env, then_code] ->
                    case compile(lab, env, else_body) of
                      [_, env, else_code] ->
                        [true, env,
                          cond_code
                            <+ CJMP("z", else_label)
                            <+> then_code
                            <+ JMP(lab)
                            <+ LABEL(else_label)
                            <+> else_code
                        ]
                    esac
                esac
            esac
        esac
      
      | While (cond, body)              ->
        case env.genLabels(2) of
          [body_label, cond_lab, env] ->
            case compile(body_label, env, body) of
              [_, env, body_code] ->
                case compile(cond_lab, env, cond) of
                  [cond_lab_used, env, cond_code] -> [
                    true,
                    env,
                    singletonBuffer(LABEL(body_label))
                      <+> cond_code
                      <+> label(cond_lab, cond_lab_used)
                      <+> singletonBuffer(CJMP("z", lab))
                      <+> body_code
                      <+> singletonBuffer(JMP(body_label))
                  ]
                esac
            esac
        esac
      | DoWhile (body, cond)            -> compile(lab, env, Seq(body, While(cond, body)))
      
      | _                               -> failure("compileSM not implemented\n")
    esac
  }
  
  case initCompEnv().genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label(endLab, endLabUsed)
      esac
  esac
}
