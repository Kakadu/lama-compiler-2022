-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  stringcat (map (fun (i) {showSMInsn (i) ++ "\n"}, prg))
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, hd (list) : acc, tl (list))
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  -- fun eval (c@[st, cst, s, w], insns) {
  -- One stack machine's instruction interpreter. Takes an SM-configuration and an instruction,
  -- returns a final configuration
  fun evalInst (c@[stack, cstack, state, world], inst) {
    case inst of
      -- below num:stack is not a pattern matching, it's a list constructor
      READ      -> case readWorld (world) of [num, world] -> [num:stack, cstack, state, world] esac
      -- below num:tail is a pattern matching
    | WRITE     -> case stack of num:tail -> [tail, cstack, state, writeWorld (num, world)] esac
      -- note that x and y are swapped
    | BINOP (s) -> case stack of x:y:tail -> [evalOp (s, y, x):tail, cstack, state, world] esac
    | LD    (x) -> [lookup (state , x):stack, cstack, state, world]
    | ST    (x) -> case stack of num:_ -> assign (state, x, num); [stack, cstack, state, world] esac
    | LABEL (_) -> c
    | CONST (n) -> [n:stack, cstack, state, world]
    | LDA   (x) -> [x:stack, cstack, state, world]
    | STRING(s) -> [s:stack, cstack, state, world]
    | STI       -> case stack of x:y:tail -> assign (state, y, x); [x:tail, cstack, state, world] esac
    | DROP      -> case stack of n:tail -> [tail, cstack, state, world] esac
    | GLOBAL (x)-> assign (state, Glb (x), 0); [stack, cstack, state, world]
    | ELEM      -> case stack of i:a:tail -> [a[i]:tail, cstack, state, world] esac
    | STA       -> case stack of v:i:a:tail -> a[i] := v; [v:tail, cstack, state, world] esac
    | ARRAY  (n)-> case take (stack, n) of [stack, vals] -> [listArray(vals):stack, cstack, state, world] esac
    | SEXP(s, n)-> case take (stack, n) of [stack, vals] -> [listArray(vals):stack, cstack, state, world] esac
    | BEGIN (_, num_of_args, num_of_locals) ->
        case take (stack, num_of_args) of
          [stack, args] ->
            case makeState (num_of_args, num_of_locals) of
              state ->
                foldl (fun (ins, arg) {assign (state, Arg (ins), arg); ins + 1}, 0, args);
                [stack, cstack, state, world]
            esac
        esac
    | BUILTIN (f, num_of_args)  ->
        case take (stack, num_of_args) of
          [stack, vals] ->
            case evalBuiltin (f, vals, world) of
              [v, world] -> [v:stack, cstack, state, world]
            esac
        esac
    esac
  }


  fun evalJMP (l, c) {
    case fromLabel (env, l) of
      new_insns -> eval (c, new_insns)
    esac
  }

  -- Checks if we should jump on CJMP inst.
  -- Returns a [bool, configuration with one element popped from the stack]
  fun isJump (c@[stack, cstack, state, world], cond)
  {
    case stack of num:tail ->
      var new_c = [tail, cstack, state, world];
      case cond of
        "nz" -> if num then [true,  new_c] else [false, new_c] fi
      | "z"  -> if num then [false, new_c] else [true,  new_c] fi
      esac
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cstack, state, world], insns) {
     case insns of
      {} -> c
     | inst:tail ->
         case inst of
           JMP (l)        -> evalJMP (l, c)
         | CJMP (cond, l) -> case isJump (c, cond) of
                                  [jump, new_c] ->
                                    if jump then
                                      evalJMP (l, new_c) else
                                      eval (new_c, tail)
                                    fi
                                esac
         | END            -> case cstack of
                               {} -> c
                             | [lstate, q] : cstack -> eval ([stack, cstack, lstate, world], q)
                             esac
         | CALL (f, _)    ->
            var stack = c[0], cstack = c[1], state = c[2], world = c[3];
            eval ([stack, [state, tail] : cstack, state, world], fromLabel (env, f))
         | _ -> eval (evalInst (c, inst), tail)
         esac
    esac

  }
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileAssn (l, r, env) {
    case genLabels (env, 2) of
      [l_lab, r_lab, env] ->
        case compile (l_lab, env, l) of
          [labUsedL, env, l_code] ->
            case compile (r_lab, env, r) of
              [labUsedR, env, r_code] ->
                [env, l_code                  <+>
                      label (l_lab, labUsedL) <+>
                      r_code                  <+>
                      label (r_lab, labUsedR) <+
                      case l of
                        ElemRef (_, _) -> STA
                      | _ -> STI
                      esac]
            esac
        esac
    esac
  }

  fun compileSet (x, e, env) {
    case genLabel (env) of
      [lab, env] ->
        case compile (lab, env, e) of
          [labUsed, env, code] ->
            [env, code                     <+>
                  label (lab, labUsed)     <+
                  ST (lookupVar (env, x))]
        esac
    esac
  }


  fun compileSeq (l, r, env, lab) {
    case genLabel (env) of
      [l_lab, env] ->
         case compile (l_lab, env, l) of
           [labUsedL, env, l_code] ->
              case compile (lab, env, r) of
                [labUsed, env, r_code] ->
                    [labUsed, env, l_code                  <+>
                                   label (l_lab, labUsedL) <+>
                                   r_code]
              esac
         esac
    esac
  }

  fun compileBinop (op, l, r, env) {
    case genLabels (env, 2) of
      [l_lab, r_lab, env] ->
        case compile (l_lab, env, l) of
          [labUsedL, env, l_code] ->
            case compile (r_lab, env, r) of
              [labUsedR, env, r_code] ->
                [env, l_code                  <+>
                      label (l_lab, labUsedL) <+>
                      r_code                  <+>
                      label (r_lab, labUsedR) <+
                      BINOP (op)]
            esac
        esac
    esac
  }

  fun compileIgnore (e, env) {
    case genLabel (env) of
      [lab, env] ->
        case compile (lab, env, e) of
          [labUsed, env, code] ->
            [env, code                  <+>
                  label (lab, labUsed)  <+
                  DROP]
        esac
    esac
  }

  fun compileDoWhile (loop_exp, e, env) {
    case genLabels (env, 3) of
      [loop_lab, loop_exp_lab, e_lab, env] ->
        case compile (loop_exp_lab, env, loop_exp) of
          [labUsedLE, env, loop_exp_code] ->
            case compile (e_lab, env, e) of
              [labUsedE, env, e_code] ->
                [env, singletonBuffer (LABEL (loop_lab)) <+>
                      loop_exp_code                      <+>
                      label (loop_exp_lab, labUsedLE)    <+>
                      e_code                             <+>
                      label (e_lab, labUsedE)            <+
                      CJMP ("nz", loop_lab)]
            esac
        esac
    esac
  }

  -- We don't care if loop_exp_lab is used by loop_exp,
  -- we use it anyway to jump to the expression code
  fun compileWhile (loop_exp, e, env) {
    case genLabels (env, 3) of
      [loop_lab, loop_exp_lab, e_lab, env] ->
        case compile (loop_exp_lab, env, loop_exp) of
          [_, env, loop_exp_code] ->
            case compile (e_lab, env, e) of
              [labUsedE, env, e_code] ->
                [env, singletonBuffer (JMP (loop_exp_lab)) <+
                      LABEL (loop_lab)                     <+>
                      loop_exp_code                        <+
                      LABEL (loop_exp_lab)                 <+>
                      e_code                               <+>
                      label (e_lab, labUsedE)              <+
                      CJMP ("nz", loop_lab)]
            esac
        esac
    esac
  }

  -- compiled e
  -- jump if not 0 to if_lab
  -- compiled else_exp
  -- else_lab: (optional)
  -- jmp to the end (JMP lab)
  -- if_lab:
  -- compiled if_exp
  -- lab: (ending label)
  fun compileIf (if_exp, else_exp, e, env, lab) {
    case genLabels (env, 3) of
      [else_lab, if_lab, e_lab, env] ->
        case compile (else_lab, env, else_exp) of
          [labUsed, env, else_stmt_code] ->
            case compile (lab, env, if_exp) of
              [_, env, if_stmt_code] ->
               case compile (e_lab, env, e) of
                 [labUsedE, env, e_code] ->
                   [env, e_code                    <+>
                         label (e_lab, labUsedE)   <+
                         CJMP ("nz", if_lab)       <+>
                         else_stmt_code            <+>
                         label (else_lab, labUsed) <+
                         JMP (lab)                 <+
                         LABEL (if_lab)            <+>
                         if_stmt_code              <+
                         LABEL (lab)]
               esac
            esac
        esac
    esac
  }

  fun compileMany (lab, env, exprs) {
    case exprs of
      {}        -> [false, env, emptyBuffer()]
    | {expr}    -> compile (lab, env, expr)
    | expr:tail -> case genLabel (env) of
                     [expr_lab, env] ->
                       case compile (expr_lab, env, expr) of
                         [labUsedExpr, env, expr_code] ->
                           case compileMany (lab, env, tail) of
                             [labUsed, env, exprs_code] ->
                               [labUsed, env, expr_code                    <+>
                                              label(expr_lab, labUsedExpr) <+>
                                              exprs_code]
                           esac
                       esac
                   esac
    esac
  }

  fun compileCall (f, args, env) {
    case lookupFun (env, f) of
      Fun (fLabel, nArgs) ->
        case genLabel (env) of
          [lab, env] ->
            case compileMany (lab, env, args) of
              [labUsed, env, args_code] ->
                [env, args_code             <+>
                      label(lab, labUsed)   <+
                      -- WTF
                      if fLabel[0] == '$'
                      then
                      BUILTIN (f, nArgs)
                      else
                      CALL (fLabel, nArgs)
                      fi]
            esac
        esac
    esac
  }

  fun compileScope (defs, e, env, lab) {
    fun handle_defs ([env, funs, globalDefs], def) {
      case def of
        Var (ds)  -> [addVars (env, ds), funs,
                      if isGlobal (env) then
                        foldl (fun (globalDefs, name) {
                                 globalDefs <+ GLOBAL (name)
                               }, globalDefs, ds)
                      else
                        globalDefs
                      fi]
      | Fun (name, args, body) -> case genFunLabel (env, name) of
                                    [fLabel, env] -> [addFun (env, name, fLabel, size (args)), [fLabel, args, body] : funs, globalDefs]
                                  esac
      esac
    }

    fun remember_funs (env, [fLabel, args, body]) {
        rememberFun (env, fLabel, args, body)
    }

    case foldl (handle_defs, [beginScope (env), {}, {}], defs) of
      [env, funs, globalDefs] ->
        case compile (lab, foldl (remember_funs, env, funs), e) of
          [flag, env, code] -> [flag, endScope (env), globalDefs <+> code]
        esac
    esac
  }

  fun compileArray (exprs, env) {
    case genLabel (env) of
      [lab, env] ->
        case compileMany (lab, env, exprs) of
          [labUsed, env, code] ->
            [env, code <+>
              label (lab, labUsed) <+
                ARRAY (size (exprs))]
        esac
    esac
  }

  fun compileSexp (n, exprs, env) {
    case genLabel (env) of
      [lab, env] ->
        case compileMany (lab, env, exprs) of
          [labUsed, env, code] ->
            [env, code                 <+>
                  label (lab, labUsed) <+
                  SEXP (n, size (exprs))]
        esac
    esac
  }

  fun compileElem (x, i, env) {
    case genLabel (env) of
      [lab, env] ->
        case compileMany (lab, env, {x, i}) of
          [labUsed, env, code] ->
            [env, code                 <+>
                  label (lab, labUsed) <+
                  ELEM]
        esac
    esac
  }

  fun compileBuiltin (name, args, env) {
    case lookupFun (env, name) of
      Fun (f_lab, na) ->
        [env, singletonBuffer (BUILTIN (substring (f_lab, 1, length (f_lab) - 1), na))]
    esac
  }

  fun compileFunctions (env, main) {
    fun iterate (env, acc, funList) {
      case funList of
        {} -> case getFuns (env) of
                [{}, env] -> acc
              | [fs, env] -> iterate (env, acc, fs)
              esac
      | Fun (f, args, body, state):fs ->
        case genLabel (addArgs (beginFun (env, state), args)) of
          [endLab, env] ->
            case compile (endLab, env, body) of
              [endUsed, env, code] ->
                iterate (env,
                         acc                                   <+
                         LABEL (f)                             <+
                         BEGIN (f, size (args), getLocals (env)) <+>
                         code                                  <+>
                         label (endLab, endUsed)               <+>
                         singletonBuffer (END), fs)
            esac
        esac
      esac
    }

    iterate (env, main, {})
  }

  fun compile (lab, env, stmt) {
    case stmt of
     Skip       -> [false, env, emptyBuffer ()]
   | Var    (x) -> [false, env, singletonBuffer (LD (lookupVal (env, x)))]
   | Ref    (x) -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
   | Const  (n) -> [false, env, singletonBuffer (CONST (n))]
   | String (s) -> [false, env, singletonBuffer (STRING (s))]
   | Seq     (l, r)                -> case compileSeq (l, r, env, lab)
                                        of [labUsed, env, code] -> [labUsed, env, code]
                                      esac
   | Set     (x, e)                -> case compileSet (x, e, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | Ignore  (e)                   -> case compileIgnore (e, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | Assn    (l, r)                -> case compileAssn (l, r, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | DoWhile (loop_exp, e)         -> case compileDoWhile (loop_exp, e, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | While   (e, loop_exp)         -> case compileWhile (loop_exp, e, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | If      (e, if_exp, else_exp) -> case compileIf (if_exp, else_exp, e, env, lab)
                                        of [env, code] -> [true, env, code]
                                      esac
   | Binop   (op, l, r)            -> case compileBinop (op, l, r, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | Call    (f, args)             -> case compileCall (f, args, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | Array   (exprs)               -> case compileArray (exprs, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | Sexp    (n, exprs)            -> case compileSexp (n, exprs, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | Elem    (x, i)                -> case compileElem (x, i, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | Builtin (name, args)          -> case compileBuiltin (name, args, env)
                                        of [env, code] -> [false, env, code]
                                      esac
   | Scope   (defs, e)             -> case compileScope (defs, e, env, lab)
                                        of [labUsed, env, code] -> [labUsed, env, code]
                                      esac
   | ElemRef (x, i)                -> compile (lab, env, Seq (x, i))
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, env, code] ->
         getBuffer (compileFunctions (env,
                           singletonBuffer (LABEL ("main"))   <+
                           BEGIN ("main", 0, getLocals (env)) <+>
                           code                               <+>
                           label (endLab, endLabUsed)         <+>
                           singletonBuffer (END)))
      esac
  esac
}

