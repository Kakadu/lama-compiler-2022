-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, st, w], insns) {
  case insns of
    {}          -> [stack, st, w]
  | ins : insns -> eval (
    case ins of
      LD (x)     -> [st (x) : stack, st, w]
    | CONST (n)  -> [n : stack, st, w]
    | BINOP (op) -> case stack of h : m : stack -> [evalBinop (op) (m, h) : stack, st, w] esac
    | ST (x)     -> case stack of h : stack -> [stack, st <- [x, h], w] esac
    | READ       -> case readWorld (w) of [n, w] -> [n : stack, st, w] esac
    | WRITE      -> case stack of h : stack -> [stack, st, writeWorld (h, w)] esac
    esac,
    insns
    )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x)          -> singletonBuffer (LD (x))
  | Const (n)        -> singletonBuffer (CONST (n))
  | Binop (op, l, r) -> compileExpr (l) <+> compileExpr (r) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt) {
    case stmt of
      Assn (x, expr)     -> compileExpr (expr) <+ ST (x)
    | Seq (stmt1, stmt2) -> compile (stmt1) <+> compile (stmt2) 
    | Skip               -> emptyBuffer ()
    | Read (x)           -> singletonBuffer (READ) <+ ST (x)
    | Write (expr)       -> compileExpr (expr) <+ WRITE
    esac
  }
  getBuffer $ compile (stmt)
}