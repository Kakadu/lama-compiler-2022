-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }

    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }

  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  fun assignArgs(state, args) {
    fun place(i, a) {
      assign(state, Arg (i), a);
      i + 1
    }
    foldl (place, 0, args)
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, calls, state, world], insns) {
    case insns of
      {} -> c
    | i:p -> case i of
        ST (x) -> case stack of
                    h:t -> assign(state, x, h); eval (c, p)
                  esac
      | STI -> case stack of
                v:x:t -> assign(state, x, v); eval ([v : t, calls, state, world], p)
               esac
      | STA -> case stack of
                v:i:x:t -> getData(x)[i] := v; eval ([v : t, calls, state, world], p)
               esac
      | LD (x)  -> eval ([lookup(state, x) : stack, calls, state, world], p)
      | LDA (x) -> eval ([x : stack, calls, state, world], p)
      | CONST (n) -> eval ([n : stack, calls, state, world], p)
      | BINOP (s) -> case stack of
                       y:(x:t) -> eval ([evalOp(s, x, y) : t, calls, state, world], p)
                     esac
      | STRING (s) -> eval ([s : stack, calls, state, world], p)
      | ARRAY (n) -> case take(stack, n) of
                      [stack, es] -> eval ([listArray(es) : stack, calls, state, world], p)
                     esac
      | SEXP (name, n) -> case take(stack, n) of
                            [stack, es] -> eval ([Sexp (name, listArray(es)) : stack, calls, state, world], p)
                          esac
      | ELEM -> case stack of
                  i:x:t -> eval ([getData(x)[i] : t, calls, state, world], p)
                esac
      | LABEL (s) -> eval (c, p)
      | JMP (l) -> eval (c, fromLabel(env, l) )
      | CJMP (c, l) -> case stack of
                        h:t -> eval ([t, calls, state, world], if (h == 0) == (compare(c, "z") == 0) then fromLabel(env, l)  else p fi)
                       esac
      | DUP -> case stack of
                h:t -> eval ([h : stack, calls, state, world], p)
               esac
      | DROP -> case stack of
                  _:t -> eval([t, calls, state, world], p)
                esac
      | GLOBAL (x) -> assign(state, Glb (x), 0); eval(c, p)
      | CALL (f, n) -> eval([stack, [state, p]:calls, state, world], fromLabel(env, f))
      | BUILTIN (f, na) -> case take(stack, na) of
          [stack, as] ->
          case evalBuiltin(f, as, world) of
            [v, world] -> eval([v:stack, calls, state, world], p)
          esac
        esac
      | BEGIN (f, na, nl) ->
        case take(stack, na) of
          [stack, as] ->
          case makeState(na, nl) of
              state -> assignArgs(state, as); eval([stack, calls, state, world], p)
          esac
        esac
      | END -> case calls of
          {} -> c
        | [state, p]:calls -> eval([stack, calls, state, world], p)
        esac
      esac
    esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

fun addDef([env, globals, funs], def) {
  case def of
    Var (ns) ->
      [
        addVars(env, ns),
        if isGlobal(env) then ns else {} fi +++ globals,
        funs
      ]
  | Fun (n, as, b) ->
      case genFunLabel (env, n) of [lab, env] ->
        [
          addFun(env, n, lab, size (as)),
          globals,
          Fun (lab, as, b) : funs
        ]
      esac
  esac
}

fun addDefs(env, defs) {
  case foldl (addDef, [env, {}, {}], defs) of
    [env, globals, funs] -> [
      foldl(fun(env, Fun(l, a, b)) { rememberFun(env, l, a, b)  }, env, funs),
      globals
    ]
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Var    (x)     -> [false, env, singletonBuffer (LD (lookupVal(env, x) ))]
    | Ref    (x)     -> [false, env, singletonBuffer (LDA (lookupVar(env, x) ))]
    | Const  (n)     -> [false, env, singletonBuffer (CONST (n))]
    | String (s)     -> [false, env, singletonBuffer (STRING (s))]
    | Assn  (Ref (x), e) ->
      case compileExpr(env, e) of
        [env, code] -> [false, env, code <+ ST (lookupVar(env, x) )]
      esac
    | Assn (x@ElemRef (_, _), e) ->
      case compileExprs (env, {x, e}) of
        [env, code] -> [false, env, code <+ STA]
      esac
    | Assn (x, e) ->
      case compileExprs (env, {x, e}) of
        [env, code] -> [false, env, code <+ STI]
      esac
    | If (cond, thenStmt, elseStmt) ->
      case genLabel(env) of
       [elseLabel, env] ->
         case compile(lab, env, cond) of
           [_, env, condCode] ->
             case compile(lab, env, thenStmt) of
               [_, env, thenCode] ->
                 case compile(lab, env, elseStmt) of
                   [_, env, elseCode] ->
                     [true, env,
                     condCode
                     <+ CJMP ("z", elseLabel)
                     <+> thenCode
                     <+ JMP (lab)
                     <+ LABEL (elseLabel)
                     <+> elseCode
                     ]
                 esac
             esac
         esac
      esac
    | While (cond, act) ->
      case genLabels(env, 2)  of
       [checkLabel, actLabel, env] ->
         case compile(lab, env, cond) of
           [labUsed, env, condCode] ->
             case compile(checkLabel, env, act) of
               [_, env, actCode] ->
                   [labUsed, env,
                     singletonBuffer (JMP (checkLabel))
                     <+ LABEL (actLabel)
                     <+> actCode
                     <+ LABEL (checkLabel)
                     <+> condCode
                     <+ CJMP ("nz", actLabel)
                   ]
           esac
         esac
      esac
    | DoWhile (act, cond) ->
      case genLabel(env) of
        [actLabel, env] ->
          case compileExprs(env, { act, cond}) of
            [env, code] ->
              [false, env,
                singletonBuffer (LABEL (actLabel))
                <+> code
                <+ CJMP ("nz", actLabel)
              ]
          esac
      esac
    | Seq   (s1, s2) ->
      case compileExpr(env, s1) of
        [env, s1Code] ->
          case compile(lab, env, s2) of
            [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> s2Code]
          esac
      esac
    | Ignore (e) ->
      case compileExpr(env, e) of
        [env, code] -> [false, env, code <+ DROP]
      esac
    | Binop (op, a, b) ->
      case compileExprs(env, {a, b}) of
        [env, code] -> [false, env, code <+ BINOP (op)]
      esac
    | Scope (d, a) ->
      case addDefs(beginScope(env), d) of
        [env, globals] ->
          case compile(lab, env, a) of
            [labUsed, env, aCode] -> [labUsed, endScope(env), listBuffer(map(fun(g) { GLOBAL (g) }, globals)) <+> aCode]
          esac
      esac
    | Call (f, as) ->
      case lookupFun(env, f) of
        Fun(flab, ns) ->
        case compileExprs(env, as) of
          [env, asCode] -> [false, env, asCode <+ (if flab[0] == '$' then BUILTIN (f, ns) else CALL (flab, ns) fi)]
        esac
      esac
    | Array (es) ->
      case compileExprs(env, es) of
        [env, code] -> [false, env, code <+ ARRAY (size(es))]
      esac
    | Sexp (name, es) ->
      case compileExprs(env, es) of
        [env, code] -> [false, env, code <+ SEXP (name, size(es))]
      esac
    | Elem (a, i) ->
      case compileExprs(env, {a, i}) of
        [env, code] -> [false, env, code <+ ELEM]
      esac
    | ElemRef (a, i) ->
      case compileExprs(env, {a, i}) of
        [env, code] -> [false, env, code]
      esac
    | _ -> failure ("compileSM not implemented\n")
    esac
  }

  fun compileList(compileElem, env, lst){
    foldl(fun ([env, code], e) {
      case compileElem(env, e) of
        [env, ecode] -> [env, code <+> ecode]
      esac
    }, [env, emptyBuffer ()], lst)
  }

  fun compileExpr(env, s) {
    case genLabel(env) of
      [lab, env] -> case compile(lab, env, s) of
        [labUsed, env, code] -> [env, code <+> label(lab, labUsed)]
      esac
    esac
  }

  fun compileExprs(env, lst) {
    compileList(compileExpr, env, lst)
  }

  fun compileFuns(env) {
    fun compileFun(env, Fun (flab, as, b, s)) {
      case genLabel(addArgs(beginFun(env, s), as)) of
        [lab, env] -> case compile(lab, env, b) of
          [labUsed, env, code] -> [env, singletonBuffer (LABEL (flab)) <+ BEGIN (flab, size (as), getLocals(env)) <+> code <+> label (lab, labUsed) <+ END]
        esac
      esac
    }
    case getFuns(env) of
      [{}, _] -> emptyBuffer ()
    | [funs, env] -> case compileList(compileFun, env, funs) of
        [env, fcode] -> case compileFuns(env) of
          nested -> fcode <+> nested
        esac
      esac
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
            getBuffer $ singletonBuffer(LABEL ("main")) <+ BEGIN ("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END <+> compileFuns(env)
       esac
  esac
}
