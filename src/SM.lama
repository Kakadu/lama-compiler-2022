-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- One stack machine's instruction interpreter. Takes an SM-configuration and an instruction,
-- returns a final configuration
fun evalInst (c, inst) {
  var stack = c[0], state = c[1], world = c[2];

  case inst of
    -- below num:stack is not a pattern matching, it's a list constructor
    READ      -> case readWorld (world) of [num, new_world] -> [num:stack, state, new_world] esac
    -- below num:tail is a pattern matching
  | WRITE     -> case stack of num:tail -> [tail, state, writeWorld (num, world)] esac
    -- note that x and y are swapped
  | BINOP (s) -> case stack of x:y:tail -> [evalOp (s, y, x):tail, state, world] esac
  | LD    (x) -> [state (x):stack, state, world]
  | ST    (x) -> case stack of num:tail -> [stack, state <- [x, num], world] esac
  | CONST (n) -> [n:stack, state, world]
  | LABEL (_) -> c
  | LDA   (x) -> [x:stack, state, world]
  | STI       -> case stack of x:y:tail -> [x:tail, state <- [y, x], world] esac
  | DROP      -> case stack of n:tail -> [tail, state, world] esac
  esac
}

fun evalJMP (l, env, c) {
  case env.fromLabel (l) of
    new_insns -> eval (env, c, new_insns)
  esac
}

-- Checks if we should jump on CJMP inst.
-- Returns a [bool, configuration with one element popped from the stack]
fun isJump (c@[stack, state, world], cond)
{
  case stack of num:tail ->
    var new_c = [tail, state, world];
    case cond of
      "nz" -> if num then [true,  new_c] else [false, new_c] fi
    | "z"  -> if num then [false, new_c] else [true,  new_c] fi
    esac
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    {} -> c
  | inst:tail ->
      case inst of
          JMP  (l)       -> l.evalJMP (env, c)
        | CJMP (cond, l) -> case isJump (c, cond) of
                              [jump, new_c] ->
                                if jump then
                                  l.evalJMP (env, new_c) else
                                  eval (env, new_c, tail)
                                fi
                            esac
        | _              -> eval (env, evalInst (c, inst), tail)
        esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileAssn (l, r, env) {
    case env.genLabels (2) of
      [l_lab, r_lab, env] ->
        case compile (l_lab, env, l) of
          [labUsedL, env, l_code] ->
            case compile (r_lab, env, r) of
              [labUsedR, env, r_code] ->
                [env, l_code                  <+>
                      label (l_lab, labUsedL) <+>
                      r_code                  <+>
                      label (r_lab, labUsedR) <+
                      STI]
            esac
        esac
    esac
  }

  fun compileSeq (l, r, env, lab) {
    case env.genLabel of
      [l_lab, env] ->
         case compile (l_lab, env, l) of
           [labUsedL, env, l_code] ->
              case compile (lab, env, r) of
                [labUsed, env, r_code] ->
                    [labUsed, env, l_code                  <+>
                                   label (l_lab, labUsedL) <+>
                                   r_code]
              esac
         esac
    esac
  }

  fun compileBinop (op, l, r, env) {
    case env.genLabels (2) of
      [l_lab, r_lab, env] ->
        case compile (l_lab, env, l) of
          [labUsedL, env, l_code] ->
            case compile (r_lab, env, r) of
              [labUsedR, env, r_code] ->
                [env, l_code                  <+>
                      label (l_lab, labUsedL) <+>
                      r_code                  <+>
                      label (r_lab, labUsedR) <+
                      BINOP (op)]
            esac
        esac
    esac
  }

  fun compileWrite (e, env) {
    case env.genLabel of
      [lab, env] ->
        case compile (lab, env, e) of
          [labUsed, env, code] ->
            [env, code                  <+>
                  label (lab, labUsed) <+
                  WRITE]
        esac
    esac
  }

  fun compileIgnore (e, env) {
    case env.genLabel of
      [lab, env] ->
        case compile (lab, env, e) of
          [labUsed, env, code] ->
            [env, code                  <+>
                  label (lab, labUsed)  <+
                  DROP]
        esac
    esac
  }

  fun compileDoWhile (loop_exp, e, env) {
    case env.genLabels (3) of
      [loop_lab, loop_exp_lab, e_lab, env] ->
        case compile (loop_exp_lab, env, loop_exp) of
          [labUsedLE, env, loop_exp_code] ->
            case compile (e_lab, env, e) of
              [labUsedE, env, e_code] ->
                [env, singletonBuffer (LABEL (loop_lab)) <+>
                      loop_exp_code                      <+>
                      label (loop_exp_lab, labUsedLE)    <+>
                      e_code                             <+>
                      label (e_lab, labUsedE)            <+
                      CJMP ("nz", loop_lab)]
            esac
        esac
    esac
  }

  -- We don't care if loop_exp_lab is used by loop_exp,
  -- we use it anyway to jump to the expression code
  fun compileWhile (loop_exp, e, env) {
    case env.genLabels (3) of
      [loop_lab, loop_exp_lab, e_lab, env] ->
        case compile (loop_exp_lab, env, loop_exp) of
          [_, env, loop_exp_code] ->
            case compile (e_lab, env, e) of
              [labUsedE, env, e_code] ->
                [env, singletonBuffer (JMP (loop_exp_lab)) <+
                      LABEL (loop_lab)                     <+>
                      loop_exp_code                        <+
                      LABEL (loop_exp_lab)                 <+>
                      e_code                               <+>
                      label (e_lab, labUsedE)              <+
                      CJMP ("nz", loop_lab)]
            esac
        esac
    esac
  }

  -- compiled e
  -- jump if not 0 to if_lab
  -- compiled else_exp
  -- else_lab: (optional)
  -- jmp to the end (JMP lab)
  -- if_lab:
  -- compiled if_exp
  -- lab: (ending label)
  fun compileIf (if_exp, else_exp, e, env, lab) {
    case env.genLabels (3) of
      [else_lab, if_lab, e_lab, env] ->
        case compile (else_lab, env, else_exp) of
          [labUsed, env, else_stmt_code] ->
            case compile (lab, env, if_exp) of
              [_, env, if_stmt_code] ->
               case compile (e_lab, env, e) of
                 [labUsedE, env, e_code] ->
                   [env, e_code                    <+>
                         label (e_lab, labUsedE)   <+
                         CJMP ("nz", if_lab)       <+>
                         else_stmt_code            <+>
                         label (else_lab, labUsed) <+
                         JMP (lab)                 <+
                         LABEL (if_lab)            <+>
                         if_stmt_code              <+
                         LABEL (lab)]
               esac
            esac
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip       -> [false, env, emptyBuffer ()]
    | Var    (x) -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x) -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n) -> [false, env, singletonBuffer (CONST (n))]
    | Read   (x) -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Seq    (l, r)                 -> case compileSeq (l, r, env, lab)
                                         of [labUsed, env, code] -> [labUsed, env, code]
                                       esac
    | Write  (e)                    -> case compileWrite (e, env)
                                         of [env, code] -> [false, env, code]
                                       esac
    | Ignore (e)                    -> case compileIgnore (e, env)
                                         of [env, code] -> [false, env, code]
                                       esac
    | Assn   (l, r)                 -> case compileAssn (l, r, env)
                                         of [env, code] -> [false, env, code]
                                       esac
    | DoWhile (loop_exp, e)         -> case compileDoWhile (loop_exp, e, env)
                                         of [env, code] -> [false, env, code]
                                       esac
    | While   (e, loop_exp)         -> case compileWhile (loop_exp, e, env)
                                         of [env, code] -> [false, env, code]
                                       esac
    | If      (e, if_exp, else_exp) -> case compileIf (if_exp, else_exp, e, env, lab)
                                         of [env, code] -> [true, env, code]
                                       esac
    | Binop   (op, l, r)            -> case compileBinop (op, l, r, env)
                                         of [env, code] -> [false, env, code]
                                       esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
