-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun binOp (op1, op2, sign) {
  case sign of 
    "+"  -> op1 +  op2
  | "-"  -> op1 -  op2
  | "*"  -> op1 *  op2
  | "/"  -> op1 /  op2
  | "%"  -> op1 %  op2
  | "==" -> op1 == op2
  | "!=" -> op1 != op2
  | "<"  -> op1 <  op2
  | "<=" -> op1 <= op2
  | ">"  -> op1 >  op2
  | ">=" -> op1 >= op2
  | "&&" -> op1 && op2
  | "!!" -> op1 !! op2
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[mem, st, w], insns) {
  case insns of 
    {} -> c
  | insn : newInsns -> 
    case insn of
      READ ->  
      case readWorld (w) of 
        [v, nw] -> eval ([v : mem, st, nw], newInsns)
      esac
      | WRITE -> 
      case mem of 
        v : nmem -> 
        eval ([nmem, st, writeWorld (v, w)], newInsns)
      esac
      | BINOP (s) -> 
      case mem of 
        op2 : op1 : nmem -> eval ([binOp (op1, op2, s) : nmem, st, w], newInsns)
      esac 
      | LD (x) -> eval ([st (x) : mem, st, w], newInsns)
      | ST (x) ->
      case mem of 
        v : nmem -> 
        eval ([nmem, st <- [x, v], w], newInsns)
      esac
      | CONST (n) -> eval ([n : mem, st, w], newInsns)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (v) -> { LD (v) }
  | Const (n) -> { CONST (n) }
  | Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> compileExpr (expr) +++ { ST (x) }
  | Seq (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Skip -> {}
  | Read (x) -> READ : { ST (x) }
  | Write (e) -> compileExpr (e) +++ { WRITE }
  esac
}
