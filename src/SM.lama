-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  (
    var curConf = c;
    for var i; i := 0, i < insns.length, i := i + 1 do
      curConf := evalSingleInstruction(curConf, insns[i]) 
    od;
    curConf
  )
}

fun evalSingleInstruction([stack, state, world], insn) {
  case insn of
    READ -> 
      var readResult = readWorld(world);
      var value = readResult[0];
      var newWorld = readResult[1];
      [value:stack, state, newWorld]
  | WRITE -> 
      [stack.tl, state, writeWorld(stack.hd, world)]
  | BINOP (op) ->
      var right = stack.hd;
      var left = stack.tl.hd;
      [binopEvaluator(op)(left, right):stack.tl.tl, state, world]
  | LD (name) -> 
      [state(name):stack, state, world]
  | ST (name) -> 
      [stack.tl, state <- [name, stack.hd], world]
  | CONST (n) -> 
      [n:stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name) -> singletonBuffer(LD(name))
  | Const (i) -> singletonBuffer(CONST(i))
  | Binop (op, left, right) -> compileExpr(left) <+> compileExpr(right) <+> singletonBuffer(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr) -> compileExpr(expr) <+> singletonBuffer(ST(name))
  | Seq (s1, s2) -> compileSM(s1) <+> compileSM(s2)
  | Skip -> emptyBuffer()
  | Read (name) -> singletonBuffer(READ) <+> singletonBuffer(ST(name))
  | Write (expr) -> compileExpr(expr) <+> singletonBuffer(WRITE)
  esac
}
