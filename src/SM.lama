-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  var stack = 0;
  var state = 1;
  var world = 2;

  fun pop () {
    case c[stack] of h:tl -> c[stack] := tl; h esac
  }

  fun push (v) {
    c[stack] := {v} +++ c[stack]
  }

  fun process (ins) {
    case ins of
      READ      -> case readWorld (c[world]) of [v, w] -> c[world] := w; push (v) esac
    | WRITE     -> c[world] := writeWorld (pop (), c[world])
    | BINOP (s) -> var rhs = pop (); push (evalBinOp (s, pop (), rhs))
    | LD (x)    -> push (c[state] (x))
    | ST (x)    -> c[state] := c[state] <- [x, pop ()]
    | CONST (n) -> push (n)
    esac
  }

  iter (process, insns);
  c
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (value)        -> { CONST (value) }
  | Var (name)           -> { LD (name) }
  | Binop (op, lhs, rhs) -> compileExpr (lhs) +++ compileExpr (rhs) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (string, expr) -> compileExpr (expr) +++ { ST (string) }
  | Seq (lhs, rhs)      -> compileSM (lhs) +++ compileSM (rhs)
  | Read (string)       -> { READ, ST (string) }
  | Write (expr)        -> compileExpr (expr) +++ { WRITE }
  esac
}
